
STM32_USB_MSC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000abe0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000164  0800ad68  0800ad68  0001ad68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800aecc  0800aecc  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  0800aecc  0800aecc  0001aecc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800aed4  0800aed4  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800aed4  0800aed4  0001aed4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800aed8  0800aed8  0001aed8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  0800aedc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c58  20000090  0800af6c  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000ce8  0800af6c  00020ce8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   00025166  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004989  00000000  00000000  00045226  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001458  00000000  00000000  00049bb0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001280  00000000  00000000  0004b008  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000267be  00000000  00000000  0004c288  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00017469  00000000  00000000  00072a46  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cc26b  00000000  00000000  00089eaf  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0015611a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000054dc  00000000  00000000  00156198  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000090 	.word	0x20000090
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800ad50 	.word	0x0800ad50

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000094 	.word	0x20000094
 80001c4:	0800ad50 	.word	0x0800ad50

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b972 	b.w	80004d4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	4688      	mov	r8, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14b      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000216:	428a      	cmp	r2, r1
 8000218:	4615      	mov	r5, r2
 800021a:	d967      	bls.n	80002ec <__udivmoddi4+0xe4>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0720 	rsb	r7, r2, #32
 8000226:	fa01 f302 	lsl.w	r3, r1, r2
 800022a:	fa20 f707 	lsr.w	r7, r0, r7
 800022e:	4095      	lsls	r5, r2
 8000230:	ea47 0803 	orr.w	r8, r7, r3
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000240:	fa1f fc85 	uxth.w	ip, r5
 8000244:	fb0e 8817 	mls	r8, lr, r7, r8
 8000248:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024c:	fb07 f10c 	mul.w	r1, r7, ip
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18eb      	adds	r3, r5, r3
 8000256:	f107 30ff 	add.w	r0, r7, #4294967295
 800025a:	f080 811b 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8118 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000264:	3f02      	subs	r7, #2
 8000266:	442b      	add	r3, r5
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000270:	fb0e 3310 	mls	r3, lr, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fc0c 	mul.w	ip, r0, ip
 800027c:	45a4      	cmp	ip, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	192c      	adds	r4, r5, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x290>
 800028a:	45a4      	cmp	ip, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x290>
 8000290:	3802      	subs	r0, #2
 8000292:	442c      	add	r4, r5
 8000294:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000298:	eba4 040c 	sub.w	r4, r4, ip
 800029c:	2700      	movs	r7, #0
 800029e:	b11e      	cbz	r6, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c6 4300 	strd	r4, r3, [r6]
 80002a8:	4639      	mov	r1, r7
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xbe>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80eb 	beq.w	800048e <__udivmoddi4+0x286>
 80002b8:	2700      	movs	r7, #0
 80002ba:	e9c6 0100 	strd	r0, r1, [r6]
 80002be:	4638      	mov	r0, r7
 80002c0:	4639      	mov	r1, r7
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f783 	clz	r7, r3
 80002ca:	2f00      	cmp	r7, #0
 80002cc:	d147      	bne.n	800035e <__udivmoddi4+0x156>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd0>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80fa 	bhi.w	80004cc <__udivmoddi4+0x2c4>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	4698      	mov	r8, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa0>
 80002e6:	e9c6 4800 	strd	r4, r8, [r6]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa0>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xe8>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 808f 	bne.w	8000418 <__udivmoddi4+0x210>
 80002fa:	1b49      	subs	r1, r1, r5
 80002fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000300:	fa1f f885 	uxth.w	r8, r5
 8000304:	2701      	movs	r7, #1
 8000306:	fbb1 fcfe 	udiv	ip, r1, lr
 800030a:	0c23      	lsrs	r3, r4, #16
 800030c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb08 f10c 	mul.w	r1, r8, ip
 8000318:	4299      	cmp	r1, r3
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x124>
 800031c:	18eb      	adds	r3, r5, r3
 800031e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4299      	cmp	r1, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 800032a:	4684      	mov	ip, r0
 800032c:	1a59      	subs	r1, r3, r1
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb1 f0fe 	udiv	r0, r1, lr
 8000334:	fb0e 1410 	mls	r4, lr, r0, r1
 8000338:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800033c:	fb08 f800 	mul.w	r8, r8, r0
 8000340:	45a0      	cmp	r8, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x14c>
 8000344:	192c      	adds	r4, r5, r4
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x14a>
 800034c:	45a0      	cmp	r8, r4
 800034e:	f200 80b6 	bhi.w	80004be <__udivmoddi4+0x2b6>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 0408 	sub.w	r4, r4, r8
 8000358:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800035c:	e79f      	b.n	800029e <__udivmoddi4+0x96>
 800035e:	f1c7 0c20 	rsb	ip, r7, #32
 8000362:	40bb      	lsls	r3, r7
 8000364:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000368:	ea4e 0e03 	orr.w	lr, lr, r3
 800036c:	fa01 f407 	lsl.w	r4, r1, r7
 8000370:	fa20 f50c 	lsr.w	r5, r0, ip
 8000374:	fa21 f30c 	lsr.w	r3, r1, ip
 8000378:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800037c:	4325      	orrs	r5, r4
 800037e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000382:	0c2c      	lsrs	r4, r5, #16
 8000384:	fb08 3319 	mls	r3, r8, r9, r3
 8000388:	fa1f fa8e 	uxth.w	sl, lr
 800038c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000390:	fb09 f40a 	mul.w	r4, r9, sl
 8000394:	429c      	cmp	r4, r3
 8000396:	fa02 f207 	lsl.w	r2, r2, r7
 800039a:	fa00 f107 	lsl.w	r1, r0, r7
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1e 0303 	adds.w	r3, lr, r3
 80003a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a8:	f080 8087 	bcs.w	80004ba <__udivmoddi4+0x2b2>
 80003ac:	429c      	cmp	r4, r3
 80003ae:	f240 8084 	bls.w	80004ba <__udivmoddi4+0x2b2>
 80003b2:	f1a9 0902 	sub.w	r9, r9, #2
 80003b6:	4473      	add	r3, lr
 80003b8:	1b1b      	subs	r3, r3, r4
 80003ba:	b2ad      	uxth	r5, r5
 80003bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c0:	fb08 3310 	mls	r3, r8, r0, r3
 80003c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003cc:	45a2      	cmp	sl, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1e 0404 	adds.w	r4, lr, r4
 80003d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d8:	d26b      	bcs.n	80004b2 <__udivmoddi4+0x2aa>
 80003da:	45a2      	cmp	sl, r4
 80003dc:	d969      	bls.n	80004b2 <__udivmoddi4+0x2aa>
 80003de:	3802      	subs	r0, #2
 80003e0:	4474      	add	r4, lr
 80003e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003e6:	fba0 8902 	umull	r8, r9, r0, r2
 80003ea:	eba4 040a 	sub.w	r4, r4, sl
 80003ee:	454c      	cmp	r4, r9
 80003f0:	46c2      	mov	sl, r8
 80003f2:	464b      	mov	r3, r9
 80003f4:	d354      	bcc.n	80004a0 <__udivmoddi4+0x298>
 80003f6:	d051      	beq.n	800049c <__udivmoddi4+0x294>
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d069      	beq.n	80004d0 <__udivmoddi4+0x2c8>
 80003fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000400:	eb64 0403 	sbc.w	r4, r4, r3
 8000404:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000408:	40fd      	lsrs	r5, r7
 800040a:	40fc      	lsrs	r4, r7
 800040c:	ea4c 0505 	orr.w	r5, ip, r5
 8000410:	e9c6 5400 	strd	r5, r4, [r6]
 8000414:	2700      	movs	r7, #0
 8000416:	e747      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000418:	f1c2 0320 	rsb	r3, r2, #32
 800041c:	fa20 f703 	lsr.w	r7, r0, r3
 8000420:	4095      	lsls	r5, r2
 8000422:	fa01 f002 	lsl.w	r0, r1, r2
 8000426:	fa21 f303 	lsr.w	r3, r1, r3
 800042a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800042e:	4338      	orrs	r0, r7
 8000430:	0c01      	lsrs	r1, r0, #16
 8000432:	fbb3 f7fe 	udiv	r7, r3, lr
 8000436:	fa1f f885 	uxth.w	r8, r5
 800043a:	fb0e 3317 	mls	r3, lr, r7, r3
 800043e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000442:	fb07 f308 	mul.w	r3, r7, r8
 8000446:	428b      	cmp	r3, r1
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d907      	bls.n	800045e <__udivmoddi4+0x256>
 800044e:	1869      	adds	r1, r5, r1
 8000450:	f107 3cff 	add.w	ip, r7, #4294967295
 8000454:	d22f      	bcs.n	80004b6 <__udivmoddi4+0x2ae>
 8000456:	428b      	cmp	r3, r1
 8000458:	d92d      	bls.n	80004b6 <__udivmoddi4+0x2ae>
 800045a:	3f02      	subs	r7, #2
 800045c:	4429      	add	r1, r5
 800045e:	1acb      	subs	r3, r1, r3
 8000460:	b281      	uxth	r1, r0
 8000462:	fbb3 f0fe 	udiv	r0, r3, lr
 8000466:	fb0e 3310 	mls	r3, lr, r0, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb00 f308 	mul.w	r3, r0, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x27e>
 8000476:	1869      	adds	r1, r5, r1
 8000478:	f100 3cff 	add.w	ip, r0, #4294967295
 800047c:	d217      	bcs.n	80004ae <__udivmoddi4+0x2a6>
 800047e:	428b      	cmp	r3, r1
 8000480:	d915      	bls.n	80004ae <__udivmoddi4+0x2a6>
 8000482:	3802      	subs	r0, #2
 8000484:	4429      	add	r1, r5
 8000486:	1ac9      	subs	r1, r1, r3
 8000488:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800048c:	e73b      	b.n	8000306 <__udivmoddi4+0xfe>
 800048e:	4637      	mov	r7, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e709      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000494:	4607      	mov	r7, r0
 8000496:	e6e7      	b.n	8000268 <__udivmoddi4+0x60>
 8000498:	4618      	mov	r0, r3
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x8c>
 800049c:	4541      	cmp	r1, r8
 800049e:	d2ab      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004a4:	eb69 020e 	sbc.w	r2, r9, lr
 80004a8:	3801      	subs	r0, #1
 80004aa:	4613      	mov	r3, r2
 80004ac:	e7a4      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004ae:	4660      	mov	r0, ip
 80004b0:	e7e9      	b.n	8000486 <__udivmoddi4+0x27e>
 80004b2:	4618      	mov	r0, r3
 80004b4:	e795      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b6:	4667      	mov	r7, ip
 80004b8:	e7d1      	b.n	800045e <__udivmoddi4+0x256>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e77c      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004be:	3802      	subs	r0, #2
 80004c0:	442c      	add	r4, r5
 80004c2:	e747      	b.n	8000354 <__udivmoddi4+0x14c>
 80004c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c8:	442b      	add	r3, r5
 80004ca:	e72f      	b.n	800032c <__udivmoddi4+0x124>
 80004cc:	4638      	mov	r0, r7
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xda>
 80004d0:	4637      	mov	r7, r6
 80004d2:	e6e9      	b.n	80002a8 <__udivmoddi4+0xa0>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004dc:	f000 fbfe 	bl	8000cdc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e0:	f000 f81c 	bl	800051c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e4:	f000 f930 	bl	8000748 <MX_GPIO_Init>
  MX_I2C1_Init();
 80004e8:	f000 f89a 	bl	8000620 <MX_I2C1_Init>
  MX_I2S3_Init();
 80004ec:	f000 f8c6 	bl	800067c <MX_I2S3_Init>
  MX_SPI1_Init();
 80004f0:	f000 f8f4 	bl	80006dc <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80004f4:	f009 ffe8 	bl	800a4c8 <MX_USB_HOST_Init>
  MX_FATFS_Init();
 80004f8:	f004 ff26 	bl	8005348 <MX_FATFS_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80004fc:	f00a f80a 	bl	800a514 <MX_USB_HOST_Process>

    switch(Appli_state)
 8000500:	4b05      	ldr	r3, [pc, #20]	; (8000518 <main+0x40>)
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	2b02      	cmp	r3, #2
 8000506:	d000      	beq.n	800050a <main+0x32>
    		FatFS_routine();
    		Appli_state = APPLICATION_IDLE;
    		break;
    	case APPLICATION_IDLE:
    	default:
    		break;
 8000508:	e005      	b.n	8000516 <main+0x3e>
    		FatFS_routine();
 800050a:	f004 febb 	bl	8005284 <FatFS_routine>
    		Appli_state = APPLICATION_IDLE;
 800050e:	4b02      	ldr	r3, [pc, #8]	; (8000518 <main+0x40>)
 8000510:	2200      	movs	r2, #0
 8000512:	601a      	str	r2, [r3, #0]
    		break;
 8000514:	bf00      	nop
    MX_USB_HOST_Process();
 8000516:	e7f1      	b.n	80004fc <main+0x24>
 8000518:	200000e8 	.word	0x200000e8

0800051c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b098      	sub	sp, #96	; 0x60
 8000520:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000522:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000526:	2230      	movs	r2, #48	; 0x30
 8000528:	2100      	movs	r1, #0
 800052a:	4618      	mov	r0, r3
 800052c:	f00a fb4d 	bl	800abca <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000530:	f107 031c 	add.w	r3, r7, #28
 8000534:	2200      	movs	r2, #0
 8000536:	601a      	str	r2, [r3, #0]
 8000538:	605a      	str	r2, [r3, #4]
 800053a:	609a      	str	r2, [r3, #8]
 800053c:	60da      	str	r2, [r3, #12]
 800053e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000540:	f107 030c 	add.w	r3, r7, #12
 8000544:	2200      	movs	r2, #0
 8000546:	601a      	str	r2, [r3, #0]
 8000548:	605a      	str	r2, [r3, #4]
 800054a:	609a      	str	r2, [r3, #8]
 800054c:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800054e:	2300      	movs	r3, #0
 8000550:	60bb      	str	r3, [r7, #8]
 8000552:	4b31      	ldr	r3, [pc, #196]	; (8000618 <SystemClock_Config+0xfc>)
 8000554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000556:	4a30      	ldr	r2, [pc, #192]	; (8000618 <SystemClock_Config+0xfc>)
 8000558:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800055c:	6413      	str	r3, [r2, #64]	; 0x40
 800055e:	4b2e      	ldr	r3, [pc, #184]	; (8000618 <SystemClock_Config+0xfc>)
 8000560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000562:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000566:	60bb      	str	r3, [r7, #8]
 8000568:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800056a:	2300      	movs	r3, #0
 800056c:	607b      	str	r3, [r7, #4]
 800056e:	4b2b      	ldr	r3, [pc, #172]	; (800061c <SystemClock_Config+0x100>)
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	4a2a      	ldr	r2, [pc, #168]	; (800061c <SystemClock_Config+0x100>)
 8000574:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000578:	6013      	str	r3, [r2, #0]
 800057a:	4b28      	ldr	r3, [pc, #160]	; (800061c <SystemClock_Config+0x100>)
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000582:	607b      	str	r3, [r7, #4]
 8000584:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000586:	2301      	movs	r3, #1
 8000588:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800058a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800058e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000590:	2302      	movs	r3, #2
 8000592:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000594:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000598:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800059a:	2308      	movs	r3, #8
 800059c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 800059e:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80005a2:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005a4:	2302      	movs	r3, #2
 80005a6:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005a8:	2307      	movs	r3, #7
 80005aa:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ac:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80005b0:	4618      	mov	r0, r3
 80005b2:	f003 f92b 	bl	800380c <HAL_RCC_OscConfig>
 80005b6:	4603      	mov	r3, r0
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d001      	beq.n	80005c0 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 80005bc:	f000 f9c2 	bl	8000944 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005c0:	230f      	movs	r3, #15
 80005c2:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005c4:	2302      	movs	r3, #2
 80005c6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005c8:	2300      	movs	r3, #0
 80005ca:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005cc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005d0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005d6:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005d8:	f107 031c 	add.w	r3, r7, #28
 80005dc:	2105      	movs	r1, #5
 80005de:	4618      	mov	r0, r3
 80005e0:	f003 fb84 	bl	8003cec <HAL_RCC_ClockConfig>
 80005e4:	4603      	mov	r3, r0
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d001      	beq.n	80005ee <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80005ea:	f000 f9ab 	bl	8000944 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80005ee:	2301      	movs	r3, #1
 80005f0:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 80005f2:	23c0      	movs	r3, #192	; 0xc0
 80005f4:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80005f6:	2302      	movs	r3, #2
 80005f8:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80005fa:	f107 030c 	add.w	r3, r7, #12
 80005fe:	4618      	mov	r0, r3
 8000600:	f003 fd52 	bl	80040a8 <HAL_RCCEx_PeriphCLKConfig>
 8000604:	4603      	mov	r3, r0
 8000606:	2b00      	cmp	r3, #0
 8000608:	d001      	beq.n	800060e <SystemClock_Config+0xf2>
  {
    Error_Handler();
 800060a:	f000 f99b 	bl	8000944 <Error_Handler>
  }
}
 800060e:	bf00      	nop
 8000610:	3760      	adds	r7, #96	; 0x60
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	40023800 	.word	0x40023800
 800061c:	40007000 	.word	0x40007000

08000620 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000624:	4b12      	ldr	r3, [pc, #72]	; (8000670 <MX_I2C1_Init+0x50>)
 8000626:	4a13      	ldr	r2, [pc, #76]	; (8000674 <MX_I2C1_Init+0x54>)
 8000628:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800062a:	4b11      	ldr	r3, [pc, #68]	; (8000670 <MX_I2C1_Init+0x50>)
 800062c:	4a12      	ldr	r2, [pc, #72]	; (8000678 <MX_I2C1_Init+0x58>)
 800062e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000630:	4b0f      	ldr	r3, [pc, #60]	; (8000670 <MX_I2C1_Init+0x50>)
 8000632:	2200      	movs	r2, #0
 8000634:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000636:	4b0e      	ldr	r3, [pc, #56]	; (8000670 <MX_I2C1_Init+0x50>)
 8000638:	2200      	movs	r2, #0
 800063a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800063c:	4b0c      	ldr	r3, [pc, #48]	; (8000670 <MX_I2C1_Init+0x50>)
 800063e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000642:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000644:	4b0a      	ldr	r3, [pc, #40]	; (8000670 <MX_I2C1_Init+0x50>)
 8000646:	2200      	movs	r2, #0
 8000648:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800064a:	4b09      	ldr	r3, [pc, #36]	; (8000670 <MX_I2C1_Init+0x50>)
 800064c:	2200      	movs	r2, #0
 800064e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000650:	4b07      	ldr	r3, [pc, #28]	; (8000670 <MX_I2C1_Init+0x50>)
 8000652:	2200      	movs	r2, #0
 8000654:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000656:	4b06      	ldr	r3, [pc, #24]	; (8000670 <MX_I2C1_Init+0x50>)
 8000658:	2200      	movs	r2, #0
 800065a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800065c:	4804      	ldr	r0, [pc, #16]	; (8000670 <MX_I2C1_Init+0x50>)
 800065e:	f002 fafd 	bl	8002c5c <HAL_I2C_Init>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d001      	beq.n	800066c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000668:	f000 f96c 	bl	8000944 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800066c:	bf00      	nop
 800066e:	bd80      	pop	{r7, pc}
 8000670:	200000f4 	.word	0x200000f4
 8000674:	40005400 	.word	0x40005400
 8000678:	000186a0 	.word	0x000186a0

0800067c <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000680:	4b13      	ldr	r3, [pc, #76]	; (80006d0 <MX_I2S3_Init+0x54>)
 8000682:	4a14      	ldr	r2, [pc, #80]	; (80006d4 <MX_I2S3_Init+0x58>)
 8000684:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000686:	4b12      	ldr	r3, [pc, #72]	; (80006d0 <MX_I2S3_Init+0x54>)
 8000688:	f44f 7200 	mov.w	r2, #512	; 0x200
 800068c:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800068e:	4b10      	ldr	r3, [pc, #64]	; (80006d0 <MX_I2S3_Init+0x54>)
 8000690:	2200      	movs	r2, #0
 8000692:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000694:	4b0e      	ldr	r3, [pc, #56]	; (80006d0 <MX_I2S3_Init+0x54>)
 8000696:	2200      	movs	r2, #0
 8000698:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800069a:	4b0d      	ldr	r3, [pc, #52]	; (80006d0 <MX_I2S3_Init+0x54>)
 800069c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006a0:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80006a2:	4b0b      	ldr	r3, [pc, #44]	; (80006d0 <MX_I2S3_Init+0x54>)
 80006a4:	4a0c      	ldr	r2, [pc, #48]	; (80006d8 <MX_I2S3_Init+0x5c>)
 80006a6:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80006a8:	4b09      	ldr	r3, [pc, #36]	; (80006d0 <MX_I2S3_Init+0x54>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80006ae:	4b08      	ldr	r3, [pc, #32]	; (80006d0 <MX_I2S3_Init+0x54>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80006b4:	4b06      	ldr	r3, [pc, #24]	; (80006d0 <MX_I2S3_Init+0x54>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80006ba:	4805      	ldr	r0, [pc, #20]	; (80006d0 <MX_I2S3_Init+0x54>)
 80006bc:	f002 fc06 	bl	8002ecc <HAL_I2S_Init>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80006c6:	f000 f93d 	bl	8000944 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80006ca:	bf00      	nop
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	200001a0 	.word	0x200001a0
 80006d4:	40003c00 	.word	0x40003c00
 80006d8:	00017700 	.word	0x00017700

080006dc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80006e0:	4b17      	ldr	r3, [pc, #92]	; (8000740 <MX_SPI1_Init+0x64>)
 80006e2:	4a18      	ldr	r2, [pc, #96]	; (8000744 <MX_SPI1_Init+0x68>)
 80006e4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80006e6:	4b16      	ldr	r3, [pc, #88]	; (8000740 <MX_SPI1_Init+0x64>)
 80006e8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80006ec:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80006ee:	4b14      	ldr	r3, [pc, #80]	; (8000740 <MX_SPI1_Init+0x64>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80006f4:	4b12      	ldr	r3, [pc, #72]	; (8000740 <MX_SPI1_Init+0x64>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006fa:	4b11      	ldr	r3, [pc, #68]	; (8000740 <MX_SPI1_Init+0x64>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000700:	4b0f      	ldr	r3, [pc, #60]	; (8000740 <MX_SPI1_Init+0x64>)
 8000702:	2200      	movs	r2, #0
 8000704:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000706:	4b0e      	ldr	r3, [pc, #56]	; (8000740 <MX_SPI1_Init+0x64>)
 8000708:	f44f 7200 	mov.w	r2, #512	; 0x200
 800070c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800070e:	4b0c      	ldr	r3, [pc, #48]	; (8000740 <MX_SPI1_Init+0x64>)
 8000710:	2200      	movs	r2, #0
 8000712:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000714:	4b0a      	ldr	r3, [pc, #40]	; (8000740 <MX_SPI1_Init+0x64>)
 8000716:	2200      	movs	r2, #0
 8000718:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800071a:	4b09      	ldr	r3, [pc, #36]	; (8000740 <MX_SPI1_Init+0x64>)
 800071c:	2200      	movs	r2, #0
 800071e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000720:	4b07      	ldr	r3, [pc, #28]	; (8000740 <MX_SPI1_Init+0x64>)
 8000722:	2200      	movs	r2, #0
 8000724:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000726:	4b06      	ldr	r3, [pc, #24]	; (8000740 <MX_SPI1_Init+0x64>)
 8000728:	220a      	movs	r2, #10
 800072a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800072c:	4804      	ldr	r0, [pc, #16]	; (8000740 <MX_SPI1_Init+0x64>)
 800072e:	f003 fdf9 	bl	8004324 <HAL_SPI_Init>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d001      	beq.n	800073c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000738:	f000 f904 	bl	8000944 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800073c:	bf00      	nop
 800073e:	bd80      	pop	{r7, pc}
 8000740:	20000148 	.word	0x20000148
 8000744:	40013000 	.word	0x40013000

08000748 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b08c      	sub	sp, #48	; 0x30
 800074c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800074e:	f107 031c 	add.w	r3, r7, #28
 8000752:	2200      	movs	r2, #0
 8000754:	601a      	str	r2, [r3, #0]
 8000756:	605a      	str	r2, [r3, #4]
 8000758:	609a      	str	r2, [r3, #8]
 800075a:	60da      	str	r2, [r3, #12]
 800075c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800075e:	2300      	movs	r3, #0
 8000760:	61bb      	str	r3, [r7, #24]
 8000762:	4b71      	ldr	r3, [pc, #452]	; (8000928 <MX_GPIO_Init+0x1e0>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000766:	4a70      	ldr	r2, [pc, #448]	; (8000928 <MX_GPIO_Init+0x1e0>)
 8000768:	f043 0310 	orr.w	r3, r3, #16
 800076c:	6313      	str	r3, [r2, #48]	; 0x30
 800076e:	4b6e      	ldr	r3, [pc, #440]	; (8000928 <MX_GPIO_Init+0x1e0>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000772:	f003 0310 	and.w	r3, r3, #16
 8000776:	61bb      	str	r3, [r7, #24]
 8000778:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800077a:	2300      	movs	r3, #0
 800077c:	617b      	str	r3, [r7, #20]
 800077e:	4b6a      	ldr	r3, [pc, #424]	; (8000928 <MX_GPIO_Init+0x1e0>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000782:	4a69      	ldr	r2, [pc, #420]	; (8000928 <MX_GPIO_Init+0x1e0>)
 8000784:	f043 0304 	orr.w	r3, r3, #4
 8000788:	6313      	str	r3, [r2, #48]	; 0x30
 800078a:	4b67      	ldr	r3, [pc, #412]	; (8000928 <MX_GPIO_Init+0x1e0>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078e:	f003 0304 	and.w	r3, r3, #4
 8000792:	617b      	str	r3, [r7, #20]
 8000794:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000796:	2300      	movs	r3, #0
 8000798:	613b      	str	r3, [r7, #16]
 800079a:	4b63      	ldr	r3, [pc, #396]	; (8000928 <MX_GPIO_Init+0x1e0>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	4a62      	ldr	r2, [pc, #392]	; (8000928 <MX_GPIO_Init+0x1e0>)
 80007a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007a4:	6313      	str	r3, [r2, #48]	; 0x30
 80007a6:	4b60      	ldr	r3, [pc, #384]	; (8000928 <MX_GPIO_Init+0x1e0>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007ae:	613b      	str	r3, [r7, #16]
 80007b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007b2:	2300      	movs	r3, #0
 80007b4:	60fb      	str	r3, [r7, #12]
 80007b6:	4b5c      	ldr	r3, [pc, #368]	; (8000928 <MX_GPIO_Init+0x1e0>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	4a5b      	ldr	r2, [pc, #364]	; (8000928 <MX_GPIO_Init+0x1e0>)
 80007bc:	f043 0301 	orr.w	r3, r3, #1
 80007c0:	6313      	str	r3, [r2, #48]	; 0x30
 80007c2:	4b59      	ldr	r3, [pc, #356]	; (8000928 <MX_GPIO_Init+0x1e0>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c6:	f003 0301 	and.w	r3, r3, #1
 80007ca:	60fb      	str	r3, [r7, #12]
 80007cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ce:	2300      	movs	r3, #0
 80007d0:	60bb      	str	r3, [r7, #8]
 80007d2:	4b55      	ldr	r3, [pc, #340]	; (8000928 <MX_GPIO_Init+0x1e0>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	4a54      	ldr	r2, [pc, #336]	; (8000928 <MX_GPIO_Init+0x1e0>)
 80007d8:	f043 0302 	orr.w	r3, r3, #2
 80007dc:	6313      	str	r3, [r2, #48]	; 0x30
 80007de:	4b52      	ldr	r3, [pc, #328]	; (8000928 <MX_GPIO_Init+0x1e0>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e2:	f003 0302 	and.w	r3, r3, #2
 80007e6:	60bb      	str	r3, [r7, #8]
 80007e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007ea:	2300      	movs	r3, #0
 80007ec:	607b      	str	r3, [r7, #4]
 80007ee:	4b4e      	ldr	r3, [pc, #312]	; (8000928 <MX_GPIO_Init+0x1e0>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	4a4d      	ldr	r2, [pc, #308]	; (8000928 <MX_GPIO_Init+0x1e0>)
 80007f4:	f043 0308 	orr.w	r3, r3, #8
 80007f8:	6313      	str	r3, [r2, #48]	; 0x30
 80007fa:	4b4b      	ldr	r3, [pc, #300]	; (8000928 <MX_GPIO_Init+0x1e0>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fe:	f003 0308 	and.w	r3, r3, #8
 8000802:	607b      	str	r3, [r7, #4]
 8000804:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000806:	2200      	movs	r2, #0
 8000808:	2108      	movs	r1, #8
 800080a:	4848      	ldr	r0, [pc, #288]	; (800092c <MX_GPIO_Init+0x1e4>)
 800080c:	f000 fda6 	bl	800135c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000810:	2201      	movs	r2, #1
 8000812:	2101      	movs	r1, #1
 8000814:	4846      	ldr	r0, [pc, #280]	; (8000930 <MX_GPIO_Init+0x1e8>)
 8000816:	f000 fda1 	bl	800135c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 800081a:	2200      	movs	r2, #0
 800081c:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000820:	4844      	ldr	r0, [pc, #272]	; (8000934 <MX_GPIO_Init+0x1ec>)
 8000822:	f000 fd9b 	bl	800135c <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000826:	2308      	movs	r3, #8
 8000828:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800082a:	2301      	movs	r3, #1
 800082c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082e:	2300      	movs	r3, #0
 8000830:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000832:	2300      	movs	r3, #0
 8000834:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000836:	f107 031c 	add.w	r3, r7, #28
 800083a:	4619      	mov	r1, r3
 800083c:	483b      	ldr	r0, [pc, #236]	; (800092c <MX_GPIO_Init+0x1e4>)
 800083e:	f000 fbf3 	bl	8001028 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000842:	2301      	movs	r3, #1
 8000844:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000846:	2301      	movs	r3, #1
 8000848:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084a:	2300      	movs	r3, #0
 800084c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800084e:	2300      	movs	r3, #0
 8000850:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000852:	f107 031c 	add.w	r3, r7, #28
 8000856:	4619      	mov	r1, r3
 8000858:	4835      	ldr	r0, [pc, #212]	; (8000930 <MX_GPIO_Init+0x1e8>)
 800085a:	f000 fbe5 	bl	8001028 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800085e:	2308      	movs	r3, #8
 8000860:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000862:	2302      	movs	r3, #2
 8000864:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000866:	2300      	movs	r3, #0
 8000868:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800086a:	2300      	movs	r3, #0
 800086c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800086e:	2305      	movs	r3, #5
 8000870:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000872:	f107 031c 	add.w	r3, r7, #28
 8000876:	4619      	mov	r1, r3
 8000878:	482d      	ldr	r0, [pc, #180]	; (8000930 <MX_GPIO_Init+0x1e8>)
 800087a:	f000 fbd5 	bl	8001028 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800087e:	2301      	movs	r3, #1
 8000880:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000882:	4b2d      	ldr	r3, [pc, #180]	; (8000938 <MX_GPIO_Init+0x1f0>)
 8000884:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000886:	2300      	movs	r3, #0
 8000888:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800088a:	f107 031c 	add.w	r3, r7, #28
 800088e:	4619      	mov	r1, r3
 8000890:	482a      	ldr	r0, [pc, #168]	; (800093c <MX_GPIO_Init+0x1f4>)
 8000892:	f000 fbc9 	bl	8001028 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000896:	2304      	movs	r3, #4
 8000898:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800089a:	2300      	movs	r3, #0
 800089c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089e:	2300      	movs	r3, #0
 80008a0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80008a2:	f107 031c 	add.w	r3, r7, #28
 80008a6:	4619      	mov	r1, r3
 80008a8:	4825      	ldr	r0, [pc, #148]	; (8000940 <MX_GPIO_Init+0x1f8>)
 80008aa:	f000 fbbd 	bl	8001028 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80008ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008b4:	2302      	movs	r3, #2
 80008b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b8:	2300      	movs	r3, #0
 80008ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008bc:	2300      	movs	r3, #0
 80008be:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008c0:	2305      	movs	r3, #5
 80008c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80008c4:	f107 031c 	add.w	r3, r7, #28
 80008c8:	4619      	mov	r1, r3
 80008ca:	481d      	ldr	r0, [pc, #116]	; (8000940 <MX_GPIO_Init+0x1f8>)
 80008cc:	f000 fbac 	bl	8001028 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin 
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 80008d0:	f24f 0310 	movw	r3, #61456	; 0xf010
 80008d4:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008d6:	2301      	movs	r3, #1
 80008d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008da:	2300      	movs	r3, #0
 80008dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008de:	2300      	movs	r3, #0
 80008e0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008e2:	f107 031c 	add.w	r3, r7, #28
 80008e6:	4619      	mov	r1, r3
 80008e8:	4812      	ldr	r0, [pc, #72]	; (8000934 <MX_GPIO_Init+0x1ec>)
 80008ea:	f000 fb9d 	bl	8001028 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80008ee:	2320      	movs	r3, #32
 80008f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008f2:	2300      	movs	r3, #0
 80008f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f6:	2300      	movs	r3, #0
 80008f8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80008fa:	f107 031c 	add.w	r3, r7, #28
 80008fe:	4619      	mov	r1, r3
 8000900:	480c      	ldr	r0, [pc, #48]	; (8000934 <MX_GPIO_Init+0x1ec>)
 8000902:	f000 fb91 	bl	8001028 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000906:	2302      	movs	r3, #2
 8000908:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800090a:	4b0b      	ldr	r3, [pc, #44]	; (8000938 <MX_GPIO_Init+0x1f0>)
 800090c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090e:	2300      	movs	r3, #0
 8000910:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000912:	f107 031c 	add.w	r3, r7, #28
 8000916:	4619      	mov	r1, r3
 8000918:	4804      	ldr	r0, [pc, #16]	; (800092c <MX_GPIO_Init+0x1e4>)
 800091a:	f000 fb85 	bl	8001028 <HAL_GPIO_Init>

}
 800091e:	bf00      	nop
 8000920:	3730      	adds	r7, #48	; 0x30
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	40023800 	.word	0x40023800
 800092c:	40021000 	.word	0x40021000
 8000930:	40020800 	.word	0x40020800
 8000934:	40020c00 	.word	0x40020c00
 8000938:	10120000 	.word	0x10120000
 800093c:	40020000 	.word	0x40020000
 8000940:	40020400 	.word	0x40020400

08000944 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000944:	b480      	push	{r7}
 8000946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000948:	bf00      	nop
 800094a:	46bd      	mov	sp, r7
 800094c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000950:	4770      	bx	lr
	...

08000954 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b082      	sub	sp, #8
 8000958:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800095a:	2300      	movs	r3, #0
 800095c:	607b      	str	r3, [r7, #4]
 800095e:	4b10      	ldr	r3, [pc, #64]	; (80009a0 <HAL_MspInit+0x4c>)
 8000960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000962:	4a0f      	ldr	r2, [pc, #60]	; (80009a0 <HAL_MspInit+0x4c>)
 8000964:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000968:	6453      	str	r3, [r2, #68]	; 0x44
 800096a:	4b0d      	ldr	r3, [pc, #52]	; (80009a0 <HAL_MspInit+0x4c>)
 800096c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800096e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000972:	607b      	str	r3, [r7, #4]
 8000974:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000976:	2300      	movs	r3, #0
 8000978:	603b      	str	r3, [r7, #0]
 800097a:	4b09      	ldr	r3, [pc, #36]	; (80009a0 <HAL_MspInit+0x4c>)
 800097c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800097e:	4a08      	ldr	r2, [pc, #32]	; (80009a0 <HAL_MspInit+0x4c>)
 8000980:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000984:	6413      	str	r3, [r2, #64]	; 0x40
 8000986:	4b06      	ldr	r3, [pc, #24]	; (80009a0 <HAL_MspInit+0x4c>)
 8000988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800098a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800098e:	603b      	str	r3, [r7, #0]
 8000990:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000992:	2007      	movs	r0, #7
 8000994:	f000 fb06 	bl	8000fa4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000998:	bf00      	nop
 800099a:	3708      	adds	r7, #8
 800099c:	46bd      	mov	sp, r7
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	40023800 	.word	0x40023800

080009a4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b08a      	sub	sp, #40	; 0x28
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ac:	f107 0314 	add.w	r3, r7, #20
 80009b0:	2200      	movs	r2, #0
 80009b2:	601a      	str	r2, [r3, #0]
 80009b4:	605a      	str	r2, [r3, #4]
 80009b6:	609a      	str	r2, [r3, #8]
 80009b8:	60da      	str	r2, [r3, #12]
 80009ba:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	4a19      	ldr	r2, [pc, #100]	; (8000a28 <HAL_I2C_MspInit+0x84>)
 80009c2:	4293      	cmp	r3, r2
 80009c4:	d12c      	bne.n	8000a20 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009c6:	2300      	movs	r3, #0
 80009c8:	613b      	str	r3, [r7, #16]
 80009ca:	4b18      	ldr	r3, [pc, #96]	; (8000a2c <HAL_I2C_MspInit+0x88>)
 80009cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ce:	4a17      	ldr	r2, [pc, #92]	; (8000a2c <HAL_I2C_MspInit+0x88>)
 80009d0:	f043 0302 	orr.w	r3, r3, #2
 80009d4:	6313      	str	r3, [r2, #48]	; 0x30
 80009d6:	4b15      	ldr	r3, [pc, #84]	; (8000a2c <HAL_I2C_MspInit+0x88>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009da:	f003 0302 	and.w	r3, r3, #2
 80009de:	613b      	str	r3, [r7, #16]
 80009e0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80009e2:	f44f 7310 	mov.w	r3, #576	; 0x240
 80009e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009e8:	2312      	movs	r3, #18
 80009ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009ec:	2301      	movs	r3, #1
 80009ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f0:	2300      	movs	r3, #0
 80009f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80009f4:	2304      	movs	r3, #4
 80009f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009f8:	f107 0314 	add.w	r3, r7, #20
 80009fc:	4619      	mov	r1, r3
 80009fe:	480c      	ldr	r0, [pc, #48]	; (8000a30 <HAL_I2C_MspInit+0x8c>)
 8000a00:	f000 fb12 	bl	8001028 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a04:	2300      	movs	r3, #0
 8000a06:	60fb      	str	r3, [r7, #12]
 8000a08:	4b08      	ldr	r3, [pc, #32]	; (8000a2c <HAL_I2C_MspInit+0x88>)
 8000a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a0c:	4a07      	ldr	r2, [pc, #28]	; (8000a2c <HAL_I2C_MspInit+0x88>)
 8000a0e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a12:	6413      	str	r3, [r2, #64]	; 0x40
 8000a14:	4b05      	ldr	r3, [pc, #20]	; (8000a2c <HAL_I2C_MspInit+0x88>)
 8000a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a1c:	60fb      	str	r3, [r7, #12]
 8000a1e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000a20:	bf00      	nop
 8000a22:	3728      	adds	r7, #40	; 0x28
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	40005400 	.word	0x40005400
 8000a2c:	40023800 	.word	0x40023800
 8000a30:	40020400 	.word	0x40020400

08000a34 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b08a      	sub	sp, #40	; 0x28
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a3c:	f107 0314 	add.w	r3, r7, #20
 8000a40:	2200      	movs	r2, #0
 8000a42:	601a      	str	r2, [r3, #0]
 8000a44:	605a      	str	r2, [r3, #4]
 8000a46:	609a      	str	r2, [r3, #8]
 8000a48:	60da      	str	r2, [r3, #12]
 8000a4a:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI3)
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	4a28      	ldr	r2, [pc, #160]	; (8000af4 <HAL_I2S_MspInit+0xc0>)
 8000a52:	4293      	cmp	r3, r2
 8000a54:	d14a      	bne.n	8000aec <HAL_I2S_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000a56:	2300      	movs	r3, #0
 8000a58:	613b      	str	r3, [r7, #16]
 8000a5a:	4b27      	ldr	r3, [pc, #156]	; (8000af8 <HAL_I2S_MspInit+0xc4>)
 8000a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a5e:	4a26      	ldr	r2, [pc, #152]	; (8000af8 <HAL_I2S_MspInit+0xc4>)
 8000a60:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000a64:	6413      	str	r3, [r2, #64]	; 0x40
 8000a66:	4b24      	ldr	r3, [pc, #144]	; (8000af8 <HAL_I2S_MspInit+0xc4>)
 8000a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a6a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000a6e:	613b      	str	r3, [r7, #16]
 8000a70:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a72:	2300      	movs	r3, #0
 8000a74:	60fb      	str	r3, [r7, #12]
 8000a76:	4b20      	ldr	r3, [pc, #128]	; (8000af8 <HAL_I2S_MspInit+0xc4>)
 8000a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7a:	4a1f      	ldr	r2, [pc, #124]	; (8000af8 <HAL_I2S_MspInit+0xc4>)
 8000a7c:	f043 0301 	orr.w	r3, r3, #1
 8000a80:	6313      	str	r3, [r2, #48]	; 0x30
 8000a82:	4b1d      	ldr	r3, [pc, #116]	; (8000af8 <HAL_I2S_MspInit+0xc4>)
 8000a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a86:	f003 0301 	and.w	r3, r3, #1
 8000a8a:	60fb      	str	r3, [r7, #12]
 8000a8c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a8e:	2300      	movs	r3, #0
 8000a90:	60bb      	str	r3, [r7, #8]
 8000a92:	4b19      	ldr	r3, [pc, #100]	; (8000af8 <HAL_I2S_MspInit+0xc4>)
 8000a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a96:	4a18      	ldr	r2, [pc, #96]	; (8000af8 <HAL_I2S_MspInit+0xc4>)
 8000a98:	f043 0304 	orr.w	r3, r3, #4
 8000a9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a9e:	4b16      	ldr	r3, [pc, #88]	; (8000af8 <HAL_I2S_MspInit+0xc4>)
 8000aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa2:	f003 0304 	and.w	r3, r3, #4
 8000aa6:	60bb      	str	r3, [r7, #8]
 8000aa8:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD 
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000aaa:	2310      	movs	r3, #16
 8000aac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aae:	2302      	movs	r3, #2
 8000ab0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000aba:	2306      	movs	r3, #6
 8000abc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000abe:	f107 0314 	add.w	r3, r7, #20
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	480d      	ldr	r0, [pc, #52]	; (8000afc <HAL_I2S_MspInit+0xc8>)
 8000ac6:	f000 faaf 	bl	8001028 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000aca:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000ace:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ad0:	2302      	movs	r3, #2
 8000ad2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000adc:	2306      	movs	r3, #6
 8000ade:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ae0:	f107 0314 	add.w	r3, r7, #20
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	4806      	ldr	r0, [pc, #24]	; (8000b00 <HAL_I2S_MspInit+0xcc>)
 8000ae8:	f000 fa9e 	bl	8001028 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000aec:	bf00      	nop
 8000aee:	3728      	adds	r7, #40	; 0x28
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	40003c00 	.word	0x40003c00
 8000af8:	40023800 	.word	0x40023800
 8000afc:	40020000 	.word	0x40020000
 8000b00:	40020800 	.word	0x40020800

08000b04 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b08a      	sub	sp, #40	; 0x28
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b0c:	f107 0314 	add.w	r3, r7, #20
 8000b10:	2200      	movs	r2, #0
 8000b12:	601a      	str	r2, [r3, #0]
 8000b14:	605a      	str	r2, [r3, #4]
 8000b16:	609a      	str	r2, [r3, #8]
 8000b18:	60da      	str	r2, [r3, #12]
 8000b1a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	4a19      	ldr	r2, [pc, #100]	; (8000b88 <HAL_SPI_MspInit+0x84>)
 8000b22:	4293      	cmp	r3, r2
 8000b24:	d12b      	bne.n	8000b7e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b26:	2300      	movs	r3, #0
 8000b28:	613b      	str	r3, [r7, #16]
 8000b2a:	4b18      	ldr	r3, [pc, #96]	; (8000b8c <HAL_SPI_MspInit+0x88>)
 8000b2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b2e:	4a17      	ldr	r2, [pc, #92]	; (8000b8c <HAL_SPI_MspInit+0x88>)
 8000b30:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000b34:	6453      	str	r3, [r2, #68]	; 0x44
 8000b36:	4b15      	ldr	r3, [pc, #84]	; (8000b8c <HAL_SPI_MspInit+0x88>)
 8000b38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b3a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000b3e:	613b      	str	r3, [r7, #16]
 8000b40:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b42:	2300      	movs	r3, #0
 8000b44:	60fb      	str	r3, [r7, #12]
 8000b46:	4b11      	ldr	r3, [pc, #68]	; (8000b8c <HAL_SPI_MspInit+0x88>)
 8000b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4a:	4a10      	ldr	r2, [pc, #64]	; (8000b8c <HAL_SPI_MspInit+0x88>)
 8000b4c:	f043 0301 	orr.w	r3, r3, #1
 8000b50:	6313      	str	r3, [r2, #48]	; 0x30
 8000b52:	4b0e      	ldr	r3, [pc, #56]	; (8000b8c <HAL_SPI_MspInit+0x88>)
 8000b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b56:	f003 0301 	and.w	r3, r3, #1
 8000b5a:	60fb      	str	r3, [r7, #12]
 8000b5c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000b5e:	23e0      	movs	r3, #224	; 0xe0
 8000b60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b62:	2302      	movs	r3, #2
 8000b64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b66:	2300      	movs	r3, #0
 8000b68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000b6e:	2305      	movs	r3, #5
 8000b70:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b72:	f107 0314 	add.w	r3, r7, #20
 8000b76:	4619      	mov	r1, r3
 8000b78:	4805      	ldr	r0, [pc, #20]	; (8000b90 <HAL_SPI_MspInit+0x8c>)
 8000b7a:	f000 fa55 	bl	8001028 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000b7e:	bf00      	nop
 8000b80:	3728      	adds	r7, #40	; 0x28
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	40013000 	.word	0x40013000
 8000b8c:	40023800 	.word	0x40023800
 8000b90:	40020000 	.word	0x40020000

08000b94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000b98:	bf00      	nop
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba0:	4770      	bx	lr

08000ba2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ba2:	b480      	push	{r7}
 8000ba4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ba6:	e7fe      	b.n	8000ba6 <HardFault_Handler+0x4>

08000ba8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bac:	e7fe      	b.n	8000bac <MemManage_Handler+0x4>

08000bae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bae:	b480      	push	{r7}
 8000bb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bb2:	e7fe      	b.n	8000bb2 <BusFault_Handler+0x4>

08000bb4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bb8:	e7fe      	b.n	8000bb8 <UsageFault_Handler+0x4>

08000bba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bba:	b480      	push	{r7}
 8000bbc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bbe:	bf00      	nop
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc6:	4770      	bx	lr

08000bc8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bcc:	bf00      	nop
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr

08000bd6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bd6:	b480      	push	{r7}
 8000bd8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bda:	bf00      	nop
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be2:	4770      	bx	lr

08000be4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000be8:	f000 f8ca 	bl	8000d80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bec:	bf00      	nop
 8000bee:	bd80      	pop	{r7, pc}

08000bf0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000bf4:	4802      	ldr	r0, [pc, #8]	; (8000c00 <OTG_FS_IRQHandler+0x10>)
 8000bf6:	f000 fe4f 	bl	8001898 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000bfa:	bf00      	nop
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	20000a20 	.word	0x20000a20

08000c04 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b084      	sub	sp, #16
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000c0c:	4b11      	ldr	r3, [pc, #68]	; (8000c54 <_sbrk+0x50>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d102      	bne.n	8000c1a <_sbrk+0x16>
		heap_end = &end;
 8000c14:	4b0f      	ldr	r3, [pc, #60]	; (8000c54 <_sbrk+0x50>)
 8000c16:	4a10      	ldr	r2, [pc, #64]	; (8000c58 <_sbrk+0x54>)
 8000c18:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000c1a:	4b0e      	ldr	r3, [pc, #56]	; (8000c54 <_sbrk+0x50>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000c20:	4b0c      	ldr	r3, [pc, #48]	; (8000c54 <_sbrk+0x50>)
 8000c22:	681a      	ldr	r2, [r3, #0]
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	4413      	add	r3, r2
 8000c28:	466a      	mov	r2, sp
 8000c2a:	4293      	cmp	r3, r2
 8000c2c:	d907      	bls.n	8000c3e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000c2e:	f009 ff87 	bl	800ab40 <__errno>
 8000c32:	4602      	mov	r2, r0
 8000c34:	230c      	movs	r3, #12
 8000c36:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000c38:	f04f 33ff 	mov.w	r3, #4294967295
 8000c3c:	e006      	b.n	8000c4c <_sbrk+0x48>
	}

	heap_end += incr;
 8000c3e:	4b05      	ldr	r3, [pc, #20]	; (8000c54 <_sbrk+0x50>)
 8000c40:	681a      	ldr	r2, [r3, #0]
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	4413      	add	r3, r2
 8000c46:	4a03      	ldr	r2, [pc, #12]	; (8000c54 <_sbrk+0x50>)
 8000c48:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000c4a:	68fb      	ldr	r3, [r7, #12]
}
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	3710      	adds	r7, #16
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	200000ac 	.word	0x200000ac
 8000c58:	20000ce8 	.word	0x20000ce8

08000c5c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c60:	4b08      	ldr	r3, [pc, #32]	; (8000c84 <SystemInit+0x28>)
 8000c62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c66:	4a07      	ldr	r2, [pc, #28]	; (8000c84 <SystemInit+0x28>)
 8000c68:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c6c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000c70:	4b04      	ldr	r3, [pc, #16]	; (8000c84 <SystemInit+0x28>)
 8000c72:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000c76:	609a      	str	r2, [r3, #8]
#endif
}
 8000c78:	bf00      	nop
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr
 8000c82:	bf00      	nop
 8000c84:	e000ed00 	.word	0xe000ed00

08000c88 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000c88:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cc0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000c8c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000c8e:	e003      	b.n	8000c98 <LoopCopyDataInit>

08000c90 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000c90:	4b0c      	ldr	r3, [pc, #48]	; (8000cc4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000c92:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000c94:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000c96:	3104      	adds	r1, #4

08000c98 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000c98:	480b      	ldr	r0, [pc, #44]	; (8000cc8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000c9a:	4b0c      	ldr	r3, [pc, #48]	; (8000ccc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000c9c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000c9e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000ca0:	d3f6      	bcc.n	8000c90 <CopyDataInit>
  ldr  r2, =_sbss
 8000ca2:	4a0b      	ldr	r2, [pc, #44]	; (8000cd0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000ca4:	e002      	b.n	8000cac <LoopFillZerobss>

08000ca6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000ca6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000ca8:	f842 3b04 	str.w	r3, [r2], #4

08000cac <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000cac:	4b09      	ldr	r3, [pc, #36]	; (8000cd4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000cae:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000cb0:	d3f9      	bcc.n	8000ca6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000cb2:	f7ff ffd3 	bl	8000c5c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cb6:	f009 ff49 	bl	800ab4c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cba:	f7ff fc0d 	bl	80004d8 <main>
  bx  lr    
 8000cbe:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000cc0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000cc4:	0800aedc 	.word	0x0800aedc
  ldr  r0, =_sdata
 8000cc8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000ccc:	20000090 	.word	0x20000090
  ldr  r2, =_sbss
 8000cd0:	20000090 	.word	0x20000090
  ldr  r3, = _ebss
 8000cd4:	20000ce8 	.word	0x20000ce8

08000cd8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cd8:	e7fe      	b.n	8000cd8 <ADC_IRQHandler>
	...

08000cdc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ce0:	4b0e      	ldr	r3, [pc, #56]	; (8000d1c <HAL_Init+0x40>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	4a0d      	ldr	r2, [pc, #52]	; (8000d1c <HAL_Init+0x40>)
 8000ce6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000cec:	4b0b      	ldr	r3, [pc, #44]	; (8000d1c <HAL_Init+0x40>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	4a0a      	ldr	r2, [pc, #40]	; (8000d1c <HAL_Init+0x40>)
 8000cf2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cf6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cf8:	4b08      	ldr	r3, [pc, #32]	; (8000d1c <HAL_Init+0x40>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	4a07      	ldr	r2, [pc, #28]	; (8000d1c <HAL_Init+0x40>)
 8000cfe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d02:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d04:	2003      	movs	r0, #3
 8000d06:	f000 f94d 	bl	8000fa4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d0a:	2000      	movs	r0, #0
 8000d0c:	f000 f808 	bl	8000d20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d10:	f7ff fe20 	bl	8000954 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d14:	2300      	movs	r3, #0
}
 8000d16:	4618      	mov	r0, r3
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	40023c00 	.word	0x40023c00

08000d20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b082      	sub	sp, #8
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d28:	4b12      	ldr	r3, [pc, #72]	; (8000d74 <HAL_InitTick+0x54>)
 8000d2a:	681a      	ldr	r2, [r3, #0]
 8000d2c:	4b12      	ldr	r3, [pc, #72]	; (8000d78 <HAL_InitTick+0x58>)
 8000d2e:	781b      	ldrb	r3, [r3, #0]
 8000d30:	4619      	mov	r1, r3
 8000d32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d36:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f000 f965 	bl	800100e <HAL_SYSTICK_Config>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d001      	beq.n	8000d4e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	e00e      	b.n	8000d6c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	2b0f      	cmp	r3, #15
 8000d52:	d80a      	bhi.n	8000d6a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d54:	2200      	movs	r2, #0
 8000d56:	6879      	ldr	r1, [r7, #4]
 8000d58:	f04f 30ff 	mov.w	r0, #4294967295
 8000d5c:	f000 f92d 	bl	8000fba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d60:	4a06      	ldr	r2, [pc, #24]	; (8000d7c <HAL_InitTick+0x5c>)
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d66:	2300      	movs	r3, #0
 8000d68:	e000      	b.n	8000d6c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d6a:	2301      	movs	r3, #1
}
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	3708      	adds	r7, #8
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	20000000 	.word	0x20000000
 8000d78:	20000008 	.word	0x20000008
 8000d7c:	20000004 	.word	0x20000004

08000d80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d84:	4b06      	ldr	r3, [pc, #24]	; (8000da0 <HAL_IncTick+0x20>)
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	461a      	mov	r2, r3
 8000d8a:	4b06      	ldr	r3, [pc, #24]	; (8000da4 <HAL_IncTick+0x24>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	4413      	add	r3, r2
 8000d90:	4a04      	ldr	r2, [pc, #16]	; (8000da4 <HAL_IncTick+0x24>)
 8000d92:	6013      	str	r3, [r2, #0]
}
 8000d94:	bf00      	nop
 8000d96:	46bd      	mov	sp, r7
 8000d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9c:	4770      	bx	lr
 8000d9e:	bf00      	nop
 8000da0:	20000008 	.word	0x20000008
 8000da4:	200001e8 	.word	0x200001e8

08000da8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
  return uwTick;
 8000dac:	4b03      	ldr	r3, [pc, #12]	; (8000dbc <HAL_GetTick+0x14>)
 8000dae:	681b      	ldr	r3, [r3, #0]
}
 8000db0:	4618      	mov	r0, r3
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr
 8000dba:	bf00      	nop
 8000dbc:	200001e8 	.word	0x200001e8

08000dc0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b084      	sub	sp, #16
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000dc8:	f7ff ffee 	bl	8000da8 <HAL_GetTick>
 8000dcc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000dd8:	d005      	beq.n	8000de6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000dda:	4b09      	ldr	r3, [pc, #36]	; (8000e00 <HAL_Delay+0x40>)
 8000ddc:	781b      	ldrb	r3, [r3, #0]
 8000dde:	461a      	mov	r2, r3
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	4413      	add	r3, r2
 8000de4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000de6:	bf00      	nop
 8000de8:	f7ff ffde 	bl	8000da8 <HAL_GetTick>
 8000dec:	4602      	mov	r2, r0
 8000dee:	68bb      	ldr	r3, [r7, #8]
 8000df0:	1ad3      	subs	r3, r2, r3
 8000df2:	68fa      	ldr	r2, [r7, #12]
 8000df4:	429a      	cmp	r2, r3
 8000df6:	d8f7      	bhi.n	8000de8 <HAL_Delay+0x28>
  {
  }
}
 8000df8:	bf00      	nop
 8000dfa:	3710      	adds	r7, #16
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	20000008 	.word	0x20000008

08000e04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b085      	sub	sp, #20
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	f003 0307 	and.w	r3, r3, #7
 8000e12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e14:	4b0c      	ldr	r3, [pc, #48]	; (8000e48 <__NVIC_SetPriorityGrouping+0x44>)
 8000e16:	68db      	ldr	r3, [r3, #12]
 8000e18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e1a:	68ba      	ldr	r2, [r7, #8]
 8000e1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e20:	4013      	ands	r3, r2
 8000e22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e28:	68bb      	ldr	r3, [r7, #8]
 8000e2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e36:	4a04      	ldr	r2, [pc, #16]	; (8000e48 <__NVIC_SetPriorityGrouping+0x44>)
 8000e38:	68bb      	ldr	r3, [r7, #8]
 8000e3a:	60d3      	str	r3, [r2, #12]
}
 8000e3c:	bf00      	nop
 8000e3e:	3714      	adds	r7, #20
 8000e40:	46bd      	mov	sp, r7
 8000e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e46:	4770      	bx	lr
 8000e48:	e000ed00 	.word	0xe000ed00

08000e4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e50:	4b04      	ldr	r3, [pc, #16]	; (8000e64 <__NVIC_GetPriorityGrouping+0x18>)
 8000e52:	68db      	ldr	r3, [r3, #12]
 8000e54:	0a1b      	lsrs	r3, r3, #8
 8000e56:	f003 0307 	and.w	r3, r3, #7
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e62:	4770      	bx	lr
 8000e64:	e000ed00 	.word	0xe000ed00

08000e68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b083      	sub	sp, #12
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	4603      	mov	r3, r0
 8000e70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	db0b      	blt.n	8000e92 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e7a:	79fb      	ldrb	r3, [r7, #7]
 8000e7c:	f003 021f 	and.w	r2, r3, #31
 8000e80:	4907      	ldr	r1, [pc, #28]	; (8000ea0 <__NVIC_EnableIRQ+0x38>)
 8000e82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e86:	095b      	lsrs	r3, r3, #5
 8000e88:	2001      	movs	r0, #1
 8000e8a:	fa00 f202 	lsl.w	r2, r0, r2
 8000e8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e92:	bf00      	nop
 8000e94:	370c      	adds	r7, #12
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop
 8000ea0:	e000e100 	.word	0xe000e100

08000ea4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b083      	sub	sp, #12
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	4603      	mov	r3, r0
 8000eac:	6039      	str	r1, [r7, #0]
 8000eae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	db0a      	blt.n	8000ece <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	b2da      	uxtb	r2, r3
 8000ebc:	490c      	ldr	r1, [pc, #48]	; (8000ef0 <__NVIC_SetPriority+0x4c>)
 8000ebe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ec2:	0112      	lsls	r2, r2, #4
 8000ec4:	b2d2      	uxtb	r2, r2
 8000ec6:	440b      	add	r3, r1
 8000ec8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ecc:	e00a      	b.n	8000ee4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	b2da      	uxtb	r2, r3
 8000ed2:	4908      	ldr	r1, [pc, #32]	; (8000ef4 <__NVIC_SetPriority+0x50>)
 8000ed4:	79fb      	ldrb	r3, [r7, #7]
 8000ed6:	f003 030f 	and.w	r3, r3, #15
 8000eda:	3b04      	subs	r3, #4
 8000edc:	0112      	lsls	r2, r2, #4
 8000ede:	b2d2      	uxtb	r2, r2
 8000ee0:	440b      	add	r3, r1
 8000ee2:	761a      	strb	r2, [r3, #24]
}
 8000ee4:	bf00      	nop
 8000ee6:	370c      	adds	r7, #12
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eee:	4770      	bx	lr
 8000ef0:	e000e100 	.word	0xe000e100
 8000ef4:	e000ed00 	.word	0xe000ed00

08000ef8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b089      	sub	sp, #36	; 0x24
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	60f8      	str	r0, [r7, #12]
 8000f00:	60b9      	str	r1, [r7, #8]
 8000f02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	f003 0307 	and.w	r3, r3, #7
 8000f0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f0c:	69fb      	ldr	r3, [r7, #28]
 8000f0e:	f1c3 0307 	rsb	r3, r3, #7
 8000f12:	2b04      	cmp	r3, #4
 8000f14:	bf28      	it	cs
 8000f16:	2304      	movcs	r3, #4
 8000f18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f1a:	69fb      	ldr	r3, [r7, #28]
 8000f1c:	3304      	adds	r3, #4
 8000f1e:	2b06      	cmp	r3, #6
 8000f20:	d902      	bls.n	8000f28 <NVIC_EncodePriority+0x30>
 8000f22:	69fb      	ldr	r3, [r7, #28]
 8000f24:	3b03      	subs	r3, #3
 8000f26:	e000      	b.n	8000f2a <NVIC_EncodePriority+0x32>
 8000f28:	2300      	movs	r3, #0
 8000f2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f2c:	f04f 32ff 	mov.w	r2, #4294967295
 8000f30:	69bb      	ldr	r3, [r7, #24]
 8000f32:	fa02 f303 	lsl.w	r3, r2, r3
 8000f36:	43da      	mvns	r2, r3
 8000f38:	68bb      	ldr	r3, [r7, #8]
 8000f3a:	401a      	ands	r2, r3
 8000f3c:	697b      	ldr	r3, [r7, #20]
 8000f3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f40:	f04f 31ff 	mov.w	r1, #4294967295
 8000f44:	697b      	ldr	r3, [r7, #20]
 8000f46:	fa01 f303 	lsl.w	r3, r1, r3
 8000f4a:	43d9      	mvns	r1, r3
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f50:	4313      	orrs	r3, r2
         );
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	3724      	adds	r7, #36	; 0x24
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr
	...

08000f60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	3b01      	subs	r3, #1
 8000f6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f70:	d301      	bcc.n	8000f76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f72:	2301      	movs	r3, #1
 8000f74:	e00f      	b.n	8000f96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f76:	4a0a      	ldr	r2, [pc, #40]	; (8000fa0 <SysTick_Config+0x40>)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	3b01      	subs	r3, #1
 8000f7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f7e:	210f      	movs	r1, #15
 8000f80:	f04f 30ff 	mov.w	r0, #4294967295
 8000f84:	f7ff ff8e 	bl	8000ea4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f88:	4b05      	ldr	r3, [pc, #20]	; (8000fa0 <SysTick_Config+0x40>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f8e:	4b04      	ldr	r3, [pc, #16]	; (8000fa0 <SysTick_Config+0x40>)
 8000f90:	2207      	movs	r2, #7
 8000f92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f94:	2300      	movs	r3, #0
}
 8000f96:	4618      	mov	r0, r3
 8000f98:	3708      	adds	r7, #8
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	e000e010 	.word	0xe000e010

08000fa4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fac:	6878      	ldr	r0, [r7, #4]
 8000fae:	f7ff ff29 	bl	8000e04 <__NVIC_SetPriorityGrouping>
}
 8000fb2:	bf00      	nop
 8000fb4:	3708      	adds	r7, #8
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}

08000fba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fba:	b580      	push	{r7, lr}
 8000fbc:	b086      	sub	sp, #24
 8000fbe:	af00      	add	r7, sp, #0
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	60b9      	str	r1, [r7, #8]
 8000fc4:	607a      	str	r2, [r7, #4]
 8000fc6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fcc:	f7ff ff3e 	bl	8000e4c <__NVIC_GetPriorityGrouping>
 8000fd0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fd2:	687a      	ldr	r2, [r7, #4]
 8000fd4:	68b9      	ldr	r1, [r7, #8]
 8000fd6:	6978      	ldr	r0, [r7, #20]
 8000fd8:	f7ff ff8e 	bl	8000ef8 <NVIC_EncodePriority>
 8000fdc:	4602      	mov	r2, r0
 8000fde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fe2:	4611      	mov	r1, r2
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f7ff ff5d 	bl	8000ea4 <__NVIC_SetPriority>
}
 8000fea:	bf00      	nop
 8000fec:	3718      	adds	r7, #24
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}

08000ff2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ff2:	b580      	push	{r7, lr}
 8000ff4:	b082      	sub	sp, #8
 8000ff6:	af00      	add	r7, sp, #0
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ffc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001000:	4618      	mov	r0, r3
 8001002:	f7ff ff31 	bl	8000e68 <__NVIC_EnableIRQ>
}
 8001006:	bf00      	nop
 8001008:	3708      	adds	r7, #8
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}

0800100e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800100e:	b580      	push	{r7, lr}
 8001010:	b082      	sub	sp, #8
 8001012:	af00      	add	r7, sp, #0
 8001014:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001016:	6878      	ldr	r0, [r7, #4]
 8001018:	f7ff ffa2 	bl	8000f60 <SysTick_Config>
 800101c:	4603      	mov	r3, r0
}
 800101e:	4618      	mov	r0, r3
 8001020:	3708      	adds	r7, #8
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
	...

08001028 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001028:	b480      	push	{r7}
 800102a:	b089      	sub	sp, #36	; 0x24
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
 8001030:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001032:	2300      	movs	r3, #0
 8001034:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001036:	2300      	movs	r3, #0
 8001038:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800103a:	2300      	movs	r3, #0
 800103c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800103e:	2300      	movs	r3, #0
 8001040:	61fb      	str	r3, [r7, #28]
 8001042:	e16b      	b.n	800131c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001044:	2201      	movs	r2, #1
 8001046:	69fb      	ldr	r3, [r7, #28]
 8001048:	fa02 f303 	lsl.w	r3, r2, r3
 800104c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	697a      	ldr	r2, [r7, #20]
 8001054:	4013      	ands	r3, r2
 8001056:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001058:	693a      	ldr	r2, [r7, #16]
 800105a:	697b      	ldr	r3, [r7, #20]
 800105c:	429a      	cmp	r2, r3
 800105e:	f040 815a 	bne.w	8001316 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	2b01      	cmp	r3, #1
 8001068:	d00b      	beq.n	8001082 <HAL_GPIO_Init+0x5a>
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	2b02      	cmp	r3, #2
 8001070:	d007      	beq.n	8001082 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001076:	2b11      	cmp	r3, #17
 8001078:	d003      	beq.n	8001082 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	685b      	ldr	r3, [r3, #4]
 800107e:	2b12      	cmp	r3, #18
 8001080:	d130      	bne.n	80010e4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	689b      	ldr	r3, [r3, #8]
 8001086:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001088:	69fb      	ldr	r3, [r7, #28]
 800108a:	005b      	lsls	r3, r3, #1
 800108c:	2203      	movs	r2, #3
 800108e:	fa02 f303 	lsl.w	r3, r2, r3
 8001092:	43db      	mvns	r3, r3
 8001094:	69ba      	ldr	r2, [r7, #24]
 8001096:	4013      	ands	r3, r2
 8001098:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	68da      	ldr	r2, [r3, #12]
 800109e:	69fb      	ldr	r3, [r7, #28]
 80010a0:	005b      	lsls	r3, r3, #1
 80010a2:	fa02 f303 	lsl.w	r3, r2, r3
 80010a6:	69ba      	ldr	r2, [r7, #24]
 80010a8:	4313      	orrs	r3, r2
 80010aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	69ba      	ldr	r2, [r7, #24]
 80010b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010b8:	2201      	movs	r2, #1
 80010ba:	69fb      	ldr	r3, [r7, #28]
 80010bc:	fa02 f303 	lsl.w	r3, r2, r3
 80010c0:	43db      	mvns	r3, r3
 80010c2:	69ba      	ldr	r2, [r7, #24]
 80010c4:	4013      	ands	r3, r2
 80010c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	091b      	lsrs	r3, r3, #4
 80010ce:	f003 0201 	and.w	r2, r3, #1
 80010d2:	69fb      	ldr	r3, [r7, #28]
 80010d4:	fa02 f303 	lsl.w	r3, r2, r3
 80010d8:	69ba      	ldr	r2, [r7, #24]
 80010da:	4313      	orrs	r3, r2
 80010dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	69ba      	ldr	r2, [r7, #24]
 80010e2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	68db      	ldr	r3, [r3, #12]
 80010e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80010ea:	69fb      	ldr	r3, [r7, #28]
 80010ec:	005b      	lsls	r3, r3, #1
 80010ee:	2203      	movs	r2, #3
 80010f0:	fa02 f303 	lsl.w	r3, r2, r3
 80010f4:	43db      	mvns	r3, r3
 80010f6:	69ba      	ldr	r2, [r7, #24]
 80010f8:	4013      	ands	r3, r2
 80010fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	689a      	ldr	r2, [r3, #8]
 8001100:	69fb      	ldr	r3, [r7, #28]
 8001102:	005b      	lsls	r3, r3, #1
 8001104:	fa02 f303 	lsl.w	r3, r2, r3
 8001108:	69ba      	ldr	r2, [r7, #24]
 800110a:	4313      	orrs	r3, r2
 800110c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	69ba      	ldr	r2, [r7, #24]
 8001112:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	2b02      	cmp	r3, #2
 800111a:	d003      	beq.n	8001124 <HAL_GPIO_Init+0xfc>
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	2b12      	cmp	r3, #18
 8001122:	d123      	bne.n	800116c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001124:	69fb      	ldr	r3, [r7, #28]
 8001126:	08da      	lsrs	r2, r3, #3
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	3208      	adds	r2, #8
 800112c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001130:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001132:	69fb      	ldr	r3, [r7, #28]
 8001134:	f003 0307 	and.w	r3, r3, #7
 8001138:	009b      	lsls	r3, r3, #2
 800113a:	220f      	movs	r2, #15
 800113c:	fa02 f303 	lsl.w	r3, r2, r3
 8001140:	43db      	mvns	r3, r3
 8001142:	69ba      	ldr	r2, [r7, #24]
 8001144:	4013      	ands	r3, r2
 8001146:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	691a      	ldr	r2, [r3, #16]
 800114c:	69fb      	ldr	r3, [r7, #28]
 800114e:	f003 0307 	and.w	r3, r3, #7
 8001152:	009b      	lsls	r3, r3, #2
 8001154:	fa02 f303 	lsl.w	r3, r2, r3
 8001158:	69ba      	ldr	r2, [r7, #24]
 800115a:	4313      	orrs	r3, r2
 800115c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800115e:	69fb      	ldr	r3, [r7, #28]
 8001160:	08da      	lsrs	r2, r3, #3
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	3208      	adds	r2, #8
 8001166:	69b9      	ldr	r1, [r7, #24]
 8001168:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001172:	69fb      	ldr	r3, [r7, #28]
 8001174:	005b      	lsls	r3, r3, #1
 8001176:	2203      	movs	r2, #3
 8001178:	fa02 f303 	lsl.w	r3, r2, r3
 800117c:	43db      	mvns	r3, r3
 800117e:	69ba      	ldr	r2, [r7, #24]
 8001180:	4013      	ands	r3, r2
 8001182:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	f003 0203 	and.w	r2, r3, #3
 800118c:	69fb      	ldr	r3, [r7, #28]
 800118e:	005b      	lsls	r3, r3, #1
 8001190:	fa02 f303 	lsl.w	r3, r2, r3
 8001194:	69ba      	ldr	r2, [r7, #24]
 8001196:	4313      	orrs	r3, r2
 8001198:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	69ba      	ldr	r2, [r7, #24]
 800119e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	f000 80b4 	beq.w	8001316 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011ae:	2300      	movs	r3, #0
 80011b0:	60fb      	str	r3, [r7, #12]
 80011b2:	4b5f      	ldr	r3, [pc, #380]	; (8001330 <HAL_GPIO_Init+0x308>)
 80011b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011b6:	4a5e      	ldr	r2, [pc, #376]	; (8001330 <HAL_GPIO_Init+0x308>)
 80011b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011bc:	6453      	str	r3, [r2, #68]	; 0x44
 80011be:	4b5c      	ldr	r3, [pc, #368]	; (8001330 <HAL_GPIO_Init+0x308>)
 80011c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011c6:	60fb      	str	r3, [r7, #12]
 80011c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80011ca:	4a5a      	ldr	r2, [pc, #360]	; (8001334 <HAL_GPIO_Init+0x30c>)
 80011cc:	69fb      	ldr	r3, [r7, #28]
 80011ce:	089b      	lsrs	r3, r3, #2
 80011d0:	3302      	adds	r3, #2
 80011d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80011d8:	69fb      	ldr	r3, [r7, #28]
 80011da:	f003 0303 	and.w	r3, r3, #3
 80011de:	009b      	lsls	r3, r3, #2
 80011e0:	220f      	movs	r2, #15
 80011e2:	fa02 f303 	lsl.w	r3, r2, r3
 80011e6:	43db      	mvns	r3, r3
 80011e8:	69ba      	ldr	r2, [r7, #24]
 80011ea:	4013      	ands	r3, r2
 80011ec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	4a51      	ldr	r2, [pc, #324]	; (8001338 <HAL_GPIO_Init+0x310>)
 80011f2:	4293      	cmp	r3, r2
 80011f4:	d02b      	beq.n	800124e <HAL_GPIO_Init+0x226>
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	4a50      	ldr	r2, [pc, #320]	; (800133c <HAL_GPIO_Init+0x314>)
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d025      	beq.n	800124a <HAL_GPIO_Init+0x222>
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	4a4f      	ldr	r2, [pc, #316]	; (8001340 <HAL_GPIO_Init+0x318>)
 8001202:	4293      	cmp	r3, r2
 8001204:	d01f      	beq.n	8001246 <HAL_GPIO_Init+0x21e>
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	4a4e      	ldr	r2, [pc, #312]	; (8001344 <HAL_GPIO_Init+0x31c>)
 800120a:	4293      	cmp	r3, r2
 800120c:	d019      	beq.n	8001242 <HAL_GPIO_Init+0x21a>
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	4a4d      	ldr	r2, [pc, #308]	; (8001348 <HAL_GPIO_Init+0x320>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d013      	beq.n	800123e <HAL_GPIO_Init+0x216>
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	4a4c      	ldr	r2, [pc, #304]	; (800134c <HAL_GPIO_Init+0x324>)
 800121a:	4293      	cmp	r3, r2
 800121c:	d00d      	beq.n	800123a <HAL_GPIO_Init+0x212>
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	4a4b      	ldr	r2, [pc, #300]	; (8001350 <HAL_GPIO_Init+0x328>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d007      	beq.n	8001236 <HAL_GPIO_Init+0x20e>
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	4a4a      	ldr	r2, [pc, #296]	; (8001354 <HAL_GPIO_Init+0x32c>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d101      	bne.n	8001232 <HAL_GPIO_Init+0x20a>
 800122e:	2307      	movs	r3, #7
 8001230:	e00e      	b.n	8001250 <HAL_GPIO_Init+0x228>
 8001232:	2308      	movs	r3, #8
 8001234:	e00c      	b.n	8001250 <HAL_GPIO_Init+0x228>
 8001236:	2306      	movs	r3, #6
 8001238:	e00a      	b.n	8001250 <HAL_GPIO_Init+0x228>
 800123a:	2305      	movs	r3, #5
 800123c:	e008      	b.n	8001250 <HAL_GPIO_Init+0x228>
 800123e:	2304      	movs	r3, #4
 8001240:	e006      	b.n	8001250 <HAL_GPIO_Init+0x228>
 8001242:	2303      	movs	r3, #3
 8001244:	e004      	b.n	8001250 <HAL_GPIO_Init+0x228>
 8001246:	2302      	movs	r3, #2
 8001248:	e002      	b.n	8001250 <HAL_GPIO_Init+0x228>
 800124a:	2301      	movs	r3, #1
 800124c:	e000      	b.n	8001250 <HAL_GPIO_Init+0x228>
 800124e:	2300      	movs	r3, #0
 8001250:	69fa      	ldr	r2, [r7, #28]
 8001252:	f002 0203 	and.w	r2, r2, #3
 8001256:	0092      	lsls	r2, r2, #2
 8001258:	4093      	lsls	r3, r2
 800125a:	69ba      	ldr	r2, [r7, #24]
 800125c:	4313      	orrs	r3, r2
 800125e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001260:	4934      	ldr	r1, [pc, #208]	; (8001334 <HAL_GPIO_Init+0x30c>)
 8001262:	69fb      	ldr	r3, [r7, #28]
 8001264:	089b      	lsrs	r3, r3, #2
 8001266:	3302      	adds	r3, #2
 8001268:	69ba      	ldr	r2, [r7, #24]
 800126a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800126e:	4b3a      	ldr	r3, [pc, #232]	; (8001358 <HAL_GPIO_Init+0x330>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001274:	693b      	ldr	r3, [r7, #16]
 8001276:	43db      	mvns	r3, r3
 8001278:	69ba      	ldr	r2, [r7, #24]
 800127a:	4013      	ands	r3, r2
 800127c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	685b      	ldr	r3, [r3, #4]
 8001282:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001286:	2b00      	cmp	r3, #0
 8001288:	d003      	beq.n	8001292 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800128a:	69ba      	ldr	r2, [r7, #24]
 800128c:	693b      	ldr	r3, [r7, #16]
 800128e:	4313      	orrs	r3, r2
 8001290:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001292:	4a31      	ldr	r2, [pc, #196]	; (8001358 <HAL_GPIO_Init+0x330>)
 8001294:	69bb      	ldr	r3, [r7, #24]
 8001296:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001298:	4b2f      	ldr	r3, [pc, #188]	; (8001358 <HAL_GPIO_Init+0x330>)
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800129e:	693b      	ldr	r3, [r7, #16]
 80012a0:	43db      	mvns	r3, r3
 80012a2:	69ba      	ldr	r2, [r7, #24]
 80012a4:	4013      	ands	r3, r2
 80012a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d003      	beq.n	80012bc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80012b4:	69ba      	ldr	r2, [r7, #24]
 80012b6:	693b      	ldr	r3, [r7, #16]
 80012b8:	4313      	orrs	r3, r2
 80012ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80012bc:	4a26      	ldr	r2, [pc, #152]	; (8001358 <HAL_GPIO_Init+0x330>)
 80012be:	69bb      	ldr	r3, [r7, #24]
 80012c0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012c2:	4b25      	ldr	r3, [pc, #148]	; (8001358 <HAL_GPIO_Init+0x330>)
 80012c4:	689b      	ldr	r3, [r3, #8]
 80012c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012c8:	693b      	ldr	r3, [r7, #16]
 80012ca:	43db      	mvns	r3, r3
 80012cc:	69ba      	ldr	r2, [r7, #24]
 80012ce:	4013      	ands	r3, r2
 80012d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d003      	beq.n	80012e6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80012de:	69ba      	ldr	r2, [r7, #24]
 80012e0:	693b      	ldr	r3, [r7, #16]
 80012e2:	4313      	orrs	r3, r2
 80012e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012e6:	4a1c      	ldr	r2, [pc, #112]	; (8001358 <HAL_GPIO_Init+0x330>)
 80012e8:	69bb      	ldr	r3, [r7, #24]
 80012ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012ec:	4b1a      	ldr	r3, [pc, #104]	; (8001358 <HAL_GPIO_Init+0x330>)
 80012ee:	68db      	ldr	r3, [r3, #12]
 80012f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012f2:	693b      	ldr	r3, [r7, #16]
 80012f4:	43db      	mvns	r3, r3
 80012f6:	69ba      	ldr	r2, [r7, #24]
 80012f8:	4013      	ands	r3, r2
 80012fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001304:	2b00      	cmp	r3, #0
 8001306:	d003      	beq.n	8001310 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001308:	69ba      	ldr	r2, [r7, #24]
 800130a:	693b      	ldr	r3, [r7, #16]
 800130c:	4313      	orrs	r3, r2
 800130e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001310:	4a11      	ldr	r2, [pc, #68]	; (8001358 <HAL_GPIO_Init+0x330>)
 8001312:	69bb      	ldr	r3, [r7, #24]
 8001314:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001316:	69fb      	ldr	r3, [r7, #28]
 8001318:	3301      	adds	r3, #1
 800131a:	61fb      	str	r3, [r7, #28]
 800131c:	69fb      	ldr	r3, [r7, #28]
 800131e:	2b0f      	cmp	r3, #15
 8001320:	f67f ae90 	bls.w	8001044 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001324:	bf00      	nop
 8001326:	3724      	adds	r7, #36	; 0x24
 8001328:	46bd      	mov	sp, r7
 800132a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132e:	4770      	bx	lr
 8001330:	40023800 	.word	0x40023800
 8001334:	40013800 	.word	0x40013800
 8001338:	40020000 	.word	0x40020000
 800133c:	40020400 	.word	0x40020400
 8001340:	40020800 	.word	0x40020800
 8001344:	40020c00 	.word	0x40020c00
 8001348:	40021000 	.word	0x40021000
 800134c:	40021400 	.word	0x40021400
 8001350:	40021800 	.word	0x40021800
 8001354:	40021c00 	.word	0x40021c00
 8001358:	40013c00 	.word	0x40013c00

0800135c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800135c:	b480      	push	{r7}
 800135e:	b083      	sub	sp, #12
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
 8001364:	460b      	mov	r3, r1
 8001366:	807b      	strh	r3, [r7, #2]
 8001368:	4613      	mov	r3, r2
 800136a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800136c:	787b      	ldrb	r3, [r7, #1]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d003      	beq.n	800137a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001372:	887a      	ldrh	r2, [r7, #2]
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001378:	e003      	b.n	8001382 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800137a:	887b      	ldrh	r3, [r7, #2]
 800137c:	041a      	lsls	r2, r3, #16
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	619a      	str	r2, [r3, #24]
}
 8001382:	bf00      	nop
 8001384:	370c      	adds	r7, #12
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr

0800138e <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800138e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001390:	b08f      	sub	sp, #60	; 0x3c
 8001392:	af0a      	add	r7, sp, #40	; 0x28
 8001394:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d101      	bne.n	80013a0 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 800139c:	2301      	movs	r3, #1
 800139e:	e054      	b.n	800144a <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 80013ac:	b2db      	uxtb	r3, r3
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d106      	bne.n	80013c0 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	2200      	movs	r2, #0
 80013b6:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80013ba:	6878      	ldr	r0, [r7, #4]
 80013bc:	f009 f8e2 	bl	800a584 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	2203      	movs	r2, #3
 80013c4:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d102      	bne.n	80013da <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	2200      	movs	r2, #0
 80013d8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4618      	mov	r0, r3
 80013e0:	f003 f876 	bl	80044d0 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	603b      	str	r3, [r7, #0]
 80013ea:	687e      	ldr	r6, [r7, #4]
 80013ec:	466d      	mov	r5, sp
 80013ee:	f106 0410 	add.w	r4, r6, #16
 80013f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013fa:	e894 0003 	ldmia.w	r4, {r0, r1}
 80013fe:	e885 0003 	stmia.w	r5, {r0, r1}
 8001402:	1d33      	adds	r3, r6, #4
 8001404:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001406:	6838      	ldr	r0, [r7, #0]
 8001408:	f002 fff0 	bl	80043ec <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	2101      	movs	r1, #1
 8001412:	4618      	mov	r0, r3
 8001414:	f003 f86d 	bl	80044f2 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	603b      	str	r3, [r7, #0]
 800141e:	687e      	ldr	r6, [r7, #4]
 8001420:	466d      	mov	r5, sp
 8001422:	f106 0410 	add.w	r4, r6, #16
 8001426:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001428:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800142a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800142c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800142e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001432:	e885 0003 	stmia.w	r5, {r0, r1}
 8001436:	1d33      	adds	r3, r6, #4
 8001438:	cb0e      	ldmia	r3, {r1, r2, r3}
 800143a:	6838      	ldr	r0, [r7, #0]
 800143c:	f003 f980 	bl	8004740 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2201      	movs	r2, #1
 8001444:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 8001448:	2300      	movs	r3, #0
}
 800144a:	4618      	mov	r0, r3
 800144c:	3714      	adds	r7, #20
 800144e:	46bd      	mov	sp, r7
 8001450:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001452 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001452:	b590      	push	{r4, r7, lr}
 8001454:	b089      	sub	sp, #36	; 0x24
 8001456:	af04      	add	r7, sp, #16
 8001458:	6078      	str	r0, [r7, #4]
 800145a:	4608      	mov	r0, r1
 800145c:	4611      	mov	r1, r2
 800145e:	461a      	mov	r2, r3
 8001460:	4603      	mov	r3, r0
 8001462:	70fb      	strb	r3, [r7, #3]
 8001464:	460b      	mov	r3, r1
 8001466:	70bb      	strb	r3, [r7, #2]
 8001468:	4613      	mov	r3, r2
 800146a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001472:	2b01      	cmp	r3, #1
 8001474:	d101      	bne.n	800147a <HAL_HCD_HC_Init+0x28>
 8001476:	2302      	movs	r3, #2
 8001478:	e07f      	b.n	800157a <HAL_HCD_HC_Init+0x128>
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	2201      	movs	r2, #1
 800147e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 8001482:	78fa      	ldrb	r2, [r7, #3]
 8001484:	6879      	ldr	r1, [r7, #4]
 8001486:	4613      	mov	r3, r2
 8001488:	009b      	lsls	r3, r3, #2
 800148a:	4413      	add	r3, r2
 800148c:	00db      	lsls	r3, r3, #3
 800148e:	440b      	add	r3, r1
 8001490:	333d      	adds	r3, #61	; 0x3d
 8001492:	2200      	movs	r2, #0
 8001494:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001496:	78fa      	ldrb	r2, [r7, #3]
 8001498:	6879      	ldr	r1, [r7, #4]
 800149a:	4613      	mov	r3, r2
 800149c:	009b      	lsls	r3, r3, #2
 800149e:	4413      	add	r3, r2
 80014a0:	00db      	lsls	r3, r3, #3
 80014a2:	440b      	add	r3, r1
 80014a4:	3338      	adds	r3, #56	; 0x38
 80014a6:	787a      	ldrb	r2, [r7, #1]
 80014a8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80014aa:	78fa      	ldrb	r2, [r7, #3]
 80014ac:	6879      	ldr	r1, [r7, #4]
 80014ae:	4613      	mov	r3, r2
 80014b0:	009b      	lsls	r3, r3, #2
 80014b2:	4413      	add	r3, r2
 80014b4:	00db      	lsls	r3, r3, #3
 80014b6:	440b      	add	r3, r1
 80014b8:	3340      	adds	r3, #64	; 0x40
 80014ba:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80014bc:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80014be:	78fa      	ldrb	r2, [r7, #3]
 80014c0:	6879      	ldr	r1, [r7, #4]
 80014c2:	4613      	mov	r3, r2
 80014c4:	009b      	lsls	r3, r3, #2
 80014c6:	4413      	add	r3, r2
 80014c8:	00db      	lsls	r3, r3, #3
 80014ca:	440b      	add	r3, r1
 80014cc:	3339      	adds	r3, #57	; 0x39
 80014ce:	78fa      	ldrb	r2, [r7, #3]
 80014d0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80014d2:	78fa      	ldrb	r2, [r7, #3]
 80014d4:	6879      	ldr	r1, [r7, #4]
 80014d6:	4613      	mov	r3, r2
 80014d8:	009b      	lsls	r3, r3, #2
 80014da:	4413      	add	r3, r2
 80014dc:	00db      	lsls	r3, r3, #3
 80014de:	440b      	add	r3, r1
 80014e0:	333f      	adds	r3, #63	; 0x3f
 80014e2:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80014e6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80014e8:	78fa      	ldrb	r2, [r7, #3]
 80014ea:	78bb      	ldrb	r3, [r7, #2]
 80014ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80014f0:	b2d8      	uxtb	r0, r3
 80014f2:	6879      	ldr	r1, [r7, #4]
 80014f4:	4613      	mov	r3, r2
 80014f6:	009b      	lsls	r3, r3, #2
 80014f8:	4413      	add	r3, r2
 80014fa:	00db      	lsls	r3, r3, #3
 80014fc:	440b      	add	r3, r1
 80014fe:	333a      	adds	r3, #58	; 0x3a
 8001500:	4602      	mov	r2, r0
 8001502:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001504:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001508:	2b00      	cmp	r3, #0
 800150a:	da0a      	bge.n	8001522 <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 800150c:	78fa      	ldrb	r2, [r7, #3]
 800150e:	6879      	ldr	r1, [r7, #4]
 8001510:	4613      	mov	r3, r2
 8001512:	009b      	lsls	r3, r3, #2
 8001514:	4413      	add	r3, r2
 8001516:	00db      	lsls	r3, r3, #3
 8001518:	440b      	add	r3, r1
 800151a:	333b      	adds	r3, #59	; 0x3b
 800151c:	2201      	movs	r2, #1
 800151e:	701a      	strb	r2, [r3, #0]
 8001520:	e009      	b.n	8001536 <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001522:	78fa      	ldrb	r2, [r7, #3]
 8001524:	6879      	ldr	r1, [r7, #4]
 8001526:	4613      	mov	r3, r2
 8001528:	009b      	lsls	r3, r3, #2
 800152a:	4413      	add	r3, r2
 800152c:	00db      	lsls	r3, r3, #3
 800152e:	440b      	add	r3, r1
 8001530:	333b      	adds	r3, #59	; 0x3b
 8001532:	2200      	movs	r2, #0
 8001534:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001536:	78fa      	ldrb	r2, [r7, #3]
 8001538:	6879      	ldr	r1, [r7, #4]
 800153a:	4613      	mov	r3, r2
 800153c:	009b      	lsls	r3, r3, #2
 800153e:	4413      	add	r3, r2
 8001540:	00db      	lsls	r3, r3, #3
 8001542:	440b      	add	r3, r1
 8001544:	333c      	adds	r3, #60	; 0x3c
 8001546:	f897 2020 	ldrb.w	r2, [r7, #32]
 800154a:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6818      	ldr	r0, [r3, #0]
 8001550:	787c      	ldrb	r4, [r7, #1]
 8001552:	78ba      	ldrb	r2, [r7, #2]
 8001554:	78f9      	ldrb	r1, [r7, #3]
 8001556:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001558:	9302      	str	r3, [sp, #8]
 800155a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800155e:	9301      	str	r3, [sp, #4]
 8001560:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001564:	9300      	str	r3, [sp, #0]
 8001566:	4623      	mov	r3, r4
 8001568:	f003 fa6c 	bl	8004a44 <USB_HC_Init>
 800156c:	4603      	mov	r3, r0
 800156e:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	2200      	movs	r2, #0
 8001574:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8001578:	7bfb      	ldrb	r3, [r7, #15]
}
 800157a:	4618      	mov	r0, r3
 800157c:	3714      	adds	r7, #20
 800157e:	46bd      	mov	sp, r7
 8001580:	bd90      	pop	{r4, r7, pc}

08001582 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001582:	b580      	push	{r7, lr}
 8001584:	b084      	sub	sp, #16
 8001586:	af00      	add	r7, sp, #0
 8001588:	6078      	str	r0, [r7, #4]
 800158a:	460b      	mov	r3, r1
 800158c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800158e:	2300      	movs	r3, #0
 8001590:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001598:	2b01      	cmp	r3, #1
 800159a:	d101      	bne.n	80015a0 <HAL_HCD_HC_Halt+0x1e>
 800159c:	2302      	movs	r3, #2
 800159e:	e00f      	b.n	80015c0 <HAL_HCD_HC_Halt+0x3e>
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	2201      	movs	r2, #1
 80015a4:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	78fa      	ldrb	r2, [r7, #3]
 80015ae:	4611      	mov	r1, r2
 80015b0:	4618      	mov	r0, r3
 80015b2:	f003 fca6 	bl	8004f02 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	2200      	movs	r2, #0
 80015ba:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 80015be:	7bfb      	ldrb	r3, [r7, #15]
}
 80015c0:	4618      	mov	r0, r3
 80015c2:	3710      	adds	r7, #16
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}

080015c8 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b082      	sub	sp, #8
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
 80015d0:	4608      	mov	r0, r1
 80015d2:	4611      	mov	r1, r2
 80015d4:	461a      	mov	r2, r3
 80015d6:	4603      	mov	r3, r0
 80015d8:	70fb      	strb	r3, [r7, #3]
 80015da:	460b      	mov	r3, r1
 80015dc:	70bb      	strb	r3, [r7, #2]
 80015de:	4613      	mov	r3, r2
 80015e0:	707b      	strb	r3, [r7, #1]
  UNUSED(do_ping);

  hhcd->hc[ch_num].ep_is_in = direction;
 80015e2:	78fa      	ldrb	r2, [r7, #3]
 80015e4:	6879      	ldr	r1, [r7, #4]
 80015e6:	4613      	mov	r3, r2
 80015e8:	009b      	lsls	r3, r3, #2
 80015ea:	4413      	add	r3, r2
 80015ec:	00db      	lsls	r3, r3, #3
 80015ee:	440b      	add	r3, r1
 80015f0:	333b      	adds	r3, #59	; 0x3b
 80015f2:	78ba      	ldrb	r2, [r7, #2]
 80015f4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80015f6:	78fa      	ldrb	r2, [r7, #3]
 80015f8:	6879      	ldr	r1, [r7, #4]
 80015fa:	4613      	mov	r3, r2
 80015fc:	009b      	lsls	r3, r3, #2
 80015fe:	4413      	add	r3, r2
 8001600:	00db      	lsls	r3, r3, #3
 8001602:	440b      	add	r3, r1
 8001604:	333f      	adds	r3, #63	; 0x3f
 8001606:	787a      	ldrb	r2, [r7, #1]
 8001608:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800160a:	7c3b      	ldrb	r3, [r7, #16]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d10a      	bne.n	8001626 <HAL_HCD_HC_SubmitRequest+0x5e>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001610:	78fa      	ldrb	r2, [r7, #3]
 8001612:	6879      	ldr	r1, [r7, #4]
 8001614:	4613      	mov	r3, r2
 8001616:	009b      	lsls	r3, r3, #2
 8001618:	4413      	add	r3, r2
 800161a:	00db      	lsls	r3, r3, #3
 800161c:	440b      	add	r3, r1
 800161e:	3342      	adds	r3, #66	; 0x42
 8001620:	2203      	movs	r2, #3
 8001622:	701a      	strb	r2, [r3, #0]
 8001624:	e009      	b.n	800163a <HAL_HCD_HC_SubmitRequest+0x72>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001626:	78fa      	ldrb	r2, [r7, #3]
 8001628:	6879      	ldr	r1, [r7, #4]
 800162a:	4613      	mov	r3, r2
 800162c:	009b      	lsls	r3, r3, #2
 800162e:	4413      	add	r3, r2
 8001630:	00db      	lsls	r3, r3, #3
 8001632:	440b      	add	r3, r1
 8001634:	3342      	adds	r3, #66	; 0x42
 8001636:	2202      	movs	r2, #2
 8001638:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800163a:	787b      	ldrb	r3, [r7, #1]
 800163c:	2b03      	cmp	r3, #3
 800163e:	f200 80d6 	bhi.w	80017ee <HAL_HCD_HC_SubmitRequest+0x226>
 8001642:	a201      	add	r2, pc, #4	; (adr r2, 8001648 <HAL_HCD_HC_SubmitRequest+0x80>)
 8001644:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001648:	08001659 	.word	0x08001659
 800164c:	080017d9 	.word	0x080017d9
 8001650:	080016c5 	.word	0x080016c5
 8001654:	0800174f 	.word	0x0800174f
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001658:	7c3b      	ldrb	r3, [r7, #16]
 800165a:	2b01      	cmp	r3, #1
 800165c:	f040 80c9 	bne.w	80017f2 <HAL_HCD_HC_SubmitRequest+0x22a>
 8001660:	78bb      	ldrb	r3, [r7, #2]
 8001662:	2b00      	cmp	r3, #0
 8001664:	f040 80c5 	bne.w	80017f2 <HAL_HCD_HC_SubmitRequest+0x22a>
      {
        if (length == 0U)
 8001668:	8b3b      	ldrh	r3, [r7, #24]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d109      	bne.n	8001682 <HAL_HCD_HC_SubmitRequest+0xba>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 800166e:	78fa      	ldrb	r2, [r7, #3]
 8001670:	6879      	ldr	r1, [r7, #4]
 8001672:	4613      	mov	r3, r2
 8001674:	009b      	lsls	r3, r3, #2
 8001676:	4413      	add	r3, r2
 8001678:	00db      	lsls	r3, r3, #3
 800167a:	440b      	add	r3, r1
 800167c:	3351      	adds	r3, #81	; 0x51
 800167e:	2201      	movs	r2, #1
 8001680:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001682:	78fa      	ldrb	r2, [r7, #3]
 8001684:	6879      	ldr	r1, [r7, #4]
 8001686:	4613      	mov	r3, r2
 8001688:	009b      	lsls	r3, r3, #2
 800168a:	4413      	add	r3, r2
 800168c:	00db      	lsls	r3, r3, #3
 800168e:	440b      	add	r3, r1
 8001690:	3351      	adds	r3, #81	; 0x51
 8001692:	781b      	ldrb	r3, [r3, #0]
 8001694:	2b00      	cmp	r3, #0
 8001696:	d10a      	bne.n	80016ae <HAL_HCD_HC_SubmitRequest+0xe6>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001698:	78fa      	ldrb	r2, [r7, #3]
 800169a:	6879      	ldr	r1, [r7, #4]
 800169c:	4613      	mov	r3, r2
 800169e:	009b      	lsls	r3, r3, #2
 80016a0:	4413      	add	r3, r2
 80016a2:	00db      	lsls	r3, r3, #3
 80016a4:	440b      	add	r3, r1
 80016a6:	3342      	adds	r3, #66	; 0x42
 80016a8:	2200      	movs	r2, #0
 80016aa:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80016ac:	e0a1      	b.n	80017f2 <HAL_HCD_HC_SubmitRequest+0x22a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80016ae:	78fa      	ldrb	r2, [r7, #3]
 80016b0:	6879      	ldr	r1, [r7, #4]
 80016b2:	4613      	mov	r3, r2
 80016b4:	009b      	lsls	r3, r3, #2
 80016b6:	4413      	add	r3, r2
 80016b8:	00db      	lsls	r3, r3, #3
 80016ba:	440b      	add	r3, r1
 80016bc:	3342      	adds	r3, #66	; 0x42
 80016be:	2202      	movs	r2, #2
 80016c0:	701a      	strb	r2, [r3, #0]
      break;
 80016c2:	e096      	b.n	80017f2 <HAL_HCD_HC_SubmitRequest+0x22a>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80016c4:	78bb      	ldrb	r3, [r7, #2]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d120      	bne.n	800170c <HAL_HCD_HC_SubmitRequest+0x144>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80016ca:	78fa      	ldrb	r2, [r7, #3]
 80016cc:	6879      	ldr	r1, [r7, #4]
 80016ce:	4613      	mov	r3, r2
 80016d0:	009b      	lsls	r3, r3, #2
 80016d2:	4413      	add	r3, r2
 80016d4:	00db      	lsls	r3, r3, #3
 80016d6:	440b      	add	r3, r1
 80016d8:	3351      	adds	r3, #81	; 0x51
 80016da:	781b      	ldrb	r3, [r3, #0]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d10a      	bne.n	80016f6 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80016e0:	78fa      	ldrb	r2, [r7, #3]
 80016e2:	6879      	ldr	r1, [r7, #4]
 80016e4:	4613      	mov	r3, r2
 80016e6:	009b      	lsls	r3, r3, #2
 80016e8:	4413      	add	r3, r2
 80016ea:	00db      	lsls	r3, r3, #3
 80016ec:	440b      	add	r3, r1
 80016ee:	3342      	adds	r3, #66	; 0x42
 80016f0:	2200      	movs	r2, #0
 80016f2:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80016f4:	e07e      	b.n	80017f4 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80016f6:	78fa      	ldrb	r2, [r7, #3]
 80016f8:	6879      	ldr	r1, [r7, #4]
 80016fa:	4613      	mov	r3, r2
 80016fc:	009b      	lsls	r3, r3, #2
 80016fe:	4413      	add	r3, r2
 8001700:	00db      	lsls	r3, r3, #3
 8001702:	440b      	add	r3, r1
 8001704:	3342      	adds	r3, #66	; 0x42
 8001706:	2202      	movs	r2, #2
 8001708:	701a      	strb	r2, [r3, #0]
      break;
 800170a:	e073      	b.n	80017f4 <HAL_HCD_HC_SubmitRequest+0x22c>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800170c:	78fa      	ldrb	r2, [r7, #3]
 800170e:	6879      	ldr	r1, [r7, #4]
 8001710:	4613      	mov	r3, r2
 8001712:	009b      	lsls	r3, r3, #2
 8001714:	4413      	add	r3, r2
 8001716:	00db      	lsls	r3, r3, #3
 8001718:	440b      	add	r3, r1
 800171a:	3350      	adds	r3, #80	; 0x50
 800171c:	781b      	ldrb	r3, [r3, #0]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d10a      	bne.n	8001738 <HAL_HCD_HC_SubmitRequest+0x170>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001722:	78fa      	ldrb	r2, [r7, #3]
 8001724:	6879      	ldr	r1, [r7, #4]
 8001726:	4613      	mov	r3, r2
 8001728:	009b      	lsls	r3, r3, #2
 800172a:	4413      	add	r3, r2
 800172c:	00db      	lsls	r3, r3, #3
 800172e:	440b      	add	r3, r1
 8001730:	3342      	adds	r3, #66	; 0x42
 8001732:	2200      	movs	r2, #0
 8001734:	701a      	strb	r2, [r3, #0]
      break;
 8001736:	e05d      	b.n	80017f4 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001738:	78fa      	ldrb	r2, [r7, #3]
 800173a:	6879      	ldr	r1, [r7, #4]
 800173c:	4613      	mov	r3, r2
 800173e:	009b      	lsls	r3, r3, #2
 8001740:	4413      	add	r3, r2
 8001742:	00db      	lsls	r3, r3, #3
 8001744:	440b      	add	r3, r1
 8001746:	3342      	adds	r3, #66	; 0x42
 8001748:	2202      	movs	r2, #2
 800174a:	701a      	strb	r2, [r3, #0]
      break;
 800174c:	e052      	b.n	80017f4 <HAL_HCD_HC_SubmitRequest+0x22c>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800174e:	78bb      	ldrb	r3, [r7, #2]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d120      	bne.n	8001796 <HAL_HCD_HC_SubmitRequest+0x1ce>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001754:	78fa      	ldrb	r2, [r7, #3]
 8001756:	6879      	ldr	r1, [r7, #4]
 8001758:	4613      	mov	r3, r2
 800175a:	009b      	lsls	r3, r3, #2
 800175c:	4413      	add	r3, r2
 800175e:	00db      	lsls	r3, r3, #3
 8001760:	440b      	add	r3, r1
 8001762:	3351      	adds	r3, #81	; 0x51
 8001764:	781b      	ldrb	r3, [r3, #0]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d10a      	bne.n	8001780 <HAL_HCD_HC_SubmitRequest+0x1b8>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800176a:	78fa      	ldrb	r2, [r7, #3]
 800176c:	6879      	ldr	r1, [r7, #4]
 800176e:	4613      	mov	r3, r2
 8001770:	009b      	lsls	r3, r3, #2
 8001772:	4413      	add	r3, r2
 8001774:	00db      	lsls	r3, r3, #3
 8001776:	440b      	add	r3, r1
 8001778:	3342      	adds	r3, #66	; 0x42
 800177a:	2200      	movs	r2, #0
 800177c:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800177e:	e039      	b.n	80017f4 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001780:	78fa      	ldrb	r2, [r7, #3]
 8001782:	6879      	ldr	r1, [r7, #4]
 8001784:	4613      	mov	r3, r2
 8001786:	009b      	lsls	r3, r3, #2
 8001788:	4413      	add	r3, r2
 800178a:	00db      	lsls	r3, r3, #3
 800178c:	440b      	add	r3, r1
 800178e:	3342      	adds	r3, #66	; 0x42
 8001790:	2202      	movs	r2, #2
 8001792:	701a      	strb	r2, [r3, #0]
      break;
 8001794:	e02e      	b.n	80017f4 <HAL_HCD_HC_SubmitRequest+0x22c>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001796:	78fa      	ldrb	r2, [r7, #3]
 8001798:	6879      	ldr	r1, [r7, #4]
 800179a:	4613      	mov	r3, r2
 800179c:	009b      	lsls	r3, r3, #2
 800179e:	4413      	add	r3, r2
 80017a0:	00db      	lsls	r3, r3, #3
 80017a2:	440b      	add	r3, r1
 80017a4:	3350      	adds	r3, #80	; 0x50
 80017a6:	781b      	ldrb	r3, [r3, #0]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d10a      	bne.n	80017c2 <HAL_HCD_HC_SubmitRequest+0x1fa>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80017ac:	78fa      	ldrb	r2, [r7, #3]
 80017ae:	6879      	ldr	r1, [r7, #4]
 80017b0:	4613      	mov	r3, r2
 80017b2:	009b      	lsls	r3, r3, #2
 80017b4:	4413      	add	r3, r2
 80017b6:	00db      	lsls	r3, r3, #3
 80017b8:	440b      	add	r3, r1
 80017ba:	3342      	adds	r3, #66	; 0x42
 80017bc:	2200      	movs	r2, #0
 80017be:	701a      	strb	r2, [r3, #0]
      break;
 80017c0:	e018      	b.n	80017f4 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80017c2:	78fa      	ldrb	r2, [r7, #3]
 80017c4:	6879      	ldr	r1, [r7, #4]
 80017c6:	4613      	mov	r3, r2
 80017c8:	009b      	lsls	r3, r3, #2
 80017ca:	4413      	add	r3, r2
 80017cc:	00db      	lsls	r3, r3, #3
 80017ce:	440b      	add	r3, r1
 80017d0:	3342      	adds	r3, #66	; 0x42
 80017d2:	2202      	movs	r2, #2
 80017d4:	701a      	strb	r2, [r3, #0]
      break;
 80017d6:	e00d      	b.n	80017f4 <HAL_HCD_HC_SubmitRequest+0x22c>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80017d8:	78fa      	ldrb	r2, [r7, #3]
 80017da:	6879      	ldr	r1, [r7, #4]
 80017dc:	4613      	mov	r3, r2
 80017de:	009b      	lsls	r3, r3, #2
 80017e0:	4413      	add	r3, r2
 80017e2:	00db      	lsls	r3, r3, #3
 80017e4:	440b      	add	r3, r1
 80017e6:	3342      	adds	r3, #66	; 0x42
 80017e8:	2200      	movs	r2, #0
 80017ea:	701a      	strb	r2, [r3, #0]
      break;
 80017ec:	e002      	b.n	80017f4 <HAL_HCD_HC_SubmitRequest+0x22c>

    default:
      break;
 80017ee:	bf00      	nop
 80017f0:	e000      	b.n	80017f4 <HAL_HCD_HC_SubmitRequest+0x22c>
      break;
 80017f2:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80017f4:	78fa      	ldrb	r2, [r7, #3]
 80017f6:	6879      	ldr	r1, [r7, #4]
 80017f8:	4613      	mov	r3, r2
 80017fa:	009b      	lsls	r3, r3, #2
 80017fc:	4413      	add	r3, r2
 80017fe:	00db      	lsls	r3, r3, #3
 8001800:	440b      	add	r3, r1
 8001802:	3344      	adds	r3, #68	; 0x44
 8001804:	697a      	ldr	r2, [r7, #20]
 8001806:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001808:	78fa      	ldrb	r2, [r7, #3]
 800180a:	8b39      	ldrh	r1, [r7, #24]
 800180c:	6878      	ldr	r0, [r7, #4]
 800180e:	4613      	mov	r3, r2
 8001810:	009b      	lsls	r3, r3, #2
 8001812:	4413      	add	r3, r2
 8001814:	00db      	lsls	r3, r3, #3
 8001816:	4403      	add	r3, r0
 8001818:	3348      	adds	r3, #72	; 0x48
 800181a:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800181c:	78fa      	ldrb	r2, [r7, #3]
 800181e:	6879      	ldr	r1, [r7, #4]
 8001820:	4613      	mov	r3, r2
 8001822:	009b      	lsls	r3, r3, #2
 8001824:	4413      	add	r3, r2
 8001826:	00db      	lsls	r3, r3, #3
 8001828:	440b      	add	r3, r1
 800182a:	335c      	adds	r3, #92	; 0x5c
 800182c:	2200      	movs	r2, #0
 800182e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001830:	78fa      	ldrb	r2, [r7, #3]
 8001832:	6879      	ldr	r1, [r7, #4]
 8001834:	4613      	mov	r3, r2
 8001836:	009b      	lsls	r3, r3, #2
 8001838:	4413      	add	r3, r2
 800183a:	00db      	lsls	r3, r3, #3
 800183c:	440b      	add	r3, r1
 800183e:	334c      	adds	r3, #76	; 0x4c
 8001840:	2200      	movs	r2, #0
 8001842:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001844:	78fa      	ldrb	r2, [r7, #3]
 8001846:	6879      	ldr	r1, [r7, #4]
 8001848:	4613      	mov	r3, r2
 800184a:	009b      	lsls	r3, r3, #2
 800184c:	4413      	add	r3, r2
 800184e:	00db      	lsls	r3, r3, #3
 8001850:	440b      	add	r3, r1
 8001852:	3339      	adds	r3, #57	; 0x39
 8001854:	78fa      	ldrb	r2, [r7, #3]
 8001856:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001858:	78fa      	ldrb	r2, [r7, #3]
 800185a:	6879      	ldr	r1, [r7, #4]
 800185c:	4613      	mov	r3, r2
 800185e:	009b      	lsls	r3, r3, #2
 8001860:	4413      	add	r3, r2
 8001862:	00db      	lsls	r3, r3, #3
 8001864:	440b      	add	r3, r1
 8001866:	335d      	adds	r3, #93	; 0x5d
 8001868:	2200      	movs	r2, #0
 800186a:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6818      	ldr	r0, [r3, #0]
 8001870:	78fa      	ldrb	r2, [r7, #3]
 8001872:	4613      	mov	r3, r2
 8001874:	009b      	lsls	r3, r3, #2
 8001876:	4413      	add	r3, r2
 8001878:	00db      	lsls	r3, r3, #3
 800187a:	3338      	adds	r3, #56	; 0x38
 800187c:	687a      	ldr	r2, [r7, #4]
 800187e:	18d1      	adds	r1, r2, r3
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	691b      	ldr	r3, [r3, #16]
 8001884:	b2db      	uxtb	r3, r3
 8001886:	461a      	mov	r2, r3
 8001888:	f003 f9e6 	bl	8004c58 <USB_HC_StartXfer>
 800188c:	4603      	mov	r3, r0
}
 800188e:	4618      	mov	r0, r3
 8001890:	3708      	adds	r7, #8
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop

08001898 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b086      	sub	sp, #24
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80018a6:	693b      	ldr	r3, [r7, #16]
 80018a8:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4618      	mov	r0, r3
 80018b0:	f002 ff03 	bl	80046ba <USB_GetMode>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b01      	cmp	r3, #1
 80018b8:	f040 80f1 	bne.w	8001a9e <HAL_HCD_IRQHandler+0x206>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4618      	mov	r0, r3
 80018c2:	f002 fee7 	bl	8004694 <USB_ReadInterrupts>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	f000 80e7 	beq.w	8001a9c <HAL_HCD_IRQHandler+0x204>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4618      	mov	r0, r3
 80018d4:	f002 fede 	bl	8004694 <USB_ReadInterrupts>
 80018d8:	4603      	mov	r3, r0
 80018da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018de:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80018e2:	d104      	bne.n	80018ee <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80018ec:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4618      	mov	r0, r3
 80018f4:	f002 fece 	bl	8004694 <USB_ReadInterrupts>
 80018f8:	4603      	mov	r3, r0
 80018fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001902:	d104      	bne.n	800190e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800190c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4618      	mov	r0, r3
 8001914:	f002 febe 	bl	8004694 <USB_ReadInterrupts>
 8001918:	4603      	mov	r3, r0
 800191a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800191e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001922:	d104      	bne.n	800192e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800192c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4618      	mov	r0, r3
 8001934:	f002 feae 	bl	8004694 <USB_ReadInterrupts>
 8001938:	4603      	mov	r3, r0
 800193a:	f003 0302 	and.w	r3, r3, #2
 800193e:	2b02      	cmp	r3, #2
 8001940:	d103      	bne.n	800194a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	2202      	movs	r2, #2
 8001948:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4618      	mov	r0, r3
 8001950:	f002 fea0 	bl	8004694 <USB_ReadInterrupts>
 8001954:	4603      	mov	r3, r0
 8001956:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800195a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800195e:	d117      	bne.n	8001990 <HAL_HCD_IRQHandler+0xf8>
    {

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	68fa      	ldr	r2, [r7, #12]
 800196a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800196e:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8001972:	6013      	str	r3, [r2, #0]

      /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->DisconnectCallback(hhcd);
#else
      HAL_HCD_Disconnect_Callback(hhcd);
 8001974:	6878      	ldr	r0, [r7, #4]
 8001976:	f008 fe83 	bl	800a680 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	2101      	movs	r1, #1
 8001980:	4618      	mov	r0, r3
 8001982:	f002 ff99 	bl	80048b8 <USB_InitFSLSPClkSel>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800198e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4618      	mov	r0, r3
 8001996:	f002 fe7d 	bl	8004694 <USB_ReadInterrupts>
 800199a:	4603      	mov	r3, r0
 800199c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80019a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019a4:	d102      	bne.n	80019ac <HAL_HCD_IRQHandler+0x114>
    {
      HCD_Port_IRQHandler(hhcd);
 80019a6:	6878      	ldr	r0, [r7, #4]
 80019a8:	f001 f8c8 	bl	8002b3c <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4618      	mov	r0, r3
 80019b2:	f002 fe6f 	bl	8004694 <USB_ReadInterrupts>
 80019b6:	4603      	mov	r3, r0
 80019b8:	f003 0308 	and.w	r3, r3, #8
 80019bc:	2b08      	cmp	r3, #8
 80019be:	d106      	bne.n	80019ce <HAL_HCD_IRQHandler+0x136>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80019c0:	6878      	ldr	r0, [r7, #4]
 80019c2:	f008 fe41 	bl	800a648 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	2208      	movs	r2, #8
 80019cc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4618      	mov	r0, r3
 80019d4:	f002 fe5e 	bl	8004694 <USB_ReadInterrupts>
 80019d8:	4603      	mov	r3, r0
 80019da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019de:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80019e2:	d138      	bne.n	8001a56 <HAL_HCD_IRQHandler+0x1be>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4618      	mov	r0, r3
 80019ea:	f003 fa79 	bl	8004ee0 <USB_HC_ReadInterrupt>
 80019ee:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80019f0:	2300      	movs	r3, #0
 80019f2:	617b      	str	r3, [r7, #20]
 80019f4:	e025      	b.n	8001a42 <HAL_HCD_IRQHandler+0x1aa>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80019f6:	697b      	ldr	r3, [r7, #20]
 80019f8:	f003 030f 	and.w	r3, r3, #15
 80019fc:	68ba      	ldr	r2, [r7, #8]
 80019fe:	fa22 f303 	lsr.w	r3, r2, r3
 8001a02:	f003 0301 	and.w	r3, r3, #1
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d018      	beq.n	8001a3c <HAL_HCD_IRQHandler+0x1a4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001a0a:	697b      	ldr	r3, [r7, #20]
 8001a0c:	015a      	lsls	r2, r3, #5
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	4413      	add	r3, r2
 8001a12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001a1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001a20:	d106      	bne.n	8001a30 <HAL_HCD_IRQHandler+0x198>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001a22:	697b      	ldr	r3, [r7, #20]
 8001a24:	b2db      	uxtb	r3, r3
 8001a26:	4619      	mov	r1, r3
 8001a28:	6878      	ldr	r0, [r7, #4]
 8001a2a:	f000 f8cf 	bl	8001bcc <HCD_HC_IN_IRQHandler>
 8001a2e:	e005      	b.n	8001a3c <HAL_HCD_IRQHandler+0x1a4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001a30:	697b      	ldr	r3, [r7, #20]
 8001a32:	b2db      	uxtb	r3, r3
 8001a34:	4619      	mov	r1, r3
 8001a36:	6878      	ldr	r0, [r7, #4]
 8001a38:	f000 fc5f 	bl	80022fa <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001a3c:	697b      	ldr	r3, [r7, #20]
 8001a3e:	3301      	adds	r3, #1
 8001a40:	617b      	str	r3, [r7, #20]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	689b      	ldr	r3, [r3, #8]
 8001a46:	697a      	ldr	r2, [r7, #20]
 8001a48:	429a      	cmp	r2, r3
 8001a4a:	d3d4      	bcc.n	80019f6 <HAL_HCD_IRQHandler+0x15e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a54:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f002 fe1a 	bl	8004694 <USB_ReadInterrupts>
 8001a60:	4603      	mov	r3, r0
 8001a62:	f003 0310 	and.w	r3, r3, #16
 8001a66:	2b10      	cmp	r3, #16
 8001a68:	d101      	bne.n	8001a6e <HAL_HCD_IRQHandler+0x1d6>
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	e000      	b.n	8001a70 <HAL_HCD_IRQHandler+0x1d8>
 8001a6e:	2300      	movs	r3, #0
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d014      	beq.n	8001a9e <HAL_HCD_IRQHandler+0x206>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	699a      	ldr	r2, [r3, #24]
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f022 0210 	bic.w	r2, r2, #16
 8001a82:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001a84:	6878      	ldr	r0, [r7, #4]
 8001a86:	f000 ffad 	bl	80029e4 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	699a      	ldr	r2, [r3, #24]
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f042 0210 	orr.w	r2, r2, #16
 8001a98:	619a      	str	r2, [r3, #24]
 8001a9a:	e000      	b.n	8001a9e <HAL_HCD_IRQHandler+0x206>
      return;
 8001a9c:	bf00      	nop
    }
  }
}
 8001a9e:	3718      	adds	r7, #24
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}

08001aa4 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b082      	sub	sp, #8
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001ab2:	2b01      	cmp	r3, #1
 8001ab4:	d101      	bne.n	8001aba <HAL_HCD_Start+0x16>
 8001ab6:	2302      	movs	r3, #2
 8001ab8:	e013      	b.n	8001ae2 <HAL_HCD_Start+0x3e>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2201      	movs	r2, #1
 8001abe:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f002 fcf1 	bl	80044ae <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	2101      	movs	r1, #1
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f002 ff54 	bl	8004980 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2200      	movs	r2, #0
 8001adc:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 8001ae0:	2300      	movs	r3, #0
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	3708      	adds	r7, #8
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}

08001aea <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001aea:	b580      	push	{r7, lr}
 8001aec:	b082      	sub	sp, #8
 8001aee:	af00      	add	r7, sp, #0
 8001af0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001af8:	2b01      	cmp	r3, #1
 8001afa:	d101      	bne.n	8001b00 <HAL_HCD_Stop+0x16>
 8001afc:	2302      	movs	r3, #2
 8001afe:	e00d      	b.n	8001b1c <HAL_HCD_Stop+0x32>
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2201      	movs	r2, #1
 8001b04:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f003 fb33 	bl	8005178 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	2200      	movs	r2, #0
 8001b16:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 8001b1a:	2300      	movs	r3, #0
}
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	3708      	adds	r7, #8
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bd80      	pop	{r7, pc}

08001b24 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b082      	sub	sp, #8
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4618      	mov	r0, r3
 8001b32:	f002 fefb 	bl	800492c <USB_ResetPort>
 8001b36:	4603      	mov	r3, r0
}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	3708      	adds	r7, #8
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}

08001b40 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b083      	sub	sp, #12
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
 8001b48:	460b      	mov	r3, r1
 8001b4a:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001b4c:	78fa      	ldrb	r2, [r7, #3]
 8001b4e:	6879      	ldr	r1, [r7, #4]
 8001b50:	4613      	mov	r3, r2
 8001b52:	009b      	lsls	r3, r3, #2
 8001b54:	4413      	add	r3, r2
 8001b56:	00db      	lsls	r3, r3, #3
 8001b58:	440b      	add	r3, r1
 8001b5a:	335c      	adds	r3, #92	; 0x5c
 8001b5c:	781b      	ldrb	r3, [r3, #0]
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	370c      	adds	r7, #12
 8001b62:	46bd      	mov	sp, r7
 8001b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b68:	4770      	bx	lr

08001b6a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001b6a:	b480      	push	{r7}
 8001b6c:	b083      	sub	sp, #12
 8001b6e:	af00      	add	r7, sp, #0
 8001b70:	6078      	str	r0, [r7, #4]
 8001b72:	460b      	mov	r3, r1
 8001b74:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001b76:	78fa      	ldrb	r2, [r7, #3]
 8001b78:	6879      	ldr	r1, [r7, #4]
 8001b7a:	4613      	mov	r3, r2
 8001b7c:	009b      	lsls	r3, r3, #2
 8001b7e:	4413      	add	r3, r2
 8001b80:	00db      	lsls	r3, r3, #3
 8001b82:	440b      	add	r3, r1
 8001b84:	334c      	adds	r3, #76	; 0x4c
 8001b86:	681b      	ldr	r3, [r3, #0]
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	370c      	adds	r7, #12
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b92:	4770      	bx	lr

08001b94 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b082      	sub	sp, #8
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f002 ff3d 	bl	8004a20 <USB_GetCurrentFrame>
 8001ba6:	4603      	mov	r3, r0
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	3708      	adds	r7, #8
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}

08001bb0 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b082      	sub	sp, #8
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f002 ff18 	bl	80049f2 <USB_GetHostSpeed>
 8001bc2:	4603      	mov	r3, r0
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	3708      	adds	r7, #8
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}

08001bcc <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b086      	sub	sp, #24
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
 8001bd4:	460b      	mov	r3, r1
 8001bd6:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001bde:	697b      	ldr	r3, [r7, #20]
 8001be0:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001be2:	78fb      	ldrb	r3, [r7, #3]
 8001be4:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	015a      	lsls	r2, r3, #5
 8001bea:	693b      	ldr	r3, [r7, #16]
 8001bec:	4413      	add	r3, r2
 8001bee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001bf2:	689b      	ldr	r3, [r3, #8]
 8001bf4:	f003 0304 	and.w	r3, r3, #4
 8001bf8:	2b04      	cmp	r3, #4
 8001bfa:	d119      	bne.n	8001c30 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	015a      	lsls	r2, r3, #5
 8001c00:	693b      	ldr	r3, [r7, #16]
 8001c02:	4413      	add	r3, r2
 8001c04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c08:	461a      	mov	r2, r3
 8001c0a:	2304      	movs	r3, #4
 8001c0c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	015a      	lsls	r2, r3, #5
 8001c12:	693b      	ldr	r3, [r7, #16]
 8001c14:	4413      	add	r3, r2
 8001c16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c1a:	68db      	ldr	r3, [r3, #12]
 8001c1c:	68fa      	ldr	r2, [r7, #12]
 8001c1e:	0151      	lsls	r1, r2, #5
 8001c20:	693a      	ldr	r2, [r7, #16]
 8001c22:	440a      	add	r2, r1
 8001c24:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001c28:	f043 0302 	orr.w	r3, r3, #2
 8001c2c:	60d3      	str	r3, [r2, #12]
 8001c2e:	e095      	b.n	8001d5c <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	015a      	lsls	r2, r3, #5
 8001c34:	693b      	ldr	r3, [r7, #16]
 8001c36:	4413      	add	r3, r2
 8001c38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c3c:	689b      	ldr	r3, [r3, #8]
 8001c3e:	f003 0320 	and.w	r3, r3, #32
 8001c42:	2b20      	cmp	r3, #32
 8001c44:	d109      	bne.n	8001c5a <HCD_HC_IN_IRQHandler+0x8e>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	015a      	lsls	r2, r3, #5
 8001c4a:	693b      	ldr	r3, [r7, #16]
 8001c4c:	4413      	add	r3, r2
 8001c4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c52:	461a      	mov	r2, r3
 8001c54:	2320      	movs	r3, #32
 8001c56:	6093      	str	r3, [r2, #8]
 8001c58:	e080      	b.n	8001d5c <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	015a      	lsls	r2, r3, #5
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	4413      	add	r3, r2
 8001c62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c66:	689b      	ldr	r3, [r3, #8]
 8001c68:	f003 0308 	and.w	r3, r3, #8
 8001c6c:	2b08      	cmp	r3, #8
 8001c6e:	d134      	bne.n	8001cda <HCD_HC_IN_IRQHandler+0x10e>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	015a      	lsls	r2, r3, #5
 8001c74:	693b      	ldr	r3, [r7, #16]
 8001c76:	4413      	add	r3, r2
 8001c78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c7c:	68db      	ldr	r3, [r3, #12]
 8001c7e:	68fa      	ldr	r2, [r7, #12]
 8001c80:	0151      	lsls	r1, r2, #5
 8001c82:	693a      	ldr	r2, [r7, #16]
 8001c84:	440a      	add	r2, r1
 8001c86:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001c8a:	f043 0302 	orr.w	r3, r3, #2
 8001c8e:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8001c90:	6879      	ldr	r1, [r7, #4]
 8001c92:	68fa      	ldr	r2, [r7, #12]
 8001c94:	4613      	mov	r3, r2
 8001c96:	009b      	lsls	r3, r3, #2
 8001c98:	4413      	add	r3, r2
 8001c9a:	00db      	lsls	r3, r3, #3
 8001c9c:	440b      	add	r3, r1
 8001c9e:	335d      	adds	r3, #93	; 0x5d
 8001ca0:	2205      	movs	r2, #5
 8001ca2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	015a      	lsls	r2, r3, #5
 8001ca8:	693b      	ldr	r3, [r7, #16]
 8001caa:	4413      	add	r3, r2
 8001cac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cb0:	461a      	mov	r2, r3
 8001cb2:	2310      	movs	r3, #16
 8001cb4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	015a      	lsls	r2, r3, #5
 8001cba:	693b      	ldr	r3, [r7, #16]
 8001cbc:	4413      	add	r3, r2
 8001cbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cc2:	461a      	mov	r2, r3
 8001cc4:	2308      	movs	r3, #8
 8001cc6:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	68fa      	ldr	r2, [r7, #12]
 8001cce:	b2d2      	uxtb	r2, r2
 8001cd0:	4611      	mov	r1, r2
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f003 f915 	bl	8004f02 <USB_HC_Halt>
 8001cd8:	e040      	b.n	8001d5c <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	015a      	lsls	r2, r3, #5
 8001cde:	693b      	ldr	r3, [r7, #16]
 8001ce0:	4413      	add	r3, r2
 8001ce2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ce6:	689b      	ldr	r3, [r3, #8]
 8001ce8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001cf0:	d134      	bne.n	8001d5c <HCD_HC_IN_IRQHandler+0x190>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	015a      	lsls	r2, r3, #5
 8001cf6:	693b      	ldr	r3, [r7, #16]
 8001cf8:	4413      	add	r3, r2
 8001cfa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cfe:	68db      	ldr	r3, [r3, #12]
 8001d00:	68fa      	ldr	r2, [r7, #12]
 8001d02:	0151      	lsls	r1, r2, #5
 8001d04:	693a      	ldr	r2, [r7, #16]
 8001d06:	440a      	add	r2, r1
 8001d08:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001d0c:	f043 0302 	orr.w	r3, r3, #2
 8001d10:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	68fa      	ldr	r2, [r7, #12]
 8001d18:	b2d2      	uxtb	r2, r2
 8001d1a:	4611      	mov	r1, r2
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f003 f8f0 	bl	8004f02 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	015a      	lsls	r2, r3, #5
 8001d26:	693b      	ldr	r3, [r7, #16]
 8001d28:	4413      	add	r3, r2
 8001d2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d2e:	461a      	mov	r2, r3
 8001d30:	2310      	movs	r3, #16
 8001d32:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001d34:	6879      	ldr	r1, [r7, #4]
 8001d36:	68fa      	ldr	r2, [r7, #12]
 8001d38:	4613      	mov	r3, r2
 8001d3a:	009b      	lsls	r3, r3, #2
 8001d3c:	4413      	add	r3, r2
 8001d3e:	00db      	lsls	r3, r3, #3
 8001d40:	440b      	add	r3, r1
 8001d42:	335d      	adds	r3, #93	; 0x5d
 8001d44:	2208      	movs	r2, #8
 8001d46:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	015a      	lsls	r2, r3, #5
 8001d4c:	693b      	ldr	r3, [r7, #16]
 8001d4e:	4413      	add	r3, r2
 8001d50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d54:	461a      	mov	r2, r3
 8001d56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d5a:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	015a      	lsls	r2, r3, #5
 8001d60:	693b      	ldr	r3, [r7, #16]
 8001d62:	4413      	add	r3, r2
 8001d64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d68:	689b      	ldr	r3, [r3, #8]
 8001d6a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d6e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d72:	d122      	bne.n	8001dba <HCD_HC_IN_IRQHandler+0x1ee>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	015a      	lsls	r2, r3, #5
 8001d78:	693b      	ldr	r3, [r7, #16]
 8001d7a:	4413      	add	r3, r2
 8001d7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d80:	68db      	ldr	r3, [r3, #12]
 8001d82:	68fa      	ldr	r2, [r7, #12]
 8001d84:	0151      	lsls	r1, r2, #5
 8001d86:	693a      	ldr	r2, [r7, #16]
 8001d88:	440a      	add	r2, r1
 8001d8a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001d8e:	f043 0302 	orr.w	r3, r3, #2
 8001d92:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	68fa      	ldr	r2, [r7, #12]
 8001d9a:	b2d2      	uxtb	r2, r2
 8001d9c:	4611      	mov	r1, r2
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f003 f8af 	bl	8004f02 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	015a      	lsls	r2, r3, #5
 8001da8:	693b      	ldr	r3, [r7, #16]
 8001daa:	4413      	add	r3, r2
 8001dac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001db0:	461a      	mov	r2, r3
 8001db2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001db6:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8001db8:	e29b      	b.n	80022f2 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	015a      	lsls	r2, r3, #5
 8001dbe:	693b      	ldr	r3, [r7, #16]
 8001dc0:	4413      	add	r3, r2
 8001dc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dc6:	689b      	ldr	r3, [r3, #8]
 8001dc8:	f003 0301 	and.w	r3, r3, #1
 8001dcc:	2b01      	cmp	r3, #1
 8001dce:	f040 80c1 	bne.w	8001f54 <HCD_HC_IN_IRQHandler+0x388>
    if (hhcd->Init.dma_enable != 0U)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	691b      	ldr	r3, [r3, #16]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d01b      	beq.n	8001e12 <HCD_HC_IN_IRQHandler+0x246>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8001dda:	6879      	ldr	r1, [r7, #4]
 8001ddc:	68fa      	ldr	r2, [r7, #12]
 8001dde:	4613      	mov	r3, r2
 8001de0:	009b      	lsls	r3, r3, #2
 8001de2:	4413      	add	r3, r2
 8001de4:	00db      	lsls	r3, r3, #3
 8001de6:	440b      	add	r3, r1
 8001de8:	3348      	adds	r3, #72	; 0x48
 8001dea:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	0159      	lsls	r1, r3, #5
 8001df0:	693b      	ldr	r3, [r7, #16]
 8001df2:	440b      	add	r3, r1
 8001df4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001df8:	691b      	ldr	r3, [r3, #16]
 8001dfa:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8001dfe:	1ad1      	subs	r1, r2, r3
 8001e00:	6878      	ldr	r0, [r7, #4]
 8001e02:	68fa      	ldr	r2, [r7, #12]
 8001e04:	4613      	mov	r3, r2
 8001e06:	009b      	lsls	r3, r3, #2
 8001e08:	4413      	add	r3, r2
 8001e0a:	00db      	lsls	r3, r3, #3
 8001e0c:	4403      	add	r3, r0
 8001e0e:	334c      	adds	r3, #76	; 0x4c
 8001e10:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8001e12:	6879      	ldr	r1, [r7, #4]
 8001e14:	68fa      	ldr	r2, [r7, #12]
 8001e16:	4613      	mov	r3, r2
 8001e18:	009b      	lsls	r3, r3, #2
 8001e1a:	4413      	add	r3, r2
 8001e1c:	00db      	lsls	r3, r3, #3
 8001e1e:	440b      	add	r3, r1
 8001e20:	335d      	adds	r3, #93	; 0x5d
 8001e22:	2201      	movs	r2, #1
 8001e24:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001e26:	6879      	ldr	r1, [r7, #4]
 8001e28:	68fa      	ldr	r2, [r7, #12]
 8001e2a:	4613      	mov	r3, r2
 8001e2c:	009b      	lsls	r3, r3, #2
 8001e2e:	4413      	add	r3, r2
 8001e30:	00db      	lsls	r3, r3, #3
 8001e32:	440b      	add	r3, r1
 8001e34:	3358      	adds	r3, #88	; 0x58
 8001e36:	2200      	movs	r2, #0
 8001e38:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	015a      	lsls	r2, r3, #5
 8001e3e:	693b      	ldr	r3, [r7, #16]
 8001e40:	4413      	add	r3, r2
 8001e42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e46:	461a      	mov	r2, r3
 8001e48:	2301      	movs	r3, #1
 8001e4a:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001e4c:	6879      	ldr	r1, [r7, #4]
 8001e4e:	68fa      	ldr	r2, [r7, #12]
 8001e50:	4613      	mov	r3, r2
 8001e52:	009b      	lsls	r3, r3, #2
 8001e54:	4413      	add	r3, r2
 8001e56:	00db      	lsls	r3, r3, #3
 8001e58:	440b      	add	r3, r1
 8001e5a:	333f      	adds	r3, #63	; 0x3f
 8001e5c:	781b      	ldrb	r3, [r3, #0]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d00a      	beq.n	8001e78 <HCD_HC_IN_IRQHandler+0x2ac>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001e62:	6879      	ldr	r1, [r7, #4]
 8001e64:	68fa      	ldr	r2, [r7, #12]
 8001e66:	4613      	mov	r3, r2
 8001e68:	009b      	lsls	r3, r3, #2
 8001e6a:	4413      	add	r3, r2
 8001e6c:	00db      	lsls	r3, r3, #3
 8001e6e:	440b      	add	r3, r1
 8001e70:	333f      	adds	r3, #63	; 0x3f
 8001e72:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001e74:	2b02      	cmp	r3, #2
 8001e76:	d121      	bne.n	8001ebc <HCD_HC_IN_IRQHandler+0x2f0>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	015a      	lsls	r2, r3, #5
 8001e7c:	693b      	ldr	r3, [r7, #16]
 8001e7e:	4413      	add	r3, r2
 8001e80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e84:	68db      	ldr	r3, [r3, #12]
 8001e86:	68fa      	ldr	r2, [r7, #12]
 8001e88:	0151      	lsls	r1, r2, #5
 8001e8a:	693a      	ldr	r2, [r7, #16]
 8001e8c:	440a      	add	r2, r1
 8001e8e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001e92:	f043 0302 	orr.w	r3, r3, #2
 8001e96:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	68fa      	ldr	r2, [r7, #12]
 8001e9e:	b2d2      	uxtb	r2, r2
 8001ea0:	4611      	mov	r1, r2
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f003 f82d 	bl	8004f02 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	015a      	lsls	r2, r3, #5
 8001eac:	693b      	ldr	r3, [r7, #16]
 8001eae:	4413      	add	r3, r2
 8001eb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001eb4:	461a      	mov	r2, r3
 8001eb6:	2310      	movs	r3, #16
 8001eb8:	6093      	str	r3, [r2, #8]
 8001eba:	e034      	b.n	8001f26 <HCD_HC_IN_IRQHandler+0x35a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8001ebc:	6879      	ldr	r1, [r7, #4]
 8001ebe:	68fa      	ldr	r2, [r7, #12]
 8001ec0:	4613      	mov	r3, r2
 8001ec2:	009b      	lsls	r3, r3, #2
 8001ec4:	4413      	add	r3, r2
 8001ec6:	00db      	lsls	r3, r3, #3
 8001ec8:	440b      	add	r3, r1
 8001eca:	333f      	adds	r3, #63	; 0x3f
 8001ecc:	781b      	ldrb	r3, [r3, #0]
 8001ece:	2b03      	cmp	r3, #3
 8001ed0:	d129      	bne.n	8001f26 <HCD_HC_IN_IRQHandler+0x35a>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	015a      	lsls	r2, r3, #5
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	4413      	add	r3, r2
 8001eda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	68fa      	ldr	r2, [r7, #12]
 8001ee2:	0151      	lsls	r1, r2, #5
 8001ee4:	693a      	ldr	r2, [r7, #16]
 8001ee6:	440a      	add	r2, r1
 8001ee8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001eec:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001ef0:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001ef2:	6879      	ldr	r1, [r7, #4]
 8001ef4:	68fa      	ldr	r2, [r7, #12]
 8001ef6:	4613      	mov	r3, r2
 8001ef8:	009b      	lsls	r3, r3, #2
 8001efa:	4413      	add	r3, r2
 8001efc:	00db      	lsls	r3, r3, #3
 8001efe:	440b      	add	r3, r1
 8001f00:	335c      	adds	r3, #92	; 0x5c
 8001f02:	2201      	movs	r2, #1
 8001f04:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	b2d8      	uxtb	r0, r3
 8001f0a:	6879      	ldr	r1, [r7, #4]
 8001f0c:	68fa      	ldr	r2, [r7, #12]
 8001f0e:	4613      	mov	r3, r2
 8001f10:	009b      	lsls	r3, r3, #2
 8001f12:	4413      	add	r3, r2
 8001f14:	00db      	lsls	r3, r3, #3
 8001f16:	440b      	add	r3, r1
 8001f18:	335c      	adds	r3, #92	; 0x5c
 8001f1a:	781b      	ldrb	r3, [r3, #0]
 8001f1c:	461a      	mov	r2, r3
 8001f1e:	4601      	mov	r1, r0
 8001f20:	6878      	ldr	r0, [r7, #4]
 8001f22:	f008 fbbb 	bl	800a69c <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8001f26:	6879      	ldr	r1, [r7, #4]
 8001f28:	68fa      	ldr	r2, [r7, #12]
 8001f2a:	4613      	mov	r3, r2
 8001f2c:	009b      	lsls	r3, r3, #2
 8001f2e:	4413      	add	r3, r2
 8001f30:	00db      	lsls	r3, r3, #3
 8001f32:	440b      	add	r3, r1
 8001f34:	3350      	adds	r3, #80	; 0x50
 8001f36:	781b      	ldrb	r3, [r3, #0]
 8001f38:	f083 0301 	eor.w	r3, r3, #1
 8001f3c:	b2d8      	uxtb	r0, r3
 8001f3e:	6879      	ldr	r1, [r7, #4]
 8001f40:	68fa      	ldr	r2, [r7, #12]
 8001f42:	4613      	mov	r3, r2
 8001f44:	009b      	lsls	r3, r3, #2
 8001f46:	4413      	add	r3, r2
 8001f48:	00db      	lsls	r3, r3, #3
 8001f4a:	440b      	add	r3, r1
 8001f4c:	3350      	adds	r3, #80	; 0x50
 8001f4e:	4602      	mov	r2, r0
 8001f50:	701a      	strb	r2, [r3, #0]
}
 8001f52:	e1ce      	b.n	80022f2 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	015a      	lsls	r2, r3, #5
 8001f58:	693b      	ldr	r3, [r7, #16]
 8001f5a:	4413      	add	r3, r2
 8001f5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f60:	689b      	ldr	r3, [r3, #8]
 8001f62:	f003 0302 	and.w	r3, r3, #2
 8001f66:	2b02      	cmp	r3, #2
 8001f68:	f040 80f1 	bne.w	800214e <HCD_HC_IN_IRQHandler+0x582>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	015a      	lsls	r2, r3, #5
 8001f70:	693b      	ldr	r3, [r7, #16]
 8001f72:	4413      	add	r3, r2
 8001f74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f78:	68db      	ldr	r3, [r3, #12]
 8001f7a:	68fa      	ldr	r2, [r7, #12]
 8001f7c:	0151      	lsls	r1, r2, #5
 8001f7e:	693a      	ldr	r2, [r7, #16]
 8001f80:	440a      	add	r2, r1
 8001f82:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001f86:	f023 0302 	bic.w	r3, r3, #2
 8001f8a:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8001f8c:	6879      	ldr	r1, [r7, #4]
 8001f8e:	68fa      	ldr	r2, [r7, #12]
 8001f90:	4613      	mov	r3, r2
 8001f92:	009b      	lsls	r3, r3, #2
 8001f94:	4413      	add	r3, r2
 8001f96:	00db      	lsls	r3, r3, #3
 8001f98:	440b      	add	r3, r1
 8001f9a:	335d      	adds	r3, #93	; 0x5d
 8001f9c:	781b      	ldrb	r3, [r3, #0]
 8001f9e:	2b01      	cmp	r3, #1
 8001fa0:	d10a      	bne.n	8001fb8 <HCD_HC_IN_IRQHandler+0x3ec>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8001fa2:	6879      	ldr	r1, [r7, #4]
 8001fa4:	68fa      	ldr	r2, [r7, #12]
 8001fa6:	4613      	mov	r3, r2
 8001fa8:	009b      	lsls	r3, r3, #2
 8001faa:	4413      	add	r3, r2
 8001fac:	00db      	lsls	r3, r3, #3
 8001fae:	440b      	add	r3, r1
 8001fb0:	335c      	adds	r3, #92	; 0x5c
 8001fb2:	2201      	movs	r2, #1
 8001fb4:	701a      	strb	r2, [r3, #0]
 8001fb6:	e0b0      	b.n	800211a <HCD_HC_IN_IRQHandler+0x54e>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8001fb8:	6879      	ldr	r1, [r7, #4]
 8001fba:	68fa      	ldr	r2, [r7, #12]
 8001fbc:	4613      	mov	r3, r2
 8001fbe:	009b      	lsls	r3, r3, #2
 8001fc0:	4413      	add	r3, r2
 8001fc2:	00db      	lsls	r3, r3, #3
 8001fc4:	440b      	add	r3, r1
 8001fc6:	335d      	adds	r3, #93	; 0x5d
 8001fc8:	781b      	ldrb	r3, [r3, #0]
 8001fca:	2b05      	cmp	r3, #5
 8001fcc:	d10a      	bne.n	8001fe4 <HCD_HC_IN_IRQHandler+0x418>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8001fce:	6879      	ldr	r1, [r7, #4]
 8001fd0:	68fa      	ldr	r2, [r7, #12]
 8001fd2:	4613      	mov	r3, r2
 8001fd4:	009b      	lsls	r3, r3, #2
 8001fd6:	4413      	add	r3, r2
 8001fd8:	00db      	lsls	r3, r3, #3
 8001fda:	440b      	add	r3, r1
 8001fdc:	335c      	adds	r3, #92	; 0x5c
 8001fde:	2205      	movs	r2, #5
 8001fe0:	701a      	strb	r2, [r3, #0]
 8001fe2:	e09a      	b.n	800211a <HCD_HC_IN_IRQHandler+0x54e>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001fe4:	6879      	ldr	r1, [r7, #4]
 8001fe6:	68fa      	ldr	r2, [r7, #12]
 8001fe8:	4613      	mov	r3, r2
 8001fea:	009b      	lsls	r3, r3, #2
 8001fec:	4413      	add	r3, r2
 8001fee:	00db      	lsls	r3, r3, #3
 8001ff0:	440b      	add	r3, r1
 8001ff2:	335d      	adds	r3, #93	; 0x5d
 8001ff4:	781b      	ldrb	r3, [r3, #0]
 8001ff6:	2b06      	cmp	r3, #6
 8001ff8:	d00a      	beq.n	8002010 <HCD_HC_IN_IRQHandler+0x444>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8001ffa:	6879      	ldr	r1, [r7, #4]
 8001ffc:	68fa      	ldr	r2, [r7, #12]
 8001ffe:	4613      	mov	r3, r2
 8002000:	009b      	lsls	r3, r3, #2
 8002002:	4413      	add	r3, r2
 8002004:	00db      	lsls	r3, r3, #3
 8002006:	440b      	add	r3, r1
 8002008:	335d      	adds	r3, #93	; 0x5d
 800200a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800200c:	2b08      	cmp	r3, #8
 800200e:	d156      	bne.n	80020be <HCD_HC_IN_IRQHandler+0x4f2>
      hhcd->hc[ch_num].ErrCnt++;
 8002010:	6879      	ldr	r1, [r7, #4]
 8002012:	68fa      	ldr	r2, [r7, #12]
 8002014:	4613      	mov	r3, r2
 8002016:	009b      	lsls	r3, r3, #2
 8002018:	4413      	add	r3, r2
 800201a:	00db      	lsls	r3, r3, #3
 800201c:	440b      	add	r3, r1
 800201e:	3358      	adds	r3, #88	; 0x58
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	1c59      	adds	r1, r3, #1
 8002024:	6878      	ldr	r0, [r7, #4]
 8002026:	68fa      	ldr	r2, [r7, #12]
 8002028:	4613      	mov	r3, r2
 800202a:	009b      	lsls	r3, r3, #2
 800202c:	4413      	add	r3, r2
 800202e:	00db      	lsls	r3, r3, #3
 8002030:	4403      	add	r3, r0
 8002032:	3358      	adds	r3, #88	; 0x58
 8002034:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8002036:	6879      	ldr	r1, [r7, #4]
 8002038:	68fa      	ldr	r2, [r7, #12]
 800203a:	4613      	mov	r3, r2
 800203c:	009b      	lsls	r3, r3, #2
 800203e:	4413      	add	r3, r2
 8002040:	00db      	lsls	r3, r3, #3
 8002042:	440b      	add	r3, r1
 8002044:	3358      	adds	r3, #88	; 0x58
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	2b03      	cmp	r3, #3
 800204a:	d914      	bls.n	8002076 <HCD_HC_IN_IRQHandler+0x4aa>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800204c:	6879      	ldr	r1, [r7, #4]
 800204e:	68fa      	ldr	r2, [r7, #12]
 8002050:	4613      	mov	r3, r2
 8002052:	009b      	lsls	r3, r3, #2
 8002054:	4413      	add	r3, r2
 8002056:	00db      	lsls	r3, r3, #3
 8002058:	440b      	add	r3, r1
 800205a:	3358      	adds	r3, #88	; 0x58
 800205c:	2200      	movs	r2, #0
 800205e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002060:	6879      	ldr	r1, [r7, #4]
 8002062:	68fa      	ldr	r2, [r7, #12]
 8002064:	4613      	mov	r3, r2
 8002066:	009b      	lsls	r3, r3, #2
 8002068:	4413      	add	r3, r2
 800206a:	00db      	lsls	r3, r3, #3
 800206c:	440b      	add	r3, r1
 800206e:	335c      	adds	r3, #92	; 0x5c
 8002070:	2204      	movs	r2, #4
 8002072:	701a      	strb	r2, [r3, #0]
 8002074:	e009      	b.n	800208a <HCD_HC_IN_IRQHandler+0x4be>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002076:	6879      	ldr	r1, [r7, #4]
 8002078:	68fa      	ldr	r2, [r7, #12]
 800207a:	4613      	mov	r3, r2
 800207c:	009b      	lsls	r3, r3, #2
 800207e:	4413      	add	r3, r2
 8002080:	00db      	lsls	r3, r3, #3
 8002082:	440b      	add	r3, r1
 8002084:	335c      	adds	r3, #92	; 0x5c
 8002086:	2202      	movs	r2, #2
 8002088:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	015a      	lsls	r2, r3, #5
 800208e:	693b      	ldr	r3, [r7, #16]
 8002090:	4413      	add	r3, r2
 8002092:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800209a:	68bb      	ldr	r3, [r7, #8]
 800209c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80020a0:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80020a2:	68bb      	ldr	r3, [r7, #8]
 80020a4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80020a8:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	015a      	lsls	r2, r3, #5
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	4413      	add	r3, r2
 80020b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020b6:	461a      	mov	r2, r3
 80020b8:	68bb      	ldr	r3, [r7, #8]
 80020ba:	6013      	str	r3, [r2, #0]
 80020bc:	e02d      	b.n	800211a <HCD_HC_IN_IRQHandler+0x54e>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80020be:	6879      	ldr	r1, [r7, #4]
 80020c0:	68fa      	ldr	r2, [r7, #12]
 80020c2:	4613      	mov	r3, r2
 80020c4:	009b      	lsls	r3, r3, #2
 80020c6:	4413      	add	r3, r2
 80020c8:	00db      	lsls	r3, r3, #3
 80020ca:	440b      	add	r3, r1
 80020cc:	335d      	adds	r3, #93	; 0x5d
 80020ce:	781b      	ldrb	r3, [r3, #0]
 80020d0:	2b03      	cmp	r3, #3
 80020d2:	d122      	bne.n	800211a <HCD_HC_IN_IRQHandler+0x54e>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80020d4:	6879      	ldr	r1, [r7, #4]
 80020d6:	68fa      	ldr	r2, [r7, #12]
 80020d8:	4613      	mov	r3, r2
 80020da:	009b      	lsls	r3, r3, #2
 80020dc:	4413      	add	r3, r2
 80020de:	00db      	lsls	r3, r3, #3
 80020e0:	440b      	add	r3, r1
 80020e2:	335c      	adds	r3, #92	; 0x5c
 80020e4:	2202      	movs	r2, #2
 80020e6:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	015a      	lsls	r2, r3, #5
 80020ec:	693b      	ldr	r3, [r7, #16]
 80020ee:	4413      	add	r3, r2
 80020f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80020f8:	68bb      	ldr	r3, [r7, #8]
 80020fa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80020fe:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002106:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	015a      	lsls	r2, r3, #5
 800210c:	693b      	ldr	r3, [r7, #16]
 800210e:	4413      	add	r3, r2
 8002110:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002114:	461a      	mov	r2, r3
 8002116:	68bb      	ldr	r3, [r7, #8]
 8002118:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	015a      	lsls	r2, r3, #5
 800211e:	693b      	ldr	r3, [r7, #16]
 8002120:	4413      	add	r3, r2
 8002122:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002126:	461a      	mov	r2, r3
 8002128:	2302      	movs	r3, #2
 800212a:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	b2d8      	uxtb	r0, r3
 8002130:	6879      	ldr	r1, [r7, #4]
 8002132:	68fa      	ldr	r2, [r7, #12]
 8002134:	4613      	mov	r3, r2
 8002136:	009b      	lsls	r3, r3, #2
 8002138:	4413      	add	r3, r2
 800213a:	00db      	lsls	r3, r3, #3
 800213c:	440b      	add	r3, r1
 800213e:	335c      	adds	r3, #92	; 0x5c
 8002140:	781b      	ldrb	r3, [r3, #0]
 8002142:	461a      	mov	r2, r3
 8002144:	4601      	mov	r1, r0
 8002146:	6878      	ldr	r0, [r7, #4]
 8002148:	f008 faa8 	bl	800a69c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800214c:	e0d1      	b.n	80022f2 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	015a      	lsls	r2, r3, #5
 8002152:	693b      	ldr	r3, [r7, #16]
 8002154:	4413      	add	r3, r2
 8002156:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800215a:	689b      	ldr	r3, [r3, #8]
 800215c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002160:	2b80      	cmp	r3, #128	; 0x80
 8002162:	d13e      	bne.n	80021e2 <HCD_HC_IN_IRQHandler+0x616>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	015a      	lsls	r2, r3, #5
 8002168:	693b      	ldr	r3, [r7, #16]
 800216a:	4413      	add	r3, r2
 800216c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002170:	68db      	ldr	r3, [r3, #12]
 8002172:	68fa      	ldr	r2, [r7, #12]
 8002174:	0151      	lsls	r1, r2, #5
 8002176:	693a      	ldr	r2, [r7, #16]
 8002178:	440a      	add	r2, r1
 800217a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800217e:	f043 0302 	orr.w	r3, r3, #2
 8002182:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8002184:	6879      	ldr	r1, [r7, #4]
 8002186:	68fa      	ldr	r2, [r7, #12]
 8002188:	4613      	mov	r3, r2
 800218a:	009b      	lsls	r3, r3, #2
 800218c:	4413      	add	r3, r2
 800218e:	00db      	lsls	r3, r3, #3
 8002190:	440b      	add	r3, r1
 8002192:	3358      	adds	r3, #88	; 0x58
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	1c59      	adds	r1, r3, #1
 8002198:	6878      	ldr	r0, [r7, #4]
 800219a:	68fa      	ldr	r2, [r7, #12]
 800219c:	4613      	mov	r3, r2
 800219e:	009b      	lsls	r3, r3, #2
 80021a0:	4413      	add	r3, r2
 80021a2:	00db      	lsls	r3, r3, #3
 80021a4:	4403      	add	r3, r0
 80021a6:	3358      	adds	r3, #88	; 0x58
 80021a8:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80021aa:	6879      	ldr	r1, [r7, #4]
 80021ac:	68fa      	ldr	r2, [r7, #12]
 80021ae:	4613      	mov	r3, r2
 80021b0:	009b      	lsls	r3, r3, #2
 80021b2:	4413      	add	r3, r2
 80021b4:	00db      	lsls	r3, r3, #3
 80021b6:	440b      	add	r3, r1
 80021b8:	335d      	adds	r3, #93	; 0x5d
 80021ba:	2206      	movs	r2, #6
 80021bc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	68fa      	ldr	r2, [r7, #12]
 80021c4:	b2d2      	uxtb	r2, r2
 80021c6:	4611      	mov	r1, r2
 80021c8:	4618      	mov	r0, r3
 80021ca:	f002 fe9a 	bl	8004f02 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	015a      	lsls	r2, r3, #5
 80021d2:	693b      	ldr	r3, [r7, #16]
 80021d4:	4413      	add	r3, r2
 80021d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021da:	461a      	mov	r2, r3
 80021dc:	2380      	movs	r3, #128	; 0x80
 80021de:	6093      	str	r3, [r2, #8]
}
 80021e0:	e087      	b.n	80022f2 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	015a      	lsls	r2, r3, #5
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	4413      	add	r3, r2
 80021ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021ee:	689b      	ldr	r3, [r3, #8]
 80021f0:	f003 0310 	and.w	r3, r3, #16
 80021f4:	2b10      	cmp	r3, #16
 80021f6:	d17c      	bne.n	80022f2 <HCD_HC_IN_IRQHandler+0x726>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80021f8:	6879      	ldr	r1, [r7, #4]
 80021fa:	68fa      	ldr	r2, [r7, #12]
 80021fc:	4613      	mov	r3, r2
 80021fe:	009b      	lsls	r3, r3, #2
 8002200:	4413      	add	r3, r2
 8002202:	00db      	lsls	r3, r3, #3
 8002204:	440b      	add	r3, r1
 8002206:	333f      	adds	r3, #63	; 0x3f
 8002208:	781b      	ldrb	r3, [r3, #0]
 800220a:	2b03      	cmp	r3, #3
 800220c:	d122      	bne.n	8002254 <HCD_HC_IN_IRQHandler+0x688>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800220e:	6879      	ldr	r1, [r7, #4]
 8002210:	68fa      	ldr	r2, [r7, #12]
 8002212:	4613      	mov	r3, r2
 8002214:	009b      	lsls	r3, r3, #2
 8002216:	4413      	add	r3, r2
 8002218:	00db      	lsls	r3, r3, #3
 800221a:	440b      	add	r3, r1
 800221c:	3358      	adds	r3, #88	; 0x58
 800221e:	2200      	movs	r2, #0
 8002220:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	015a      	lsls	r2, r3, #5
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	4413      	add	r3, r2
 800222a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800222e:	68db      	ldr	r3, [r3, #12]
 8002230:	68fa      	ldr	r2, [r7, #12]
 8002232:	0151      	lsls	r1, r2, #5
 8002234:	693a      	ldr	r2, [r7, #16]
 8002236:	440a      	add	r2, r1
 8002238:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800223c:	f043 0302 	orr.w	r3, r3, #2
 8002240:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	68fa      	ldr	r2, [r7, #12]
 8002248:	b2d2      	uxtb	r2, r2
 800224a:	4611      	mov	r1, r2
 800224c:	4618      	mov	r0, r3
 800224e:	f002 fe58 	bl	8004f02 <USB_HC_Halt>
 8002252:	e045      	b.n	80022e0 <HCD_HC_IN_IRQHandler+0x714>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002254:	6879      	ldr	r1, [r7, #4]
 8002256:	68fa      	ldr	r2, [r7, #12]
 8002258:	4613      	mov	r3, r2
 800225a:	009b      	lsls	r3, r3, #2
 800225c:	4413      	add	r3, r2
 800225e:	00db      	lsls	r3, r3, #3
 8002260:	440b      	add	r3, r1
 8002262:	333f      	adds	r3, #63	; 0x3f
 8002264:	781b      	ldrb	r3, [r3, #0]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d00a      	beq.n	8002280 <HCD_HC_IN_IRQHandler+0x6b4>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800226a:	6879      	ldr	r1, [r7, #4]
 800226c:	68fa      	ldr	r2, [r7, #12]
 800226e:	4613      	mov	r3, r2
 8002270:	009b      	lsls	r3, r3, #2
 8002272:	4413      	add	r3, r2
 8002274:	00db      	lsls	r3, r3, #3
 8002276:	440b      	add	r3, r1
 8002278:	333f      	adds	r3, #63	; 0x3f
 800227a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800227c:	2b02      	cmp	r3, #2
 800227e:	d12f      	bne.n	80022e0 <HCD_HC_IN_IRQHandler+0x714>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002280:	6879      	ldr	r1, [r7, #4]
 8002282:	68fa      	ldr	r2, [r7, #12]
 8002284:	4613      	mov	r3, r2
 8002286:	009b      	lsls	r3, r3, #2
 8002288:	4413      	add	r3, r2
 800228a:	00db      	lsls	r3, r3, #3
 800228c:	440b      	add	r3, r1
 800228e:	3358      	adds	r3, #88	; 0x58
 8002290:	2200      	movs	r2, #0
 8002292:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	691b      	ldr	r3, [r3, #16]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d121      	bne.n	80022e0 <HCD_HC_IN_IRQHandler+0x714>
        hhcd->hc[ch_num].state = HC_NAK;
 800229c:	6879      	ldr	r1, [r7, #4]
 800229e:	68fa      	ldr	r2, [r7, #12]
 80022a0:	4613      	mov	r3, r2
 80022a2:	009b      	lsls	r3, r3, #2
 80022a4:	4413      	add	r3, r2
 80022a6:	00db      	lsls	r3, r3, #3
 80022a8:	440b      	add	r3, r1
 80022aa:	335d      	adds	r3, #93	; 0x5d
 80022ac:	2203      	movs	r2, #3
 80022ae:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	015a      	lsls	r2, r3, #5
 80022b4:	693b      	ldr	r3, [r7, #16]
 80022b6:	4413      	add	r3, r2
 80022b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022bc:	68db      	ldr	r3, [r3, #12]
 80022be:	68fa      	ldr	r2, [r7, #12]
 80022c0:	0151      	lsls	r1, r2, #5
 80022c2:	693a      	ldr	r2, [r7, #16]
 80022c4:	440a      	add	r2, r1
 80022c6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80022ca:	f043 0302 	orr.w	r3, r3, #2
 80022ce:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	68fa      	ldr	r2, [r7, #12]
 80022d6:	b2d2      	uxtb	r2, r2
 80022d8:	4611      	mov	r1, r2
 80022da:	4618      	mov	r0, r3
 80022dc:	f002 fe11 	bl	8004f02 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	015a      	lsls	r2, r3, #5
 80022e4:	693b      	ldr	r3, [r7, #16]
 80022e6:	4413      	add	r3, r2
 80022e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022ec:	461a      	mov	r2, r3
 80022ee:	2310      	movs	r3, #16
 80022f0:	6093      	str	r3, [r2, #8]
}
 80022f2:	bf00      	nop
 80022f4:	3718      	adds	r7, #24
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}

080022fa <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80022fa:	b580      	push	{r7, lr}
 80022fc:	b086      	sub	sp, #24
 80022fe:	af00      	add	r7, sp, #0
 8002300:	6078      	str	r0, [r7, #4]
 8002302:	460b      	mov	r3, r1
 8002304:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002310:	78fb      	ldrb	r3, [r7, #3]
 8002312:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	015a      	lsls	r2, r3, #5
 8002318:	693b      	ldr	r3, [r7, #16]
 800231a:	4413      	add	r3, r2
 800231c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002320:	689b      	ldr	r3, [r3, #8]
 8002322:	f003 0304 	and.w	r3, r3, #4
 8002326:	2b04      	cmp	r3, #4
 8002328:	d119      	bne.n	800235e <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	015a      	lsls	r2, r3, #5
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	4413      	add	r3, r2
 8002332:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002336:	461a      	mov	r2, r3
 8002338:	2304      	movs	r3, #4
 800233a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	015a      	lsls	r2, r3, #5
 8002340:	693b      	ldr	r3, [r7, #16]
 8002342:	4413      	add	r3, r2
 8002344:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002348:	68db      	ldr	r3, [r3, #12]
 800234a:	68fa      	ldr	r2, [r7, #12]
 800234c:	0151      	lsls	r1, r2, #5
 800234e:	693a      	ldr	r2, [r7, #16]
 8002350:	440a      	add	r2, r1
 8002352:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002356:	f043 0302 	orr.w	r3, r3, #2
 800235a:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 800235c:	e33e      	b.n	80029dc <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	015a      	lsls	r2, r3, #5
 8002362:	693b      	ldr	r3, [r7, #16]
 8002364:	4413      	add	r3, r2
 8002366:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800236a:	689b      	ldr	r3, [r3, #8]
 800236c:	f003 0320 	and.w	r3, r3, #32
 8002370:	2b20      	cmp	r3, #32
 8002372:	d141      	bne.n	80023f8 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	015a      	lsls	r2, r3, #5
 8002378:	693b      	ldr	r3, [r7, #16]
 800237a:	4413      	add	r3, r2
 800237c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002380:	461a      	mov	r2, r3
 8002382:	2320      	movs	r3, #32
 8002384:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002386:	6879      	ldr	r1, [r7, #4]
 8002388:	68fa      	ldr	r2, [r7, #12]
 800238a:	4613      	mov	r3, r2
 800238c:	009b      	lsls	r3, r3, #2
 800238e:	4413      	add	r3, r2
 8002390:	00db      	lsls	r3, r3, #3
 8002392:	440b      	add	r3, r1
 8002394:	333d      	adds	r3, #61	; 0x3d
 8002396:	781b      	ldrb	r3, [r3, #0]
 8002398:	2b01      	cmp	r3, #1
 800239a:	f040 831f 	bne.w	80029dc <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 800239e:	6879      	ldr	r1, [r7, #4]
 80023a0:	68fa      	ldr	r2, [r7, #12]
 80023a2:	4613      	mov	r3, r2
 80023a4:	009b      	lsls	r3, r3, #2
 80023a6:	4413      	add	r3, r2
 80023a8:	00db      	lsls	r3, r3, #3
 80023aa:	440b      	add	r3, r1
 80023ac:	333d      	adds	r3, #61	; 0x3d
 80023ae:	2200      	movs	r2, #0
 80023b0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80023b2:	6879      	ldr	r1, [r7, #4]
 80023b4:	68fa      	ldr	r2, [r7, #12]
 80023b6:	4613      	mov	r3, r2
 80023b8:	009b      	lsls	r3, r3, #2
 80023ba:	4413      	add	r3, r2
 80023bc:	00db      	lsls	r3, r3, #3
 80023be:	440b      	add	r3, r1
 80023c0:	335c      	adds	r3, #92	; 0x5c
 80023c2:	2202      	movs	r2, #2
 80023c4:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	015a      	lsls	r2, r3, #5
 80023ca:	693b      	ldr	r3, [r7, #16]
 80023cc:	4413      	add	r3, r2
 80023ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023d2:	68db      	ldr	r3, [r3, #12]
 80023d4:	68fa      	ldr	r2, [r7, #12]
 80023d6:	0151      	lsls	r1, r2, #5
 80023d8:	693a      	ldr	r2, [r7, #16]
 80023da:	440a      	add	r2, r1
 80023dc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80023e0:	f043 0302 	orr.w	r3, r3, #2
 80023e4:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	68fa      	ldr	r2, [r7, #12]
 80023ec:	b2d2      	uxtb	r2, r2
 80023ee:	4611      	mov	r1, r2
 80023f0:	4618      	mov	r0, r3
 80023f2:	f002 fd86 	bl	8004f02 <USB_HC_Halt>
}
 80023f6:	e2f1      	b.n	80029dc <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	015a      	lsls	r2, r3, #5
 80023fc:	693b      	ldr	r3, [r7, #16]
 80023fe:	4413      	add	r3, r2
 8002400:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800240a:	2b40      	cmp	r3, #64	; 0x40
 800240c:	d13f      	bne.n	800248e <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 800240e:	6879      	ldr	r1, [r7, #4]
 8002410:	68fa      	ldr	r2, [r7, #12]
 8002412:	4613      	mov	r3, r2
 8002414:	009b      	lsls	r3, r3, #2
 8002416:	4413      	add	r3, r2
 8002418:	00db      	lsls	r3, r3, #3
 800241a:	440b      	add	r3, r1
 800241c:	335d      	adds	r3, #93	; 0x5d
 800241e:	2204      	movs	r2, #4
 8002420:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002422:	6879      	ldr	r1, [r7, #4]
 8002424:	68fa      	ldr	r2, [r7, #12]
 8002426:	4613      	mov	r3, r2
 8002428:	009b      	lsls	r3, r3, #2
 800242a:	4413      	add	r3, r2
 800242c:	00db      	lsls	r3, r3, #3
 800242e:	440b      	add	r3, r1
 8002430:	333d      	adds	r3, #61	; 0x3d
 8002432:	2201      	movs	r2, #1
 8002434:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002436:	6879      	ldr	r1, [r7, #4]
 8002438:	68fa      	ldr	r2, [r7, #12]
 800243a:	4613      	mov	r3, r2
 800243c:	009b      	lsls	r3, r3, #2
 800243e:	4413      	add	r3, r2
 8002440:	00db      	lsls	r3, r3, #3
 8002442:	440b      	add	r3, r1
 8002444:	3358      	adds	r3, #88	; 0x58
 8002446:	2200      	movs	r2, #0
 8002448:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	015a      	lsls	r2, r3, #5
 800244e:	693b      	ldr	r3, [r7, #16]
 8002450:	4413      	add	r3, r2
 8002452:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002456:	68db      	ldr	r3, [r3, #12]
 8002458:	68fa      	ldr	r2, [r7, #12]
 800245a:	0151      	lsls	r1, r2, #5
 800245c:	693a      	ldr	r2, [r7, #16]
 800245e:	440a      	add	r2, r1
 8002460:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002464:	f043 0302 	orr.w	r3, r3, #2
 8002468:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	68fa      	ldr	r2, [r7, #12]
 8002470:	b2d2      	uxtb	r2, r2
 8002472:	4611      	mov	r1, r2
 8002474:	4618      	mov	r0, r3
 8002476:	f002 fd44 	bl	8004f02 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	015a      	lsls	r2, r3, #5
 800247e:	693b      	ldr	r3, [r7, #16]
 8002480:	4413      	add	r3, r2
 8002482:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002486:	461a      	mov	r2, r3
 8002488:	2340      	movs	r3, #64	; 0x40
 800248a:	6093      	str	r3, [r2, #8]
}
 800248c:	e2a6      	b.n	80029dc <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	015a      	lsls	r2, r3, #5
 8002492:	693b      	ldr	r3, [r7, #16]
 8002494:	4413      	add	r3, r2
 8002496:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80024a4:	d122      	bne.n	80024ec <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	015a      	lsls	r2, r3, #5
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	4413      	add	r3, r2
 80024ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024b2:	68db      	ldr	r3, [r3, #12]
 80024b4:	68fa      	ldr	r2, [r7, #12]
 80024b6:	0151      	lsls	r1, r2, #5
 80024b8:	693a      	ldr	r2, [r7, #16]
 80024ba:	440a      	add	r2, r1
 80024bc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80024c0:	f043 0302 	orr.w	r3, r3, #2
 80024c4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	68fa      	ldr	r2, [r7, #12]
 80024cc:	b2d2      	uxtb	r2, r2
 80024ce:	4611      	mov	r1, r2
 80024d0:	4618      	mov	r0, r3
 80024d2:	f002 fd16 	bl	8004f02 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	015a      	lsls	r2, r3, #5
 80024da:	693b      	ldr	r3, [r7, #16]
 80024dc:	4413      	add	r3, r2
 80024de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024e2:	461a      	mov	r2, r3
 80024e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80024e8:	6093      	str	r3, [r2, #8]
}
 80024ea:	e277      	b.n	80029dc <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	015a      	lsls	r2, r3, #5
 80024f0:	693b      	ldr	r3, [r7, #16]
 80024f2:	4413      	add	r3, r2
 80024f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024f8:	689b      	ldr	r3, [r3, #8]
 80024fa:	f003 0301 	and.w	r3, r3, #1
 80024fe:	2b01      	cmp	r3, #1
 8002500:	d135      	bne.n	800256e <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002502:	6879      	ldr	r1, [r7, #4]
 8002504:	68fa      	ldr	r2, [r7, #12]
 8002506:	4613      	mov	r3, r2
 8002508:	009b      	lsls	r3, r3, #2
 800250a:	4413      	add	r3, r2
 800250c:	00db      	lsls	r3, r3, #3
 800250e:	440b      	add	r3, r1
 8002510:	3358      	adds	r3, #88	; 0x58
 8002512:	2200      	movs	r2, #0
 8002514:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	015a      	lsls	r2, r3, #5
 800251a:	693b      	ldr	r3, [r7, #16]
 800251c:	4413      	add	r3, r2
 800251e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002522:	68db      	ldr	r3, [r3, #12]
 8002524:	68fa      	ldr	r2, [r7, #12]
 8002526:	0151      	lsls	r1, r2, #5
 8002528:	693a      	ldr	r2, [r7, #16]
 800252a:	440a      	add	r2, r1
 800252c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002530:	f043 0302 	orr.w	r3, r3, #2
 8002534:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	68fa      	ldr	r2, [r7, #12]
 800253c:	b2d2      	uxtb	r2, r2
 800253e:	4611      	mov	r1, r2
 8002540:	4618      	mov	r0, r3
 8002542:	f002 fcde 	bl	8004f02 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	015a      	lsls	r2, r3, #5
 800254a:	693b      	ldr	r3, [r7, #16]
 800254c:	4413      	add	r3, r2
 800254e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002552:	461a      	mov	r2, r3
 8002554:	2301      	movs	r3, #1
 8002556:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002558:	6879      	ldr	r1, [r7, #4]
 800255a:	68fa      	ldr	r2, [r7, #12]
 800255c:	4613      	mov	r3, r2
 800255e:	009b      	lsls	r3, r3, #2
 8002560:	4413      	add	r3, r2
 8002562:	00db      	lsls	r3, r3, #3
 8002564:	440b      	add	r3, r1
 8002566:	335d      	adds	r3, #93	; 0x5d
 8002568:	2201      	movs	r2, #1
 800256a:	701a      	strb	r2, [r3, #0]
}
 800256c:	e236      	b.n	80029dc <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	015a      	lsls	r2, r3, #5
 8002572:	693b      	ldr	r3, [r7, #16]
 8002574:	4413      	add	r3, r2
 8002576:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800257a:	689b      	ldr	r3, [r3, #8]
 800257c:	f003 0308 	and.w	r3, r3, #8
 8002580:	2b08      	cmp	r3, #8
 8002582:	d12b      	bne.n	80025dc <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	015a      	lsls	r2, r3, #5
 8002588:	693b      	ldr	r3, [r7, #16]
 800258a:	4413      	add	r3, r2
 800258c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002590:	461a      	mov	r2, r3
 8002592:	2308      	movs	r3, #8
 8002594:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	015a      	lsls	r2, r3, #5
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	4413      	add	r3, r2
 800259e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025a2:	68db      	ldr	r3, [r3, #12]
 80025a4:	68fa      	ldr	r2, [r7, #12]
 80025a6:	0151      	lsls	r1, r2, #5
 80025a8:	693a      	ldr	r2, [r7, #16]
 80025aa:	440a      	add	r2, r1
 80025ac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80025b0:	f043 0302 	orr.w	r3, r3, #2
 80025b4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	68fa      	ldr	r2, [r7, #12]
 80025bc:	b2d2      	uxtb	r2, r2
 80025be:	4611      	mov	r1, r2
 80025c0:	4618      	mov	r0, r3
 80025c2:	f002 fc9e 	bl	8004f02 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 80025c6:	6879      	ldr	r1, [r7, #4]
 80025c8:	68fa      	ldr	r2, [r7, #12]
 80025ca:	4613      	mov	r3, r2
 80025cc:	009b      	lsls	r3, r3, #2
 80025ce:	4413      	add	r3, r2
 80025d0:	00db      	lsls	r3, r3, #3
 80025d2:	440b      	add	r3, r1
 80025d4:	335d      	adds	r3, #93	; 0x5d
 80025d6:	2205      	movs	r2, #5
 80025d8:	701a      	strb	r2, [r3, #0]
}
 80025da:	e1ff      	b.n	80029dc <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	015a      	lsls	r2, r3, #5
 80025e0:	693b      	ldr	r3, [r7, #16]
 80025e2:	4413      	add	r3, r2
 80025e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025e8:	689b      	ldr	r3, [r3, #8]
 80025ea:	f003 0310 	and.w	r3, r3, #16
 80025ee:	2b10      	cmp	r3, #16
 80025f0:	d155      	bne.n	800269e <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80025f2:	6879      	ldr	r1, [r7, #4]
 80025f4:	68fa      	ldr	r2, [r7, #12]
 80025f6:	4613      	mov	r3, r2
 80025f8:	009b      	lsls	r3, r3, #2
 80025fa:	4413      	add	r3, r2
 80025fc:	00db      	lsls	r3, r3, #3
 80025fe:	440b      	add	r3, r1
 8002600:	3358      	adds	r3, #88	; 0x58
 8002602:	2200      	movs	r2, #0
 8002604:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002606:	6879      	ldr	r1, [r7, #4]
 8002608:	68fa      	ldr	r2, [r7, #12]
 800260a:	4613      	mov	r3, r2
 800260c:	009b      	lsls	r3, r3, #2
 800260e:	4413      	add	r3, r2
 8002610:	00db      	lsls	r3, r3, #3
 8002612:	440b      	add	r3, r1
 8002614:	335d      	adds	r3, #93	; 0x5d
 8002616:	2203      	movs	r2, #3
 8002618:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 800261a:	6879      	ldr	r1, [r7, #4]
 800261c:	68fa      	ldr	r2, [r7, #12]
 800261e:	4613      	mov	r3, r2
 8002620:	009b      	lsls	r3, r3, #2
 8002622:	4413      	add	r3, r2
 8002624:	00db      	lsls	r3, r3, #3
 8002626:	440b      	add	r3, r1
 8002628:	333d      	adds	r3, #61	; 0x3d
 800262a:	781b      	ldrb	r3, [r3, #0]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d114      	bne.n	800265a <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8002630:	6879      	ldr	r1, [r7, #4]
 8002632:	68fa      	ldr	r2, [r7, #12]
 8002634:	4613      	mov	r3, r2
 8002636:	009b      	lsls	r3, r3, #2
 8002638:	4413      	add	r3, r2
 800263a:	00db      	lsls	r3, r3, #3
 800263c:	440b      	add	r3, r1
 800263e:	333c      	adds	r3, #60	; 0x3c
 8002640:	781b      	ldrb	r3, [r3, #0]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d109      	bne.n	800265a <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 8002646:	6879      	ldr	r1, [r7, #4]
 8002648:	68fa      	ldr	r2, [r7, #12]
 800264a:	4613      	mov	r3, r2
 800264c:	009b      	lsls	r3, r3, #2
 800264e:	4413      	add	r3, r2
 8002650:	00db      	lsls	r3, r3, #3
 8002652:	440b      	add	r3, r1
 8002654:	333d      	adds	r3, #61	; 0x3d
 8002656:	2201      	movs	r2, #1
 8002658:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	015a      	lsls	r2, r3, #5
 800265e:	693b      	ldr	r3, [r7, #16]
 8002660:	4413      	add	r3, r2
 8002662:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002666:	68db      	ldr	r3, [r3, #12]
 8002668:	68fa      	ldr	r2, [r7, #12]
 800266a:	0151      	lsls	r1, r2, #5
 800266c:	693a      	ldr	r2, [r7, #16]
 800266e:	440a      	add	r2, r1
 8002670:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002674:	f043 0302 	orr.w	r3, r3, #2
 8002678:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	68fa      	ldr	r2, [r7, #12]
 8002680:	b2d2      	uxtb	r2, r2
 8002682:	4611      	mov	r1, r2
 8002684:	4618      	mov	r0, r3
 8002686:	f002 fc3c 	bl	8004f02 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	015a      	lsls	r2, r3, #5
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	4413      	add	r3, r2
 8002692:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002696:	461a      	mov	r2, r3
 8002698:	2310      	movs	r3, #16
 800269a:	6093      	str	r3, [r2, #8]
}
 800269c:	e19e      	b.n	80029dc <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	015a      	lsls	r2, r3, #5
 80026a2:	693b      	ldr	r3, [r7, #16]
 80026a4:	4413      	add	r3, r2
 80026a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026aa:	689b      	ldr	r3, [r3, #8]
 80026ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026b0:	2b80      	cmp	r3, #128	; 0x80
 80026b2:	d12b      	bne.n	800270c <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	015a      	lsls	r2, r3, #5
 80026b8:	693b      	ldr	r3, [r7, #16]
 80026ba:	4413      	add	r3, r2
 80026bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026c0:	68db      	ldr	r3, [r3, #12]
 80026c2:	68fa      	ldr	r2, [r7, #12]
 80026c4:	0151      	lsls	r1, r2, #5
 80026c6:	693a      	ldr	r2, [r7, #16]
 80026c8:	440a      	add	r2, r1
 80026ca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80026ce:	f043 0302 	orr.w	r3, r3, #2
 80026d2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	68fa      	ldr	r2, [r7, #12]
 80026da:	b2d2      	uxtb	r2, r2
 80026dc:	4611      	mov	r1, r2
 80026de:	4618      	mov	r0, r3
 80026e0:	f002 fc0f 	bl	8004f02 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 80026e4:	6879      	ldr	r1, [r7, #4]
 80026e6:	68fa      	ldr	r2, [r7, #12]
 80026e8:	4613      	mov	r3, r2
 80026ea:	009b      	lsls	r3, r3, #2
 80026ec:	4413      	add	r3, r2
 80026ee:	00db      	lsls	r3, r3, #3
 80026f0:	440b      	add	r3, r1
 80026f2:	335d      	adds	r3, #93	; 0x5d
 80026f4:	2206      	movs	r2, #6
 80026f6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	015a      	lsls	r2, r3, #5
 80026fc:	693b      	ldr	r3, [r7, #16]
 80026fe:	4413      	add	r3, r2
 8002700:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002704:	461a      	mov	r2, r3
 8002706:	2380      	movs	r3, #128	; 0x80
 8002708:	6093      	str	r3, [r2, #8]
}
 800270a:	e167      	b.n	80029dc <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	015a      	lsls	r2, r3, #5
 8002710:	693b      	ldr	r3, [r7, #16]
 8002712:	4413      	add	r3, r2
 8002714:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002718:	689b      	ldr	r3, [r3, #8]
 800271a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800271e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002722:	d135      	bne.n	8002790 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	015a      	lsls	r2, r3, #5
 8002728:	693b      	ldr	r3, [r7, #16]
 800272a:	4413      	add	r3, r2
 800272c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002730:	68db      	ldr	r3, [r3, #12]
 8002732:	68fa      	ldr	r2, [r7, #12]
 8002734:	0151      	lsls	r1, r2, #5
 8002736:	693a      	ldr	r2, [r7, #16]
 8002738:	440a      	add	r2, r1
 800273a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800273e:	f043 0302 	orr.w	r3, r3, #2
 8002742:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	68fa      	ldr	r2, [r7, #12]
 800274a:	b2d2      	uxtb	r2, r2
 800274c:	4611      	mov	r1, r2
 800274e:	4618      	mov	r0, r3
 8002750:	f002 fbd7 	bl	8004f02 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	015a      	lsls	r2, r3, #5
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	4413      	add	r3, r2
 800275c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002760:	461a      	mov	r2, r3
 8002762:	2310      	movs	r3, #16
 8002764:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	015a      	lsls	r2, r3, #5
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	4413      	add	r3, r2
 800276e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002772:	461a      	mov	r2, r3
 8002774:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002778:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800277a:	6879      	ldr	r1, [r7, #4]
 800277c:	68fa      	ldr	r2, [r7, #12]
 800277e:	4613      	mov	r3, r2
 8002780:	009b      	lsls	r3, r3, #2
 8002782:	4413      	add	r3, r2
 8002784:	00db      	lsls	r3, r3, #3
 8002786:	440b      	add	r3, r1
 8002788:	335d      	adds	r3, #93	; 0x5d
 800278a:	2208      	movs	r2, #8
 800278c:	701a      	strb	r2, [r3, #0]
}
 800278e:	e125      	b.n	80029dc <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	015a      	lsls	r2, r3, #5
 8002794:	693b      	ldr	r3, [r7, #16]
 8002796:	4413      	add	r3, r2
 8002798:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800279c:	689b      	ldr	r3, [r3, #8]
 800279e:	f003 0302 	and.w	r3, r3, #2
 80027a2:	2b02      	cmp	r3, #2
 80027a4:	f040 811a 	bne.w	80029dc <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	015a      	lsls	r2, r3, #5
 80027ac:	693b      	ldr	r3, [r7, #16]
 80027ae:	4413      	add	r3, r2
 80027b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027b4:	68db      	ldr	r3, [r3, #12]
 80027b6:	68fa      	ldr	r2, [r7, #12]
 80027b8:	0151      	lsls	r1, r2, #5
 80027ba:	693a      	ldr	r2, [r7, #16]
 80027bc:	440a      	add	r2, r1
 80027be:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80027c2:	f023 0302 	bic.w	r3, r3, #2
 80027c6:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80027c8:	6879      	ldr	r1, [r7, #4]
 80027ca:	68fa      	ldr	r2, [r7, #12]
 80027cc:	4613      	mov	r3, r2
 80027ce:	009b      	lsls	r3, r3, #2
 80027d0:	4413      	add	r3, r2
 80027d2:	00db      	lsls	r3, r3, #3
 80027d4:	440b      	add	r3, r1
 80027d6:	335d      	adds	r3, #93	; 0x5d
 80027d8:	781b      	ldrb	r3, [r3, #0]
 80027da:	2b01      	cmp	r3, #1
 80027dc:	d137      	bne.n	800284e <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80027de:	6879      	ldr	r1, [r7, #4]
 80027e0:	68fa      	ldr	r2, [r7, #12]
 80027e2:	4613      	mov	r3, r2
 80027e4:	009b      	lsls	r3, r3, #2
 80027e6:	4413      	add	r3, r2
 80027e8:	00db      	lsls	r3, r3, #3
 80027ea:	440b      	add	r3, r1
 80027ec:	335c      	adds	r3, #92	; 0x5c
 80027ee:	2201      	movs	r2, #1
 80027f0:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80027f2:	6879      	ldr	r1, [r7, #4]
 80027f4:	68fa      	ldr	r2, [r7, #12]
 80027f6:	4613      	mov	r3, r2
 80027f8:	009b      	lsls	r3, r3, #2
 80027fa:	4413      	add	r3, r2
 80027fc:	00db      	lsls	r3, r3, #3
 80027fe:	440b      	add	r3, r1
 8002800:	333f      	adds	r3, #63	; 0x3f
 8002802:	781b      	ldrb	r3, [r3, #0]
 8002804:	2b02      	cmp	r3, #2
 8002806:	d00b      	beq.n	8002820 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002808:	6879      	ldr	r1, [r7, #4]
 800280a:	68fa      	ldr	r2, [r7, #12]
 800280c:	4613      	mov	r3, r2
 800280e:	009b      	lsls	r3, r3, #2
 8002810:	4413      	add	r3, r2
 8002812:	00db      	lsls	r3, r3, #3
 8002814:	440b      	add	r3, r1
 8002816:	333f      	adds	r3, #63	; 0x3f
 8002818:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800281a:	2b03      	cmp	r3, #3
 800281c:	f040 80c5 	bne.w	80029aa <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8002820:	6879      	ldr	r1, [r7, #4]
 8002822:	68fa      	ldr	r2, [r7, #12]
 8002824:	4613      	mov	r3, r2
 8002826:	009b      	lsls	r3, r3, #2
 8002828:	4413      	add	r3, r2
 800282a:	00db      	lsls	r3, r3, #3
 800282c:	440b      	add	r3, r1
 800282e:	3351      	adds	r3, #81	; 0x51
 8002830:	781b      	ldrb	r3, [r3, #0]
 8002832:	f083 0301 	eor.w	r3, r3, #1
 8002836:	b2d8      	uxtb	r0, r3
 8002838:	6879      	ldr	r1, [r7, #4]
 800283a:	68fa      	ldr	r2, [r7, #12]
 800283c:	4613      	mov	r3, r2
 800283e:	009b      	lsls	r3, r3, #2
 8002840:	4413      	add	r3, r2
 8002842:	00db      	lsls	r3, r3, #3
 8002844:	440b      	add	r3, r1
 8002846:	3351      	adds	r3, #81	; 0x51
 8002848:	4602      	mov	r2, r0
 800284a:	701a      	strb	r2, [r3, #0]
 800284c:	e0ad      	b.n	80029aa <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800284e:	6879      	ldr	r1, [r7, #4]
 8002850:	68fa      	ldr	r2, [r7, #12]
 8002852:	4613      	mov	r3, r2
 8002854:	009b      	lsls	r3, r3, #2
 8002856:	4413      	add	r3, r2
 8002858:	00db      	lsls	r3, r3, #3
 800285a:	440b      	add	r3, r1
 800285c:	335d      	adds	r3, #93	; 0x5d
 800285e:	781b      	ldrb	r3, [r3, #0]
 8002860:	2b03      	cmp	r3, #3
 8002862:	d10a      	bne.n	800287a <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002864:	6879      	ldr	r1, [r7, #4]
 8002866:	68fa      	ldr	r2, [r7, #12]
 8002868:	4613      	mov	r3, r2
 800286a:	009b      	lsls	r3, r3, #2
 800286c:	4413      	add	r3, r2
 800286e:	00db      	lsls	r3, r3, #3
 8002870:	440b      	add	r3, r1
 8002872:	335c      	adds	r3, #92	; 0x5c
 8002874:	2202      	movs	r2, #2
 8002876:	701a      	strb	r2, [r3, #0]
 8002878:	e097      	b.n	80029aa <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 800287a:	6879      	ldr	r1, [r7, #4]
 800287c:	68fa      	ldr	r2, [r7, #12]
 800287e:	4613      	mov	r3, r2
 8002880:	009b      	lsls	r3, r3, #2
 8002882:	4413      	add	r3, r2
 8002884:	00db      	lsls	r3, r3, #3
 8002886:	440b      	add	r3, r1
 8002888:	335d      	adds	r3, #93	; 0x5d
 800288a:	781b      	ldrb	r3, [r3, #0]
 800288c:	2b04      	cmp	r3, #4
 800288e:	d10a      	bne.n	80028a6 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002890:	6879      	ldr	r1, [r7, #4]
 8002892:	68fa      	ldr	r2, [r7, #12]
 8002894:	4613      	mov	r3, r2
 8002896:	009b      	lsls	r3, r3, #2
 8002898:	4413      	add	r3, r2
 800289a:	00db      	lsls	r3, r3, #3
 800289c:	440b      	add	r3, r1
 800289e:	335c      	adds	r3, #92	; 0x5c
 80028a0:	2202      	movs	r2, #2
 80028a2:	701a      	strb	r2, [r3, #0]
 80028a4:	e081      	b.n	80029aa <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80028a6:	6879      	ldr	r1, [r7, #4]
 80028a8:	68fa      	ldr	r2, [r7, #12]
 80028aa:	4613      	mov	r3, r2
 80028ac:	009b      	lsls	r3, r3, #2
 80028ae:	4413      	add	r3, r2
 80028b0:	00db      	lsls	r3, r3, #3
 80028b2:	440b      	add	r3, r1
 80028b4:	335d      	adds	r3, #93	; 0x5d
 80028b6:	781b      	ldrb	r3, [r3, #0]
 80028b8:	2b05      	cmp	r3, #5
 80028ba:	d10a      	bne.n	80028d2 <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80028bc:	6879      	ldr	r1, [r7, #4]
 80028be:	68fa      	ldr	r2, [r7, #12]
 80028c0:	4613      	mov	r3, r2
 80028c2:	009b      	lsls	r3, r3, #2
 80028c4:	4413      	add	r3, r2
 80028c6:	00db      	lsls	r3, r3, #3
 80028c8:	440b      	add	r3, r1
 80028ca:	335c      	adds	r3, #92	; 0x5c
 80028cc:	2205      	movs	r2, #5
 80028ce:	701a      	strb	r2, [r3, #0]
 80028d0:	e06b      	b.n	80029aa <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80028d2:	6879      	ldr	r1, [r7, #4]
 80028d4:	68fa      	ldr	r2, [r7, #12]
 80028d6:	4613      	mov	r3, r2
 80028d8:	009b      	lsls	r3, r3, #2
 80028da:	4413      	add	r3, r2
 80028dc:	00db      	lsls	r3, r3, #3
 80028de:	440b      	add	r3, r1
 80028e0:	335d      	adds	r3, #93	; 0x5d
 80028e2:	781b      	ldrb	r3, [r3, #0]
 80028e4:	2b06      	cmp	r3, #6
 80028e6:	d00a      	beq.n	80028fe <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80028e8:	6879      	ldr	r1, [r7, #4]
 80028ea:	68fa      	ldr	r2, [r7, #12]
 80028ec:	4613      	mov	r3, r2
 80028ee:	009b      	lsls	r3, r3, #2
 80028f0:	4413      	add	r3, r2
 80028f2:	00db      	lsls	r3, r3, #3
 80028f4:	440b      	add	r3, r1
 80028f6:	335d      	adds	r3, #93	; 0x5d
 80028f8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80028fa:	2b08      	cmp	r3, #8
 80028fc:	d155      	bne.n	80029aa <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 80028fe:	6879      	ldr	r1, [r7, #4]
 8002900:	68fa      	ldr	r2, [r7, #12]
 8002902:	4613      	mov	r3, r2
 8002904:	009b      	lsls	r3, r3, #2
 8002906:	4413      	add	r3, r2
 8002908:	00db      	lsls	r3, r3, #3
 800290a:	440b      	add	r3, r1
 800290c:	3358      	adds	r3, #88	; 0x58
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	1c59      	adds	r1, r3, #1
 8002912:	6878      	ldr	r0, [r7, #4]
 8002914:	68fa      	ldr	r2, [r7, #12]
 8002916:	4613      	mov	r3, r2
 8002918:	009b      	lsls	r3, r3, #2
 800291a:	4413      	add	r3, r2
 800291c:	00db      	lsls	r3, r3, #3
 800291e:	4403      	add	r3, r0
 8002920:	3358      	adds	r3, #88	; 0x58
 8002922:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8002924:	6879      	ldr	r1, [r7, #4]
 8002926:	68fa      	ldr	r2, [r7, #12]
 8002928:	4613      	mov	r3, r2
 800292a:	009b      	lsls	r3, r3, #2
 800292c:	4413      	add	r3, r2
 800292e:	00db      	lsls	r3, r3, #3
 8002930:	440b      	add	r3, r1
 8002932:	3358      	adds	r3, #88	; 0x58
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	2b03      	cmp	r3, #3
 8002938:	d914      	bls.n	8002964 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800293a:	6879      	ldr	r1, [r7, #4]
 800293c:	68fa      	ldr	r2, [r7, #12]
 800293e:	4613      	mov	r3, r2
 8002940:	009b      	lsls	r3, r3, #2
 8002942:	4413      	add	r3, r2
 8002944:	00db      	lsls	r3, r3, #3
 8002946:	440b      	add	r3, r1
 8002948:	3358      	adds	r3, #88	; 0x58
 800294a:	2200      	movs	r2, #0
 800294c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800294e:	6879      	ldr	r1, [r7, #4]
 8002950:	68fa      	ldr	r2, [r7, #12]
 8002952:	4613      	mov	r3, r2
 8002954:	009b      	lsls	r3, r3, #2
 8002956:	4413      	add	r3, r2
 8002958:	00db      	lsls	r3, r3, #3
 800295a:	440b      	add	r3, r1
 800295c:	335c      	adds	r3, #92	; 0x5c
 800295e:	2204      	movs	r2, #4
 8002960:	701a      	strb	r2, [r3, #0]
 8002962:	e009      	b.n	8002978 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002964:	6879      	ldr	r1, [r7, #4]
 8002966:	68fa      	ldr	r2, [r7, #12]
 8002968:	4613      	mov	r3, r2
 800296a:	009b      	lsls	r3, r3, #2
 800296c:	4413      	add	r3, r2
 800296e:	00db      	lsls	r3, r3, #3
 8002970:	440b      	add	r3, r1
 8002972:	335c      	adds	r3, #92	; 0x5c
 8002974:	2202      	movs	r2, #2
 8002976:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	015a      	lsls	r2, r3, #5
 800297c:	693b      	ldr	r3, [r7, #16]
 800297e:	4413      	add	r3, r2
 8002980:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800298e:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002990:	68bb      	ldr	r3, [r7, #8]
 8002992:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002996:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	015a      	lsls	r2, r3, #5
 800299c:	693b      	ldr	r3, [r7, #16]
 800299e:	4413      	add	r3, r2
 80029a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029a4:	461a      	mov	r2, r3
 80029a6:	68bb      	ldr	r3, [r7, #8]
 80029a8:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	015a      	lsls	r2, r3, #5
 80029ae:	693b      	ldr	r3, [r7, #16]
 80029b0:	4413      	add	r3, r2
 80029b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029b6:	461a      	mov	r2, r3
 80029b8:	2302      	movs	r3, #2
 80029ba:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	b2d8      	uxtb	r0, r3
 80029c0:	6879      	ldr	r1, [r7, #4]
 80029c2:	68fa      	ldr	r2, [r7, #12]
 80029c4:	4613      	mov	r3, r2
 80029c6:	009b      	lsls	r3, r3, #2
 80029c8:	4413      	add	r3, r2
 80029ca:	00db      	lsls	r3, r3, #3
 80029cc:	440b      	add	r3, r1
 80029ce:	335c      	adds	r3, #92	; 0x5c
 80029d0:	781b      	ldrb	r3, [r3, #0]
 80029d2:	461a      	mov	r2, r3
 80029d4:	4601      	mov	r1, r0
 80029d6:	6878      	ldr	r0, [r7, #4]
 80029d8:	f007 fe60 	bl	800a69c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80029dc:	bf00      	nop
 80029de:	3718      	adds	r7, #24
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bd80      	pop	{r7, pc}

080029e4 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b08a      	sub	sp, #40	; 0x28
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80029f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f4:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	6a1b      	ldr	r3, [r3, #32]
 80029fc:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 80029fe:	69fb      	ldr	r3, [r7, #28]
 8002a00:	f003 030f 	and.w	r3, r3, #15
 8002a04:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002a06:	69fb      	ldr	r3, [r7, #28]
 8002a08:	0c5b      	lsrs	r3, r3, #17
 8002a0a:	f003 030f 	and.w	r3, r3, #15
 8002a0e:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002a10:	69fb      	ldr	r3, [r7, #28]
 8002a12:	091b      	lsrs	r3, r3, #4
 8002a14:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002a18:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	2b02      	cmp	r3, #2
 8002a1e:	d003      	beq.n	8002a28 <HCD_RXQLVL_IRQHandler+0x44>
 8002a20:	2b05      	cmp	r3, #5
 8002a22:	f000 8082 	beq.w	8002b2a <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002a26:	e083      	b.n	8002b30 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002a28:	693b      	ldr	r3, [r7, #16]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d07f      	beq.n	8002b2e <HCD_RXQLVL_IRQHandler+0x14a>
 8002a2e:	6879      	ldr	r1, [r7, #4]
 8002a30:	69ba      	ldr	r2, [r7, #24]
 8002a32:	4613      	mov	r3, r2
 8002a34:	009b      	lsls	r3, r3, #2
 8002a36:	4413      	add	r3, r2
 8002a38:	00db      	lsls	r3, r3, #3
 8002a3a:	440b      	add	r3, r1
 8002a3c:	3344      	adds	r3, #68	; 0x44
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d074      	beq.n	8002b2e <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6818      	ldr	r0, [r3, #0]
 8002a48:	6879      	ldr	r1, [r7, #4]
 8002a4a:	69ba      	ldr	r2, [r7, #24]
 8002a4c:	4613      	mov	r3, r2
 8002a4e:	009b      	lsls	r3, r3, #2
 8002a50:	4413      	add	r3, r2
 8002a52:	00db      	lsls	r3, r3, #3
 8002a54:	440b      	add	r3, r1
 8002a56:	3344      	adds	r3, #68	; 0x44
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	693a      	ldr	r2, [r7, #16]
 8002a5c:	b292      	uxth	r2, r2
 8002a5e:	4619      	mov	r1, r3
 8002a60:	f001 fdef 	bl	8004642 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002a64:	6879      	ldr	r1, [r7, #4]
 8002a66:	69ba      	ldr	r2, [r7, #24]
 8002a68:	4613      	mov	r3, r2
 8002a6a:	009b      	lsls	r3, r3, #2
 8002a6c:	4413      	add	r3, r2
 8002a6e:	00db      	lsls	r3, r3, #3
 8002a70:	440b      	add	r3, r1
 8002a72:	3344      	adds	r3, #68	; 0x44
 8002a74:	681a      	ldr	r2, [r3, #0]
 8002a76:	693b      	ldr	r3, [r7, #16]
 8002a78:	18d1      	adds	r1, r2, r3
 8002a7a:	6878      	ldr	r0, [r7, #4]
 8002a7c:	69ba      	ldr	r2, [r7, #24]
 8002a7e:	4613      	mov	r3, r2
 8002a80:	009b      	lsls	r3, r3, #2
 8002a82:	4413      	add	r3, r2
 8002a84:	00db      	lsls	r3, r3, #3
 8002a86:	4403      	add	r3, r0
 8002a88:	3344      	adds	r3, #68	; 0x44
 8002a8a:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8002a8c:	6879      	ldr	r1, [r7, #4]
 8002a8e:	69ba      	ldr	r2, [r7, #24]
 8002a90:	4613      	mov	r3, r2
 8002a92:	009b      	lsls	r3, r3, #2
 8002a94:	4413      	add	r3, r2
 8002a96:	00db      	lsls	r3, r3, #3
 8002a98:	440b      	add	r3, r1
 8002a9a:	334c      	adds	r3, #76	; 0x4c
 8002a9c:	681a      	ldr	r2, [r3, #0]
 8002a9e:	693b      	ldr	r3, [r7, #16]
 8002aa0:	18d1      	adds	r1, r2, r3
 8002aa2:	6878      	ldr	r0, [r7, #4]
 8002aa4:	69ba      	ldr	r2, [r7, #24]
 8002aa6:	4613      	mov	r3, r2
 8002aa8:	009b      	lsls	r3, r3, #2
 8002aaa:	4413      	add	r3, r2
 8002aac:	00db      	lsls	r3, r3, #3
 8002aae:	4403      	add	r3, r0
 8002ab0:	334c      	adds	r3, #76	; 0x4c
 8002ab2:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8002ab4:	69bb      	ldr	r3, [r7, #24]
 8002ab6:	015a      	lsls	r2, r3, #5
 8002ab8:	6a3b      	ldr	r3, [r7, #32]
 8002aba:	4413      	add	r3, r2
 8002abc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ac0:	691a      	ldr	r2, [r3, #16]
 8002ac2:	4b1d      	ldr	r3, [pc, #116]	; (8002b38 <HCD_RXQLVL_IRQHandler+0x154>)
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d031      	beq.n	8002b2e <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002aca:	69bb      	ldr	r3, [r7, #24]
 8002acc:	015a      	lsls	r2, r3, #5
 8002ace:	6a3b      	ldr	r3, [r7, #32]
 8002ad0:	4413      	add	r3, r2
 8002ad2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002ae0:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002ae8:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002aea:	69bb      	ldr	r3, [r7, #24]
 8002aec:	015a      	lsls	r2, r3, #5
 8002aee:	6a3b      	ldr	r3, [r7, #32]
 8002af0:	4413      	add	r3, r2
 8002af2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002af6:	461a      	mov	r2, r3
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8002afc:	6879      	ldr	r1, [r7, #4]
 8002afe:	69ba      	ldr	r2, [r7, #24]
 8002b00:	4613      	mov	r3, r2
 8002b02:	009b      	lsls	r3, r3, #2
 8002b04:	4413      	add	r3, r2
 8002b06:	00db      	lsls	r3, r3, #3
 8002b08:	440b      	add	r3, r1
 8002b0a:	3350      	adds	r3, #80	; 0x50
 8002b0c:	781b      	ldrb	r3, [r3, #0]
 8002b0e:	f083 0301 	eor.w	r3, r3, #1
 8002b12:	b2d8      	uxtb	r0, r3
 8002b14:	6879      	ldr	r1, [r7, #4]
 8002b16:	69ba      	ldr	r2, [r7, #24]
 8002b18:	4613      	mov	r3, r2
 8002b1a:	009b      	lsls	r3, r3, #2
 8002b1c:	4413      	add	r3, r2
 8002b1e:	00db      	lsls	r3, r3, #3
 8002b20:	440b      	add	r3, r1
 8002b22:	3350      	adds	r3, #80	; 0x50
 8002b24:	4602      	mov	r2, r0
 8002b26:	701a      	strb	r2, [r3, #0]
      break;
 8002b28:	e001      	b.n	8002b2e <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 8002b2a:	bf00      	nop
 8002b2c:	e000      	b.n	8002b30 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 8002b2e:	bf00      	nop
  }
}
 8002b30:	bf00      	nop
 8002b32:	3728      	adds	r7, #40	; 0x28
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bd80      	pop	{r7, pc}
 8002b38:	1ff80000 	.word	0x1ff80000

08002b3c <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b086      	sub	sp, #24
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b4a:	697b      	ldr	r3, [r7, #20]
 8002b4c:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002b4e:	693b      	ldr	r3, [r7, #16]
 8002b50:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002b58:	693b      	ldr	r3, [r7, #16]
 8002b5a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002b62:	68bb      	ldr	r3, [r7, #8]
 8002b64:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002b68:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	f003 0302 	and.w	r3, r3, #2
 8002b70:	2b02      	cmp	r3, #2
 8002b72:	d113      	bne.n	8002b9c <HCD_Port_IRQHandler+0x60>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	f003 0301 	and.w	r3, r3, #1
 8002b7a:	2b01      	cmp	r3, #1
 8002b7c:	d10a      	bne.n	8002b94 <HCD_Port_IRQHandler+0x58>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	699a      	ldr	r2, [r3, #24]
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8002b8c:	619a      	str	r2, [r3, #24]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002b8e:	6878      	ldr	r0, [r7, #4]
 8002b90:	f007 fd68 	bl	800a664 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	f043 0302 	orr.w	r3, r3, #2
 8002b9a:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	f003 0308 	and.w	r3, r3, #8
 8002ba2:	2b08      	cmp	r3, #8
 8002ba4:	d147      	bne.n	8002c36 <HCD_Port_IRQHandler+0xfa>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002ba6:	68bb      	ldr	r3, [r7, #8]
 8002ba8:	f043 0308 	orr.w	r3, r3, #8
 8002bac:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	f003 0304 	and.w	r3, r3, #4
 8002bb4:	2b04      	cmp	r3, #4
 8002bb6:	d129      	bne.n	8002c0c <HCD_Port_IRQHandler+0xd0>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	699b      	ldr	r3, [r3, #24]
 8002bbc:	2b02      	cmp	r3, #2
 8002bbe:	d113      	bne.n	8002be8 <HCD_Port_IRQHandler+0xac>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002bc6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002bca:	d106      	bne.n	8002bda <HCD_Port_IRQHandler+0x9e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	2102      	movs	r1, #2
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	f001 fe70 	bl	80048b8 <USB_InitFSLSPClkSel>
 8002bd8:	e011      	b.n	8002bfe <HCD_Port_IRQHandler+0xc2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	2101      	movs	r1, #1
 8002be0:	4618      	mov	r0, r3
 8002be2:	f001 fe69 	bl	80048b8 <USB_InitFSLSPClkSel>
 8002be6:	e00a      	b.n	8002bfe <HCD_Port_IRQHandler+0xc2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	68db      	ldr	r3, [r3, #12]
 8002bec:	2b01      	cmp	r3, #1
 8002bee:	d106      	bne.n	8002bfe <HCD_Port_IRQHandler+0xc2>
        {
          USBx_HOST->HFIR = 60000U;
 8002bf0:	693b      	ldr	r3, [r7, #16]
 8002bf2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002bf6:	461a      	mov	r2, r3
 8002bf8:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002bfc:	6053      	str	r3, [r2, #4]
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002bfe:	6878      	ldr	r0, [r7, #4]
 8002c00:	f007 fd5a 	bl	800a6b8 <HAL_HCD_PortEnabled_Callback>
      HAL_HCD_Connect_Callback(hhcd);
 8002c04:	6878      	ldr	r0, [r7, #4]
 8002c06:	f007 fd2d 	bl	800a664 <HAL_HCD_Connect_Callback>
 8002c0a:	e014      	b.n	8002c36 <HCD_Port_IRQHandler+0xfa>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002c0c:	6878      	ldr	r0, [r7, #4]
 8002c0e:	f007 fd61 	bl	800a6d4 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002c12:	693b      	ldr	r3, [r7, #16]
 8002c14:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	693a      	ldr	r2, [r7, #16]
 8002c1c:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8002c20:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002c24:	6013      	str	r3, [r2, #0]
                      USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	699a      	ldr	r2, [r3, #24]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002c34:	619a      	str	r2, [r3, #24]
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	f003 0320 	and.w	r3, r3, #32
 8002c3c:	2b20      	cmp	r3, #32
 8002c3e:	d103      	bne.n	8002c48 <HCD_Port_IRQHandler+0x10c>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	f043 0320 	orr.w	r3, r3, #32
 8002c46:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002c48:	693b      	ldr	r3, [r7, #16]
 8002c4a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002c4e:	461a      	mov	r2, r3
 8002c50:	68bb      	ldr	r3, [r7, #8]
 8002c52:	6013      	str	r3, [r2, #0]
}
 8002c54:	bf00      	nop
 8002c56:	3718      	adds	r7, #24
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bd80      	pop	{r7, pc}

08002c5c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b084      	sub	sp, #16
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d101      	bne.n	8002c6e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	e11f      	b.n	8002eae <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c74:	b2db      	uxtb	r3, r3
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d106      	bne.n	8002c88 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002c82:	6878      	ldr	r0, [r7, #4]
 8002c84:	f7fd fe8e 	bl	80009a4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2224      	movs	r2, #36	; 0x24
 8002c8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	681a      	ldr	r2, [r3, #0]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f022 0201 	bic.w	r2, r2, #1
 8002c9e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	681a      	ldr	r2, [r3, #0]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002cae:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	681a      	ldr	r2, [r3, #0]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002cbe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002cc0:	f001 f9de 	bl	8004080 <HAL_RCC_GetPCLK1Freq>
 8002cc4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	4a7b      	ldr	r2, [pc, #492]	; (8002eb8 <HAL_I2C_Init+0x25c>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d807      	bhi.n	8002ce0 <HAL_I2C_Init+0x84>
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	4a7a      	ldr	r2, [pc, #488]	; (8002ebc <HAL_I2C_Init+0x260>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	bf94      	ite	ls
 8002cd8:	2301      	movls	r3, #1
 8002cda:	2300      	movhi	r3, #0
 8002cdc:	b2db      	uxtb	r3, r3
 8002cde:	e006      	b.n	8002cee <HAL_I2C_Init+0x92>
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	4a77      	ldr	r2, [pc, #476]	; (8002ec0 <HAL_I2C_Init+0x264>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	bf94      	ite	ls
 8002ce8:	2301      	movls	r3, #1
 8002cea:	2300      	movhi	r3, #0
 8002cec:	b2db      	uxtb	r3, r3
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d001      	beq.n	8002cf6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	e0db      	b.n	8002eae <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	4a72      	ldr	r2, [pc, #456]	; (8002ec4 <HAL_I2C_Init+0x268>)
 8002cfa:	fba2 2303 	umull	r2, r3, r2, r3
 8002cfe:	0c9b      	lsrs	r3, r3, #18
 8002d00:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	68ba      	ldr	r2, [r7, #8]
 8002d12:	430a      	orrs	r2, r1
 8002d14:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	6a1b      	ldr	r3, [r3, #32]
 8002d1c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	4a64      	ldr	r2, [pc, #400]	; (8002eb8 <HAL_I2C_Init+0x25c>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d802      	bhi.n	8002d30 <HAL_I2C_Init+0xd4>
 8002d2a:	68bb      	ldr	r3, [r7, #8]
 8002d2c:	3301      	adds	r3, #1
 8002d2e:	e009      	b.n	8002d44 <HAL_I2C_Init+0xe8>
 8002d30:	68bb      	ldr	r3, [r7, #8]
 8002d32:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002d36:	fb02 f303 	mul.w	r3, r2, r3
 8002d3a:	4a63      	ldr	r2, [pc, #396]	; (8002ec8 <HAL_I2C_Init+0x26c>)
 8002d3c:	fba2 2303 	umull	r2, r3, r2, r3
 8002d40:	099b      	lsrs	r3, r3, #6
 8002d42:	3301      	adds	r3, #1
 8002d44:	687a      	ldr	r2, [r7, #4]
 8002d46:	6812      	ldr	r2, [r2, #0]
 8002d48:	430b      	orrs	r3, r1
 8002d4a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	69db      	ldr	r3, [r3, #28]
 8002d52:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002d56:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	4956      	ldr	r1, [pc, #344]	; (8002eb8 <HAL_I2C_Init+0x25c>)
 8002d60:	428b      	cmp	r3, r1
 8002d62:	d80d      	bhi.n	8002d80 <HAL_I2C_Init+0x124>
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	1e59      	subs	r1, r3, #1
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	005b      	lsls	r3, r3, #1
 8002d6e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d72:	3301      	adds	r3, #1
 8002d74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d78:	2b04      	cmp	r3, #4
 8002d7a:	bf38      	it	cc
 8002d7c:	2304      	movcc	r3, #4
 8002d7e:	e04f      	b.n	8002e20 <HAL_I2C_Init+0x1c4>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	689b      	ldr	r3, [r3, #8]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d111      	bne.n	8002dac <HAL_I2C_Init+0x150>
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	1e58      	subs	r0, r3, #1
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6859      	ldr	r1, [r3, #4]
 8002d90:	460b      	mov	r3, r1
 8002d92:	005b      	lsls	r3, r3, #1
 8002d94:	440b      	add	r3, r1
 8002d96:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d9a:	3301      	adds	r3, #1
 8002d9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	bf0c      	ite	eq
 8002da4:	2301      	moveq	r3, #1
 8002da6:	2300      	movne	r3, #0
 8002da8:	b2db      	uxtb	r3, r3
 8002daa:	e012      	b.n	8002dd2 <HAL_I2C_Init+0x176>
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	1e58      	subs	r0, r3, #1
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6859      	ldr	r1, [r3, #4]
 8002db4:	460b      	mov	r3, r1
 8002db6:	009b      	lsls	r3, r3, #2
 8002db8:	440b      	add	r3, r1
 8002dba:	0099      	lsls	r1, r3, #2
 8002dbc:	440b      	add	r3, r1
 8002dbe:	fbb0 f3f3 	udiv	r3, r0, r3
 8002dc2:	3301      	adds	r3, #1
 8002dc4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	bf0c      	ite	eq
 8002dcc:	2301      	moveq	r3, #1
 8002dce:	2300      	movne	r3, #0
 8002dd0:	b2db      	uxtb	r3, r3
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d001      	beq.n	8002dda <HAL_I2C_Init+0x17e>
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e022      	b.n	8002e20 <HAL_I2C_Init+0x1c4>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	689b      	ldr	r3, [r3, #8]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d10e      	bne.n	8002e00 <HAL_I2C_Init+0x1a4>
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	1e58      	subs	r0, r3, #1
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6859      	ldr	r1, [r3, #4]
 8002dea:	460b      	mov	r3, r1
 8002dec:	005b      	lsls	r3, r3, #1
 8002dee:	440b      	add	r3, r1
 8002df0:	fbb0 f3f3 	udiv	r3, r0, r3
 8002df4:	3301      	adds	r3, #1
 8002df6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002dfa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002dfe:	e00f      	b.n	8002e20 <HAL_I2C_Init+0x1c4>
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	1e58      	subs	r0, r3, #1
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6859      	ldr	r1, [r3, #4]
 8002e08:	460b      	mov	r3, r1
 8002e0a:	009b      	lsls	r3, r3, #2
 8002e0c:	440b      	add	r3, r1
 8002e0e:	0099      	lsls	r1, r3, #2
 8002e10:	440b      	add	r3, r1
 8002e12:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e16:	3301      	adds	r3, #1
 8002e18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e1c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002e20:	6879      	ldr	r1, [r7, #4]
 8002e22:	6809      	ldr	r1, [r1, #0]
 8002e24:	4313      	orrs	r3, r2
 8002e26:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	69da      	ldr	r2, [r3, #28]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6a1b      	ldr	r3, [r3, #32]
 8002e3a:	431a      	orrs	r2, r3
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	430a      	orrs	r2, r1
 8002e42:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	689b      	ldr	r3, [r3, #8]
 8002e4a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002e4e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002e52:	687a      	ldr	r2, [r7, #4]
 8002e54:	6911      	ldr	r1, [r2, #16]
 8002e56:	687a      	ldr	r2, [r7, #4]
 8002e58:	68d2      	ldr	r2, [r2, #12]
 8002e5a:	4311      	orrs	r1, r2
 8002e5c:	687a      	ldr	r2, [r7, #4]
 8002e5e:	6812      	ldr	r2, [r2, #0]
 8002e60:	430b      	orrs	r3, r1
 8002e62:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	68db      	ldr	r3, [r3, #12]
 8002e6a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	695a      	ldr	r2, [r3, #20]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	699b      	ldr	r3, [r3, #24]
 8002e76:	431a      	orrs	r2, r3
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	430a      	orrs	r2, r1
 8002e7e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	681a      	ldr	r2, [r3, #0]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f042 0201 	orr.w	r2, r2, #1
 8002e8e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2200      	movs	r2, #0
 8002e94:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2220      	movs	r2, #32
 8002e9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002eac:	2300      	movs	r3, #0
}
 8002eae:	4618      	mov	r0, r3
 8002eb0:	3710      	adds	r7, #16
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}
 8002eb6:	bf00      	nop
 8002eb8:	000186a0 	.word	0x000186a0
 8002ebc:	001e847f 	.word	0x001e847f
 8002ec0:	003d08ff 	.word	0x003d08ff
 8002ec4:	431bde83 	.word	0x431bde83
 8002ec8:	10624dd3 	.word	0x10624dd3

08002ecc <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b088      	sub	sp, #32
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d101      	bne.n	8002ede <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8002eda:	2301      	movs	r3, #1
 8002edc:	e128      	b.n	8003130 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ee4:	b2db      	uxtb	r3, r3
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d109      	bne.n	8002efe <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2200      	movs	r2, #0
 8002eee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	4a90      	ldr	r2, [pc, #576]	; (8003138 <HAL_I2S_Init+0x26c>)
 8002ef6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8002ef8:	6878      	ldr	r0, [r7, #4]
 8002efa:	f7fd fd9b 	bl	8000a34 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2202      	movs	r2, #2
 8002f02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	69db      	ldr	r3, [r3, #28]
 8002f0c:	687a      	ldr	r2, [r7, #4]
 8002f0e:	6812      	ldr	r2, [r2, #0]
 8002f10:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002f14:	f023 030f 	bic.w	r3, r3, #15
 8002f18:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	2202      	movs	r2, #2
 8002f20:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	695b      	ldr	r3, [r3, #20]
 8002f26:	2b02      	cmp	r3, #2
 8002f28:	d060      	beq.n	8002fec <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	68db      	ldr	r3, [r3, #12]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d102      	bne.n	8002f38 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8002f32:	2310      	movs	r3, #16
 8002f34:	617b      	str	r3, [r7, #20]
 8002f36:	e001      	b.n	8002f3c <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8002f38:	2320      	movs	r3, #32
 8002f3a:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	689b      	ldr	r3, [r3, #8]
 8002f40:	2b20      	cmp	r3, #32
 8002f42:	d802      	bhi.n	8002f4a <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 8002f44:	697b      	ldr	r3, [r7, #20]
 8002f46:	005b      	lsls	r3, r3, #1
 8002f48:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8002f4a:	2001      	movs	r0, #1
 8002f4c:	f001 f98e 	bl	800426c <HAL_RCCEx_GetPeriphCLKFreq>
 8002f50:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	691b      	ldr	r3, [r3, #16]
 8002f56:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f5a:	d125      	bne.n	8002fa8 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	68db      	ldr	r3, [r3, #12]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d010      	beq.n	8002f86 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002f64:	697b      	ldr	r3, [r7, #20]
 8002f66:	009b      	lsls	r3, r3, #2
 8002f68:	68fa      	ldr	r2, [r7, #12]
 8002f6a:	fbb2 f2f3 	udiv	r2, r2, r3
 8002f6e:	4613      	mov	r3, r2
 8002f70:	009b      	lsls	r3, r3, #2
 8002f72:	4413      	add	r3, r2
 8002f74:	005b      	lsls	r3, r3, #1
 8002f76:	461a      	mov	r2, r3
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	695b      	ldr	r3, [r3, #20]
 8002f7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f80:	3305      	adds	r3, #5
 8002f82:	613b      	str	r3, [r7, #16]
 8002f84:	e01f      	b.n	8002fc6 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002f86:	697b      	ldr	r3, [r7, #20]
 8002f88:	00db      	lsls	r3, r3, #3
 8002f8a:	68fa      	ldr	r2, [r7, #12]
 8002f8c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002f90:	4613      	mov	r3, r2
 8002f92:	009b      	lsls	r3, r3, #2
 8002f94:	4413      	add	r3, r2
 8002f96:	005b      	lsls	r3, r3, #1
 8002f98:	461a      	mov	r2, r3
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	695b      	ldr	r3, [r3, #20]
 8002f9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fa2:	3305      	adds	r3, #5
 8002fa4:	613b      	str	r3, [r7, #16]
 8002fa6:	e00e      	b.n	8002fc6 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002fa8:	68fa      	ldr	r2, [r7, #12]
 8002faa:	697b      	ldr	r3, [r7, #20]
 8002fac:	fbb2 f2f3 	udiv	r2, r2, r3
 8002fb0:	4613      	mov	r3, r2
 8002fb2:	009b      	lsls	r3, r3, #2
 8002fb4:	4413      	add	r3, r2
 8002fb6:	005b      	lsls	r3, r3, #1
 8002fb8:	461a      	mov	r2, r3
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	695b      	ldr	r3, [r3, #20]
 8002fbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fc2:	3305      	adds	r3, #5
 8002fc4:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8002fc6:	693b      	ldr	r3, [r7, #16]
 8002fc8:	4a5c      	ldr	r2, [pc, #368]	; (800313c <HAL_I2S_Init+0x270>)
 8002fca:	fba2 2303 	umull	r2, r3, r2, r3
 8002fce:	08db      	lsrs	r3, r3, #3
 8002fd0:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8002fd2:	693b      	ldr	r3, [r7, #16]
 8002fd4:	f003 0301 	and.w	r3, r3, #1
 8002fd8:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8002fda:	693a      	ldr	r2, [r7, #16]
 8002fdc:	69bb      	ldr	r3, [r7, #24]
 8002fde:	1ad3      	subs	r3, r2, r3
 8002fe0:	085b      	lsrs	r3, r3, #1
 8002fe2:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8002fe4:	69bb      	ldr	r3, [r7, #24]
 8002fe6:	021b      	lsls	r3, r3, #8
 8002fe8:	61bb      	str	r3, [r7, #24]
 8002fea:	e003      	b.n	8002ff4 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8002fec:	2302      	movs	r3, #2
 8002fee:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8002ff4:	69fb      	ldr	r3, [r7, #28]
 8002ff6:	2b01      	cmp	r3, #1
 8002ff8:	d902      	bls.n	8003000 <HAL_I2S_Init+0x134>
 8002ffa:	69fb      	ldr	r3, [r7, #28]
 8002ffc:	2bff      	cmp	r3, #255	; 0xff
 8002ffe:	d907      	bls.n	8003010 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003004:	f043 0210 	orr.w	r2, r3, #16
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 800300c:	2301      	movs	r3, #1
 800300e:	e08f      	b.n	8003130 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	691a      	ldr	r2, [r3, #16]
 8003014:	69bb      	ldr	r3, [r7, #24]
 8003016:	ea42 0103 	orr.w	r1, r2, r3
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	69fa      	ldr	r2, [r7, #28]
 8003020:	430a      	orrs	r2, r1
 8003022:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	69db      	ldr	r3, [r3, #28]
 800302a:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800302e:	f023 030f 	bic.w	r3, r3, #15
 8003032:	687a      	ldr	r2, [r7, #4]
 8003034:	6851      	ldr	r1, [r2, #4]
 8003036:	687a      	ldr	r2, [r7, #4]
 8003038:	6892      	ldr	r2, [r2, #8]
 800303a:	4311      	orrs	r1, r2
 800303c:	687a      	ldr	r2, [r7, #4]
 800303e:	68d2      	ldr	r2, [r2, #12]
 8003040:	4311      	orrs	r1, r2
 8003042:	687a      	ldr	r2, [r7, #4]
 8003044:	6992      	ldr	r2, [r2, #24]
 8003046:	430a      	orrs	r2, r1
 8003048:	431a      	orrs	r2, r3
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003052:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6a1b      	ldr	r3, [r3, #32]
 8003058:	2b01      	cmp	r3, #1
 800305a:	d161      	bne.n	8003120 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	4a38      	ldr	r2, [pc, #224]	; (8003140 <HAL_I2S_Init+0x274>)
 8003060:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a37      	ldr	r2, [pc, #220]	; (8003144 <HAL_I2S_Init+0x278>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d101      	bne.n	8003070 <HAL_I2S_Init+0x1a4>
 800306c:	4b36      	ldr	r3, [pc, #216]	; (8003148 <HAL_I2S_Init+0x27c>)
 800306e:	e001      	b.n	8003074 <HAL_I2S_Init+0x1a8>
 8003070:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003074:	69db      	ldr	r3, [r3, #28]
 8003076:	687a      	ldr	r2, [r7, #4]
 8003078:	6812      	ldr	r2, [r2, #0]
 800307a:	4932      	ldr	r1, [pc, #200]	; (8003144 <HAL_I2S_Init+0x278>)
 800307c:	428a      	cmp	r2, r1
 800307e:	d101      	bne.n	8003084 <HAL_I2S_Init+0x1b8>
 8003080:	4a31      	ldr	r2, [pc, #196]	; (8003148 <HAL_I2S_Init+0x27c>)
 8003082:	e001      	b.n	8003088 <HAL_I2S_Init+0x1bc>
 8003084:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003088:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800308c:	f023 030f 	bic.w	r3, r3, #15
 8003090:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4a2b      	ldr	r2, [pc, #172]	; (8003144 <HAL_I2S_Init+0x278>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d101      	bne.n	80030a0 <HAL_I2S_Init+0x1d4>
 800309c:	4b2a      	ldr	r3, [pc, #168]	; (8003148 <HAL_I2S_Init+0x27c>)
 800309e:	e001      	b.n	80030a4 <HAL_I2S_Init+0x1d8>
 80030a0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80030a4:	2202      	movs	r2, #2
 80030a6:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a25      	ldr	r2, [pc, #148]	; (8003144 <HAL_I2S_Init+0x278>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d101      	bne.n	80030b6 <HAL_I2S_Init+0x1ea>
 80030b2:	4b25      	ldr	r3, [pc, #148]	; (8003148 <HAL_I2S_Init+0x27c>)
 80030b4:	e001      	b.n	80030ba <HAL_I2S_Init+0x1ee>
 80030b6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80030ba:	69db      	ldr	r3, [r3, #28]
 80030bc:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80030c6:	d003      	beq.n	80030d0 <HAL_I2S_Init+0x204>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d103      	bne.n	80030d8 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80030d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80030d4:	613b      	str	r3, [r7, #16]
 80030d6:	e001      	b.n	80030dc <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80030d8:	2300      	movs	r3, #0
 80030da:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 80030dc:	693b      	ldr	r3, [r7, #16]
 80030de:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	689b      	ldr	r3, [r3, #8]
 80030e4:	b299      	uxth	r1, r3
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	68db      	ldr	r3, [r3, #12]
 80030ea:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	699b      	ldr	r3, [r3, #24]
 80030f0:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 80030f2:	4303      	orrs	r3, r0
 80030f4:	b29b      	uxth	r3, r3
 80030f6:	430b      	orrs	r3, r1
 80030f8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 80030fa:	4313      	orrs	r3, r2
 80030fc:	b29a      	uxth	r2, r3
 80030fe:	897b      	ldrh	r3, [r7, #10]
 8003100:	4313      	orrs	r3, r2
 8003102:	b29b      	uxth	r3, r3
 8003104:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003108:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4a0d      	ldr	r2, [pc, #52]	; (8003144 <HAL_I2S_Init+0x278>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d101      	bne.n	8003118 <HAL_I2S_Init+0x24c>
 8003114:	4b0c      	ldr	r3, [pc, #48]	; (8003148 <HAL_I2S_Init+0x27c>)
 8003116:	e001      	b.n	800311c <HAL_I2S_Init+0x250>
 8003118:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800311c:	897a      	ldrh	r2, [r7, #10]
 800311e:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2200      	movs	r2, #0
 8003124:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2201      	movs	r2, #1
 800312a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800312e:	2300      	movs	r3, #0
}
 8003130:	4618      	mov	r0, r3
 8003132:	3720      	adds	r7, #32
 8003134:	46bd      	mov	sp, r7
 8003136:	bd80      	pop	{r7, pc}
 8003138:	08003243 	.word	0x08003243
 800313c:	cccccccd 	.word	0xcccccccd
 8003140:	08003359 	.word	0x08003359
 8003144:	40003800 	.word	0x40003800
 8003148:	40003400 	.word	0x40003400

0800314c <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800314c:	b480      	push	{r7}
 800314e:	b083      	sub	sp, #12
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003154:	bf00      	nop
 8003156:	370c      	adds	r7, #12
 8003158:	46bd      	mov	sp, r7
 800315a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315e:	4770      	bx	lr

08003160 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003160:	b480      	push	{r7}
 8003162:	b083      	sub	sp, #12
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003168:	bf00      	nop
 800316a:	370c      	adds	r7, #12
 800316c:	46bd      	mov	sp, r7
 800316e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003172:	4770      	bx	lr

08003174 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003174:	b480      	push	{r7}
 8003176:	b083      	sub	sp, #12
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 800317c:	bf00      	nop
 800317e:	370c      	adds	r7, #12
 8003180:	46bd      	mov	sp, r7
 8003182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003186:	4770      	bx	lr

08003188 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b082      	sub	sp, #8
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003194:	881a      	ldrh	r2, [r3, #0]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a0:	1c9a      	adds	r2, r3, #2
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031aa:	b29b      	uxth	r3, r3
 80031ac:	3b01      	subs	r3, #1
 80031ae:	b29a      	uxth	r2, r3
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031b8:	b29b      	uxth	r3, r3
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d10e      	bne.n	80031dc <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	685a      	ldr	r2, [r3, #4]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80031cc:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2201      	movs	r2, #1
 80031d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80031d6:	6878      	ldr	r0, [r7, #4]
 80031d8:	f7ff ffb8 	bl	800314c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80031dc:	bf00      	nop
 80031de:	3708      	adds	r7, #8
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bd80      	pop	{r7, pc}

080031e4 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b082      	sub	sp, #8
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	68da      	ldr	r2, [r3, #12]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031f6:	b292      	uxth	r2, r2
 80031f8:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031fe:	1c9a      	adds	r2, r3, #2
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003208:	b29b      	uxth	r3, r3
 800320a:	3b01      	subs	r3, #1
 800320c:	b29a      	uxth	r2, r3
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003216:	b29b      	uxth	r3, r3
 8003218:	2b00      	cmp	r3, #0
 800321a:	d10e      	bne.n	800323a <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	685a      	ldr	r2, [r3, #4]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800322a:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2201      	movs	r2, #1
 8003230:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003234:	6878      	ldr	r0, [r7, #4]
 8003236:	f7ff ff93 	bl	8003160 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800323a:	bf00      	nop
 800323c:	3708      	adds	r7, #8
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}

08003242 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003242:	b580      	push	{r7, lr}
 8003244:	b086      	sub	sp, #24
 8003246:	af00      	add	r7, sp, #0
 8003248:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	689b      	ldr	r3, [r3, #8]
 8003250:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003258:	b2db      	uxtb	r3, r3
 800325a:	2b04      	cmp	r3, #4
 800325c:	d13a      	bne.n	80032d4 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800325e:	697b      	ldr	r3, [r7, #20]
 8003260:	f003 0301 	and.w	r3, r3, #1
 8003264:	2b01      	cmp	r3, #1
 8003266:	d109      	bne.n	800327c <I2S_IRQHandler+0x3a>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003272:	2b40      	cmp	r3, #64	; 0x40
 8003274:	d102      	bne.n	800327c <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003276:	6878      	ldr	r0, [r7, #4]
 8003278:	f7ff ffb4 	bl	80031e4 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800327c:	697b      	ldr	r3, [r7, #20]
 800327e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003282:	2b40      	cmp	r3, #64	; 0x40
 8003284:	d126      	bne.n	80032d4 <I2S_IRQHandler+0x92>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	f003 0320 	and.w	r3, r3, #32
 8003290:	2b20      	cmp	r3, #32
 8003292:	d11f      	bne.n	80032d4 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	685a      	ldr	r2, [r3, #4]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80032a2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80032a4:	2300      	movs	r3, #0
 80032a6:	613b      	str	r3, [r7, #16]
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	68db      	ldr	r3, [r3, #12]
 80032ae:	613b      	str	r3, [r7, #16]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	689b      	ldr	r3, [r3, #8]
 80032b6:	613b      	str	r3, [r7, #16]
 80032b8:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2201      	movs	r2, #1
 80032be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032c6:	f043 0202 	orr.w	r2, r3, #2
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80032ce:	6878      	ldr	r0, [r7, #4]
 80032d0:	f7ff ff50 	bl	8003174 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032da:	b2db      	uxtb	r3, r3
 80032dc:	2b03      	cmp	r3, #3
 80032de:	d136      	bne.n	800334e <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	f003 0302 	and.w	r3, r3, #2
 80032e6:	2b02      	cmp	r3, #2
 80032e8:	d109      	bne.n	80032fe <I2S_IRQHandler+0xbc>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032f4:	2b80      	cmp	r3, #128	; 0x80
 80032f6:	d102      	bne.n	80032fe <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80032f8:	6878      	ldr	r0, [r7, #4]
 80032fa:	f7ff ff45 	bl	8003188 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80032fe:	697b      	ldr	r3, [r7, #20]
 8003300:	f003 0308 	and.w	r3, r3, #8
 8003304:	2b08      	cmp	r3, #8
 8003306:	d122      	bne.n	800334e <I2S_IRQHandler+0x10c>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	f003 0320 	and.w	r3, r3, #32
 8003312:	2b20      	cmp	r3, #32
 8003314:	d11b      	bne.n	800334e <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	685a      	ldr	r2, [r3, #4]
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003324:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003326:	2300      	movs	r3, #0
 8003328:	60fb      	str	r3, [r7, #12]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	689b      	ldr	r3, [r3, #8]
 8003330:	60fb      	str	r3, [r7, #12]
 8003332:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2201      	movs	r2, #1
 8003338:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003340:	f043 0204 	orr.w	r2, r3, #4
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003348:	6878      	ldr	r0, [r7, #4]
 800334a:	f7ff ff13 	bl	8003174 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800334e:	bf00      	nop
 8003350:	3718      	adds	r7, #24
 8003352:	46bd      	mov	sp, r7
 8003354:	bd80      	pop	{r7, pc}
	...

08003358 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b088      	sub	sp, #32
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	689b      	ldr	r3, [r3, #8]
 8003366:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4aa2      	ldr	r2, [pc, #648]	; (80035f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d101      	bne.n	8003376 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003372:	4ba2      	ldr	r3, [pc, #648]	; (80035fc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003374:	e001      	b.n	800337a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003376:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800337a:	689b      	ldr	r3, [r3, #8]
 800337c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a9b      	ldr	r2, [pc, #620]	; (80035f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d101      	bne.n	8003394 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003390:	4b9a      	ldr	r3, [pc, #616]	; (80035fc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003392:	e001      	b.n	8003398 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003394:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033a4:	d004      	beq.n	80033b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	f040 8099 	bne.w	80034e2 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80033b0:	69fb      	ldr	r3, [r7, #28]
 80033b2:	f003 0302 	and.w	r3, r3, #2
 80033b6:	2b02      	cmp	r3, #2
 80033b8:	d107      	bne.n	80033ca <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80033ba:	697b      	ldr	r3, [r7, #20]
 80033bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d002      	beq.n	80033ca <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80033c4:	6878      	ldr	r0, [r7, #4]
 80033c6:	f000 f925 	bl	8003614 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80033ca:	69bb      	ldr	r3, [r7, #24]
 80033cc:	f003 0301 	and.w	r3, r3, #1
 80033d0:	2b01      	cmp	r3, #1
 80033d2:	d107      	bne.n	80033e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80033d4:	693b      	ldr	r3, [r7, #16]
 80033d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d002      	beq.n	80033e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80033de:	6878      	ldr	r0, [r7, #4]
 80033e0:	f000 f9c8 	bl	8003774 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80033e4:	69bb      	ldr	r3, [r7, #24]
 80033e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033ea:	2b40      	cmp	r3, #64	; 0x40
 80033ec:	d13a      	bne.n	8003464 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	f003 0320 	and.w	r3, r3, #32
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d035      	beq.n	8003464 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a7e      	ldr	r2, [pc, #504]	; (80035f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d101      	bne.n	8003406 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003402:	4b7e      	ldr	r3, [pc, #504]	; (80035fc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003404:	e001      	b.n	800340a <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003406:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800340a:	685a      	ldr	r2, [r3, #4]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4979      	ldr	r1, [pc, #484]	; (80035f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003412:	428b      	cmp	r3, r1
 8003414:	d101      	bne.n	800341a <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003416:	4b79      	ldr	r3, [pc, #484]	; (80035fc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003418:	e001      	b.n	800341e <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800341a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800341e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003422:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	685a      	ldr	r2, [r3, #4]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003432:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003434:	2300      	movs	r3, #0
 8003436:	60fb      	str	r3, [r7, #12]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	68db      	ldr	r3, [r3, #12]
 800343e:	60fb      	str	r3, [r7, #12]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	689b      	ldr	r3, [r3, #8]
 8003446:	60fb      	str	r3, [r7, #12]
 8003448:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2201      	movs	r2, #1
 800344e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003456:	f043 0202 	orr.w	r2, r3, #2
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800345e:	6878      	ldr	r0, [r7, #4]
 8003460:	f7ff fe88 	bl	8003174 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003464:	69fb      	ldr	r3, [r7, #28]
 8003466:	f003 0308 	and.w	r3, r3, #8
 800346a:	2b08      	cmp	r3, #8
 800346c:	f040 80be 	bne.w	80035ec <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8003470:	697b      	ldr	r3, [r7, #20]
 8003472:	f003 0320 	and.w	r3, r3, #32
 8003476:	2b00      	cmp	r3, #0
 8003478:	f000 80b8 	beq.w	80035ec <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	685a      	ldr	r2, [r3, #4]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800348a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4a59      	ldr	r2, [pc, #356]	; (80035f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d101      	bne.n	800349a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003496:	4b59      	ldr	r3, [pc, #356]	; (80035fc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003498:	e001      	b.n	800349e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800349a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800349e:	685a      	ldr	r2, [r3, #4]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4954      	ldr	r1, [pc, #336]	; (80035f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80034a6:	428b      	cmp	r3, r1
 80034a8:	d101      	bne.n	80034ae <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80034aa:	4b54      	ldr	r3, [pc, #336]	; (80035fc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80034ac:	e001      	b.n	80034b2 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80034ae:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80034b2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80034b6:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80034b8:	2300      	movs	r3, #0
 80034ba:	60bb      	str	r3, [r7, #8]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	689b      	ldr	r3, [r3, #8]
 80034c2:	60bb      	str	r3, [r7, #8]
 80034c4:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2201      	movs	r2, #1
 80034ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034d2:	f043 0204 	orr.w	r2, r3, #4
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80034da:	6878      	ldr	r0, [r7, #4]
 80034dc:	f7ff fe4a 	bl	8003174 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80034e0:	e084      	b.n	80035ec <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80034e2:	69bb      	ldr	r3, [r7, #24]
 80034e4:	f003 0302 	and.w	r3, r3, #2
 80034e8:	2b02      	cmp	r3, #2
 80034ea:	d107      	bne.n	80034fc <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80034ec:	693b      	ldr	r3, [r7, #16]
 80034ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d002      	beq.n	80034fc <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80034f6:	6878      	ldr	r0, [r7, #4]
 80034f8:	f000 f8be 	bl	8003678 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80034fc:	69fb      	ldr	r3, [r7, #28]
 80034fe:	f003 0301 	and.w	r3, r3, #1
 8003502:	2b01      	cmp	r3, #1
 8003504:	d107      	bne.n	8003516 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003506:	697b      	ldr	r3, [r7, #20]
 8003508:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800350c:	2b00      	cmp	r3, #0
 800350e:	d002      	beq.n	8003516 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003510:	6878      	ldr	r0, [r7, #4]
 8003512:	f000 f8fd 	bl	8003710 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003516:	69fb      	ldr	r3, [r7, #28]
 8003518:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800351c:	2b40      	cmp	r3, #64	; 0x40
 800351e:	d12f      	bne.n	8003580 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003520:	697b      	ldr	r3, [r7, #20]
 8003522:	f003 0320 	and.w	r3, r3, #32
 8003526:	2b00      	cmp	r3, #0
 8003528:	d02a      	beq.n	8003580 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	685a      	ldr	r2, [r3, #4]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003538:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4a2e      	ldr	r2, [pc, #184]	; (80035f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d101      	bne.n	8003548 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003544:	4b2d      	ldr	r3, [pc, #180]	; (80035fc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003546:	e001      	b.n	800354c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003548:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800354c:	685a      	ldr	r2, [r3, #4]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4929      	ldr	r1, [pc, #164]	; (80035f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003554:	428b      	cmp	r3, r1
 8003556:	d101      	bne.n	800355c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003558:	4b28      	ldr	r3, [pc, #160]	; (80035fc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800355a:	e001      	b.n	8003560 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 800355c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003560:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003564:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2201      	movs	r2, #1
 800356a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003572:	f043 0202 	orr.w	r2, r3, #2
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800357a:	6878      	ldr	r0, [r7, #4]
 800357c:	f7ff fdfa 	bl	8003174 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003580:	69bb      	ldr	r3, [r7, #24]
 8003582:	f003 0308 	and.w	r3, r3, #8
 8003586:	2b08      	cmp	r3, #8
 8003588:	d131      	bne.n	80035ee <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 800358a:	693b      	ldr	r3, [r7, #16]
 800358c:	f003 0320 	and.w	r3, r3, #32
 8003590:	2b00      	cmp	r3, #0
 8003592:	d02c      	beq.n	80035ee <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4a17      	ldr	r2, [pc, #92]	; (80035f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d101      	bne.n	80035a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800359e:	4b17      	ldr	r3, [pc, #92]	; (80035fc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80035a0:	e001      	b.n	80035a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80035a2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80035a6:	685a      	ldr	r2, [r3, #4]
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4912      	ldr	r1, [pc, #72]	; (80035f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80035ae:	428b      	cmp	r3, r1
 80035b0:	d101      	bne.n	80035b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 80035b2:	4b12      	ldr	r3, [pc, #72]	; (80035fc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80035b4:	e001      	b.n	80035ba <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 80035b6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80035ba:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80035be:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	685a      	ldr	r2, [r3, #4]
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80035ce:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2201      	movs	r2, #1
 80035d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035dc:	f043 0204 	orr.w	r2, r3, #4
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80035e4:	6878      	ldr	r0, [r7, #4]
 80035e6:	f7ff fdc5 	bl	8003174 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80035ea:	e000      	b.n	80035ee <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80035ec:	bf00      	nop
}
 80035ee:	bf00      	nop
 80035f0:	3720      	adds	r7, #32
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bd80      	pop	{r7, pc}
 80035f6:	bf00      	nop
 80035f8:	40003800 	.word	0x40003800
 80035fc:	40003400 	.word	0x40003400

08003600 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003600:	b480      	push	{r7}
 8003602:	b083      	sub	sp, #12
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003608:	bf00      	nop
 800360a:	370c      	adds	r7, #12
 800360c:	46bd      	mov	sp, r7
 800360e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003612:	4770      	bx	lr

08003614 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b082      	sub	sp, #8
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003620:	1c99      	adds	r1, r3, #2
 8003622:	687a      	ldr	r2, [r7, #4]
 8003624:	6251      	str	r1, [r2, #36]	; 0x24
 8003626:	881a      	ldrh	r2, [r3, #0]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003632:	b29b      	uxth	r3, r3
 8003634:	3b01      	subs	r3, #1
 8003636:	b29a      	uxth	r2, r3
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003640:	b29b      	uxth	r3, r3
 8003642:	2b00      	cmp	r3, #0
 8003644:	d113      	bne.n	800366e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	685a      	ldr	r2, [r3, #4]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003654:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800365a:	b29b      	uxth	r3, r3
 800365c:	2b00      	cmp	r3, #0
 800365e:	d106      	bne.n	800366e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2201      	movs	r2, #1
 8003664:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003668:	6878      	ldr	r0, [r7, #4]
 800366a:	f7ff ffc9 	bl	8003600 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800366e:	bf00      	nop
 8003670:	3708      	adds	r7, #8
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}
	...

08003678 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b082      	sub	sp, #8
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003684:	1c99      	adds	r1, r3, #2
 8003686:	687a      	ldr	r2, [r7, #4]
 8003688:	6251      	str	r1, [r2, #36]	; 0x24
 800368a:	8819      	ldrh	r1, [r3, #0]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a1d      	ldr	r2, [pc, #116]	; (8003708 <I2SEx_TxISR_I2SExt+0x90>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d101      	bne.n	800369a <I2SEx_TxISR_I2SExt+0x22>
 8003696:	4b1d      	ldr	r3, [pc, #116]	; (800370c <I2SEx_TxISR_I2SExt+0x94>)
 8003698:	e001      	b.n	800369e <I2SEx_TxISR_I2SExt+0x26>
 800369a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800369e:	460a      	mov	r2, r1
 80036a0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036a6:	b29b      	uxth	r3, r3
 80036a8:	3b01      	subs	r3, #1
 80036aa:	b29a      	uxth	r2, r3
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036b4:	b29b      	uxth	r3, r3
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d121      	bne.n	80036fe <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4a12      	ldr	r2, [pc, #72]	; (8003708 <I2SEx_TxISR_I2SExt+0x90>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d101      	bne.n	80036c8 <I2SEx_TxISR_I2SExt+0x50>
 80036c4:	4b11      	ldr	r3, [pc, #68]	; (800370c <I2SEx_TxISR_I2SExt+0x94>)
 80036c6:	e001      	b.n	80036cc <I2SEx_TxISR_I2SExt+0x54>
 80036c8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80036cc:	685a      	ldr	r2, [r3, #4]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	490d      	ldr	r1, [pc, #52]	; (8003708 <I2SEx_TxISR_I2SExt+0x90>)
 80036d4:	428b      	cmp	r3, r1
 80036d6:	d101      	bne.n	80036dc <I2SEx_TxISR_I2SExt+0x64>
 80036d8:	4b0c      	ldr	r3, [pc, #48]	; (800370c <I2SEx_TxISR_I2SExt+0x94>)
 80036da:	e001      	b.n	80036e0 <I2SEx_TxISR_I2SExt+0x68>
 80036dc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80036e0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80036e4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80036ea:	b29b      	uxth	r3, r3
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d106      	bne.n	80036fe <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2201      	movs	r2, #1
 80036f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80036f8:	6878      	ldr	r0, [r7, #4]
 80036fa:	f7ff ff81 	bl	8003600 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80036fe:	bf00      	nop
 8003700:	3708      	adds	r7, #8
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}
 8003706:	bf00      	nop
 8003708:	40003800 	.word	0x40003800
 800370c:	40003400 	.word	0x40003400

08003710 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b082      	sub	sp, #8
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	68d8      	ldr	r0, [r3, #12]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003722:	1c99      	adds	r1, r3, #2
 8003724:	687a      	ldr	r2, [r7, #4]
 8003726:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003728:	b282      	uxth	r2, r0
 800372a:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003730:	b29b      	uxth	r3, r3
 8003732:	3b01      	subs	r3, #1
 8003734:	b29a      	uxth	r2, r3
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800373e:	b29b      	uxth	r3, r3
 8003740:	2b00      	cmp	r3, #0
 8003742:	d113      	bne.n	800376c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	685a      	ldr	r2, [r3, #4]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003752:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003758:	b29b      	uxth	r3, r3
 800375a:	2b00      	cmp	r3, #0
 800375c:	d106      	bne.n	800376c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2201      	movs	r2, #1
 8003762:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003766:	6878      	ldr	r0, [r7, #4]
 8003768:	f7ff ff4a 	bl	8003600 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800376c:	bf00      	nop
 800376e:	3708      	adds	r7, #8
 8003770:	46bd      	mov	sp, r7
 8003772:	bd80      	pop	{r7, pc}

08003774 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b082      	sub	sp, #8
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a20      	ldr	r2, [pc, #128]	; (8003804 <I2SEx_RxISR_I2SExt+0x90>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d101      	bne.n	800378a <I2SEx_RxISR_I2SExt+0x16>
 8003786:	4b20      	ldr	r3, [pc, #128]	; (8003808 <I2SEx_RxISR_I2SExt+0x94>)
 8003788:	e001      	b.n	800378e <I2SEx_RxISR_I2SExt+0x1a>
 800378a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800378e:	68d8      	ldr	r0, [r3, #12]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003794:	1c99      	adds	r1, r3, #2
 8003796:	687a      	ldr	r2, [r7, #4]
 8003798:	62d1      	str	r1, [r2, #44]	; 0x2c
 800379a:	b282      	uxth	r2, r0
 800379c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80037a2:	b29b      	uxth	r3, r3
 80037a4:	3b01      	subs	r3, #1
 80037a6:	b29a      	uxth	r2, r3
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80037b0:	b29b      	uxth	r3, r3
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d121      	bne.n	80037fa <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a12      	ldr	r2, [pc, #72]	; (8003804 <I2SEx_RxISR_I2SExt+0x90>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d101      	bne.n	80037c4 <I2SEx_RxISR_I2SExt+0x50>
 80037c0:	4b11      	ldr	r3, [pc, #68]	; (8003808 <I2SEx_RxISR_I2SExt+0x94>)
 80037c2:	e001      	b.n	80037c8 <I2SEx_RxISR_I2SExt+0x54>
 80037c4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037c8:	685a      	ldr	r2, [r3, #4]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	490d      	ldr	r1, [pc, #52]	; (8003804 <I2SEx_RxISR_I2SExt+0x90>)
 80037d0:	428b      	cmp	r3, r1
 80037d2:	d101      	bne.n	80037d8 <I2SEx_RxISR_I2SExt+0x64>
 80037d4:	4b0c      	ldr	r3, [pc, #48]	; (8003808 <I2SEx_RxISR_I2SExt+0x94>)
 80037d6:	e001      	b.n	80037dc <I2SEx_RxISR_I2SExt+0x68>
 80037d8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037dc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80037e0:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037e6:	b29b      	uxth	r3, r3
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d106      	bne.n	80037fa <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2201      	movs	r2, #1
 80037f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80037f4:	6878      	ldr	r0, [r7, #4]
 80037f6:	f7ff ff03 	bl	8003600 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80037fa:	bf00      	nop
 80037fc:	3708      	adds	r7, #8
 80037fe:	46bd      	mov	sp, r7
 8003800:	bd80      	pop	{r7, pc}
 8003802:	bf00      	nop
 8003804:	40003800 	.word	0x40003800
 8003808:	40003400 	.word	0x40003400

0800380c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b086      	sub	sp, #24
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d101      	bne.n	800381e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800381a:	2301      	movs	r3, #1
 800381c:	e25b      	b.n	8003cd6 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f003 0301 	and.w	r3, r3, #1
 8003826:	2b00      	cmp	r3, #0
 8003828:	d075      	beq.n	8003916 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800382a:	4ba3      	ldr	r3, [pc, #652]	; (8003ab8 <HAL_RCC_OscConfig+0x2ac>)
 800382c:	689b      	ldr	r3, [r3, #8]
 800382e:	f003 030c 	and.w	r3, r3, #12
 8003832:	2b04      	cmp	r3, #4
 8003834:	d00c      	beq.n	8003850 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003836:	4ba0      	ldr	r3, [pc, #640]	; (8003ab8 <HAL_RCC_OscConfig+0x2ac>)
 8003838:	689b      	ldr	r3, [r3, #8]
 800383a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800383e:	2b08      	cmp	r3, #8
 8003840:	d112      	bne.n	8003868 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003842:	4b9d      	ldr	r3, [pc, #628]	; (8003ab8 <HAL_RCC_OscConfig+0x2ac>)
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800384a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800384e:	d10b      	bne.n	8003868 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003850:	4b99      	ldr	r3, [pc, #612]	; (8003ab8 <HAL_RCC_OscConfig+0x2ac>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003858:	2b00      	cmp	r3, #0
 800385a:	d05b      	beq.n	8003914 <HAL_RCC_OscConfig+0x108>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d157      	bne.n	8003914 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003864:	2301      	movs	r3, #1
 8003866:	e236      	b.n	8003cd6 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003870:	d106      	bne.n	8003880 <HAL_RCC_OscConfig+0x74>
 8003872:	4b91      	ldr	r3, [pc, #580]	; (8003ab8 <HAL_RCC_OscConfig+0x2ac>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a90      	ldr	r2, [pc, #576]	; (8003ab8 <HAL_RCC_OscConfig+0x2ac>)
 8003878:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800387c:	6013      	str	r3, [r2, #0]
 800387e:	e01d      	b.n	80038bc <HAL_RCC_OscConfig+0xb0>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003888:	d10c      	bne.n	80038a4 <HAL_RCC_OscConfig+0x98>
 800388a:	4b8b      	ldr	r3, [pc, #556]	; (8003ab8 <HAL_RCC_OscConfig+0x2ac>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4a8a      	ldr	r2, [pc, #552]	; (8003ab8 <HAL_RCC_OscConfig+0x2ac>)
 8003890:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003894:	6013      	str	r3, [r2, #0]
 8003896:	4b88      	ldr	r3, [pc, #544]	; (8003ab8 <HAL_RCC_OscConfig+0x2ac>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4a87      	ldr	r2, [pc, #540]	; (8003ab8 <HAL_RCC_OscConfig+0x2ac>)
 800389c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038a0:	6013      	str	r3, [r2, #0]
 80038a2:	e00b      	b.n	80038bc <HAL_RCC_OscConfig+0xb0>
 80038a4:	4b84      	ldr	r3, [pc, #528]	; (8003ab8 <HAL_RCC_OscConfig+0x2ac>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a83      	ldr	r2, [pc, #524]	; (8003ab8 <HAL_RCC_OscConfig+0x2ac>)
 80038aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038ae:	6013      	str	r3, [r2, #0]
 80038b0:	4b81      	ldr	r3, [pc, #516]	; (8003ab8 <HAL_RCC_OscConfig+0x2ac>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a80      	ldr	r2, [pc, #512]	; (8003ab8 <HAL_RCC_OscConfig+0x2ac>)
 80038b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80038ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d013      	beq.n	80038ec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038c4:	f7fd fa70 	bl	8000da8 <HAL_GetTick>
 80038c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038ca:	e008      	b.n	80038de <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80038cc:	f7fd fa6c 	bl	8000da8 <HAL_GetTick>
 80038d0:	4602      	mov	r2, r0
 80038d2:	693b      	ldr	r3, [r7, #16]
 80038d4:	1ad3      	subs	r3, r2, r3
 80038d6:	2b64      	cmp	r3, #100	; 0x64
 80038d8:	d901      	bls.n	80038de <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80038da:	2303      	movs	r3, #3
 80038dc:	e1fb      	b.n	8003cd6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038de:	4b76      	ldr	r3, [pc, #472]	; (8003ab8 <HAL_RCC_OscConfig+0x2ac>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d0f0      	beq.n	80038cc <HAL_RCC_OscConfig+0xc0>
 80038ea:	e014      	b.n	8003916 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038ec:	f7fd fa5c 	bl	8000da8 <HAL_GetTick>
 80038f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038f2:	e008      	b.n	8003906 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80038f4:	f7fd fa58 	bl	8000da8 <HAL_GetTick>
 80038f8:	4602      	mov	r2, r0
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	1ad3      	subs	r3, r2, r3
 80038fe:	2b64      	cmp	r3, #100	; 0x64
 8003900:	d901      	bls.n	8003906 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003902:	2303      	movs	r3, #3
 8003904:	e1e7      	b.n	8003cd6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003906:	4b6c      	ldr	r3, [pc, #432]	; (8003ab8 <HAL_RCC_OscConfig+0x2ac>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800390e:	2b00      	cmp	r3, #0
 8003910:	d1f0      	bne.n	80038f4 <HAL_RCC_OscConfig+0xe8>
 8003912:	e000      	b.n	8003916 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003914:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f003 0302 	and.w	r3, r3, #2
 800391e:	2b00      	cmp	r3, #0
 8003920:	d063      	beq.n	80039ea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003922:	4b65      	ldr	r3, [pc, #404]	; (8003ab8 <HAL_RCC_OscConfig+0x2ac>)
 8003924:	689b      	ldr	r3, [r3, #8]
 8003926:	f003 030c 	and.w	r3, r3, #12
 800392a:	2b00      	cmp	r3, #0
 800392c:	d00b      	beq.n	8003946 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800392e:	4b62      	ldr	r3, [pc, #392]	; (8003ab8 <HAL_RCC_OscConfig+0x2ac>)
 8003930:	689b      	ldr	r3, [r3, #8]
 8003932:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003936:	2b08      	cmp	r3, #8
 8003938:	d11c      	bne.n	8003974 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800393a:	4b5f      	ldr	r3, [pc, #380]	; (8003ab8 <HAL_RCC_OscConfig+0x2ac>)
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003942:	2b00      	cmp	r3, #0
 8003944:	d116      	bne.n	8003974 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003946:	4b5c      	ldr	r3, [pc, #368]	; (8003ab8 <HAL_RCC_OscConfig+0x2ac>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f003 0302 	and.w	r3, r3, #2
 800394e:	2b00      	cmp	r3, #0
 8003950:	d005      	beq.n	800395e <HAL_RCC_OscConfig+0x152>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	68db      	ldr	r3, [r3, #12]
 8003956:	2b01      	cmp	r3, #1
 8003958:	d001      	beq.n	800395e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800395a:	2301      	movs	r3, #1
 800395c:	e1bb      	b.n	8003cd6 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800395e:	4b56      	ldr	r3, [pc, #344]	; (8003ab8 <HAL_RCC_OscConfig+0x2ac>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	691b      	ldr	r3, [r3, #16]
 800396a:	00db      	lsls	r3, r3, #3
 800396c:	4952      	ldr	r1, [pc, #328]	; (8003ab8 <HAL_RCC_OscConfig+0x2ac>)
 800396e:	4313      	orrs	r3, r2
 8003970:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003972:	e03a      	b.n	80039ea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	68db      	ldr	r3, [r3, #12]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d020      	beq.n	80039be <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800397c:	4b4f      	ldr	r3, [pc, #316]	; (8003abc <HAL_RCC_OscConfig+0x2b0>)
 800397e:	2201      	movs	r2, #1
 8003980:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003982:	f7fd fa11 	bl	8000da8 <HAL_GetTick>
 8003986:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003988:	e008      	b.n	800399c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800398a:	f7fd fa0d 	bl	8000da8 <HAL_GetTick>
 800398e:	4602      	mov	r2, r0
 8003990:	693b      	ldr	r3, [r7, #16]
 8003992:	1ad3      	subs	r3, r2, r3
 8003994:	2b02      	cmp	r3, #2
 8003996:	d901      	bls.n	800399c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003998:	2303      	movs	r3, #3
 800399a:	e19c      	b.n	8003cd6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800399c:	4b46      	ldr	r3, [pc, #280]	; (8003ab8 <HAL_RCC_OscConfig+0x2ac>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f003 0302 	and.w	r3, r3, #2
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d0f0      	beq.n	800398a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039a8:	4b43      	ldr	r3, [pc, #268]	; (8003ab8 <HAL_RCC_OscConfig+0x2ac>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	691b      	ldr	r3, [r3, #16]
 80039b4:	00db      	lsls	r3, r3, #3
 80039b6:	4940      	ldr	r1, [pc, #256]	; (8003ab8 <HAL_RCC_OscConfig+0x2ac>)
 80039b8:	4313      	orrs	r3, r2
 80039ba:	600b      	str	r3, [r1, #0]
 80039bc:	e015      	b.n	80039ea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80039be:	4b3f      	ldr	r3, [pc, #252]	; (8003abc <HAL_RCC_OscConfig+0x2b0>)
 80039c0:	2200      	movs	r2, #0
 80039c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039c4:	f7fd f9f0 	bl	8000da8 <HAL_GetTick>
 80039c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039ca:	e008      	b.n	80039de <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80039cc:	f7fd f9ec 	bl	8000da8 <HAL_GetTick>
 80039d0:	4602      	mov	r2, r0
 80039d2:	693b      	ldr	r3, [r7, #16]
 80039d4:	1ad3      	subs	r3, r2, r3
 80039d6:	2b02      	cmp	r3, #2
 80039d8:	d901      	bls.n	80039de <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80039da:	2303      	movs	r3, #3
 80039dc:	e17b      	b.n	8003cd6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039de:	4b36      	ldr	r3, [pc, #216]	; (8003ab8 <HAL_RCC_OscConfig+0x2ac>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f003 0302 	and.w	r3, r3, #2
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d1f0      	bne.n	80039cc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f003 0308 	and.w	r3, r3, #8
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d030      	beq.n	8003a58 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	695b      	ldr	r3, [r3, #20]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d016      	beq.n	8003a2c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80039fe:	4b30      	ldr	r3, [pc, #192]	; (8003ac0 <HAL_RCC_OscConfig+0x2b4>)
 8003a00:	2201      	movs	r2, #1
 8003a02:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a04:	f7fd f9d0 	bl	8000da8 <HAL_GetTick>
 8003a08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a0a:	e008      	b.n	8003a1e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a0c:	f7fd f9cc 	bl	8000da8 <HAL_GetTick>
 8003a10:	4602      	mov	r2, r0
 8003a12:	693b      	ldr	r3, [r7, #16]
 8003a14:	1ad3      	subs	r3, r2, r3
 8003a16:	2b02      	cmp	r3, #2
 8003a18:	d901      	bls.n	8003a1e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003a1a:	2303      	movs	r3, #3
 8003a1c:	e15b      	b.n	8003cd6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a1e:	4b26      	ldr	r3, [pc, #152]	; (8003ab8 <HAL_RCC_OscConfig+0x2ac>)
 8003a20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a22:	f003 0302 	and.w	r3, r3, #2
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d0f0      	beq.n	8003a0c <HAL_RCC_OscConfig+0x200>
 8003a2a:	e015      	b.n	8003a58 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a2c:	4b24      	ldr	r3, [pc, #144]	; (8003ac0 <HAL_RCC_OscConfig+0x2b4>)
 8003a2e:	2200      	movs	r2, #0
 8003a30:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a32:	f7fd f9b9 	bl	8000da8 <HAL_GetTick>
 8003a36:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a38:	e008      	b.n	8003a4c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a3a:	f7fd f9b5 	bl	8000da8 <HAL_GetTick>
 8003a3e:	4602      	mov	r2, r0
 8003a40:	693b      	ldr	r3, [r7, #16]
 8003a42:	1ad3      	subs	r3, r2, r3
 8003a44:	2b02      	cmp	r3, #2
 8003a46:	d901      	bls.n	8003a4c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003a48:	2303      	movs	r3, #3
 8003a4a:	e144      	b.n	8003cd6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a4c:	4b1a      	ldr	r3, [pc, #104]	; (8003ab8 <HAL_RCC_OscConfig+0x2ac>)
 8003a4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a50:	f003 0302 	and.w	r3, r3, #2
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d1f0      	bne.n	8003a3a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f003 0304 	and.w	r3, r3, #4
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	f000 80a0 	beq.w	8003ba6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a66:	2300      	movs	r3, #0
 8003a68:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a6a:	4b13      	ldr	r3, [pc, #76]	; (8003ab8 <HAL_RCC_OscConfig+0x2ac>)
 8003a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d10f      	bne.n	8003a96 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a76:	2300      	movs	r3, #0
 8003a78:	60bb      	str	r3, [r7, #8]
 8003a7a:	4b0f      	ldr	r3, [pc, #60]	; (8003ab8 <HAL_RCC_OscConfig+0x2ac>)
 8003a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a7e:	4a0e      	ldr	r2, [pc, #56]	; (8003ab8 <HAL_RCC_OscConfig+0x2ac>)
 8003a80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a84:	6413      	str	r3, [r2, #64]	; 0x40
 8003a86:	4b0c      	ldr	r3, [pc, #48]	; (8003ab8 <HAL_RCC_OscConfig+0x2ac>)
 8003a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a8e:	60bb      	str	r3, [r7, #8]
 8003a90:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a92:	2301      	movs	r3, #1
 8003a94:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a96:	4b0b      	ldr	r3, [pc, #44]	; (8003ac4 <HAL_RCC_OscConfig+0x2b8>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d121      	bne.n	8003ae6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003aa2:	4b08      	ldr	r3, [pc, #32]	; (8003ac4 <HAL_RCC_OscConfig+0x2b8>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4a07      	ldr	r2, [pc, #28]	; (8003ac4 <HAL_RCC_OscConfig+0x2b8>)
 8003aa8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003aac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003aae:	f7fd f97b 	bl	8000da8 <HAL_GetTick>
 8003ab2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ab4:	e011      	b.n	8003ada <HAL_RCC_OscConfig+0x2ce>
 8003ab6:	bf00      	nop
 8003ab8:	40023800 	.word	0x40023800
 8003abc:	42470000 	.word	0x42470000
 8003ac0:	42470e80 	.word	0x42470e80
 8003ac4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ac8:	f7fd f96e 	bl	8000da8 <HAL_GetTick>
 8003acc:	4602      	mov	r2, r0
 8003ace:	693b      	ldr	r3, [r7, #16]
 8003ad0:	1ad3      	subs	r3, r2, r3
 8003ad2:	2b02      	cmp	r3, #2
 8003ad4:	d901      	bls.n	8003ada <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003ad6:	2303      	movs	r3, #3
 8003ad8:	e0fd      	b.n	8003cd6 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ada:	4b81      	ldr	r3, [pc, #516]	; (8003ce0 <HAL_RCC_OscConfig+0x4d4>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d0f0      	beq.n	8003ac8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	689b      	ldr	r3, [r3, #8]
 8003aea:	2b01      	cmp	r3, #1
 8003aec:	d106      	bne.n	8003afc <HAL_RCC_OscConfig+0x2f0>
 8003aee:	4b7d      	ldr	r3, [pc, #500]	; (8003ce4 <HAL_RCC_OscConfig+0x4d8>)
 8003af0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003af2:	4a7c      	ldr	r2, [pc, #496]	; (8003ce4 <HAL_RCC_OscConfig+0x4d8>)
 8003af4:	f043 0301 	orr.w	r3, r3, #1
 8003af8:	6713      	str	r3, [r2, #112]	; 0x70
 8003afa:	e01c      	b.n	8003b36 <HAL_RCC_OscConfig+0x32a>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	689b      	ldr	r3, [r3, #8]
 8003b00:	2b05      	cmp	r3, #5
 8003b02:	d10c      	bne.n	8003b1e <HAL_RCC_OscConfig+0x312>
 8003b04:	4b77      	ldr	r3, [pc, #476]	; (8003ce4 <HAL_RCC_OscConfig+0x4d8>)
 8003b06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b08:	4a76      	ldr	r2, [pc, #472]	; (8003ce4 <HAL_RCC_OscConfig+0x4d8>)
 8003b0a:	f043 0304 	orr.w	r3, r3, #4
 8003b0e:	6713      	str	r3, [r2, #112]	; 0x70
 8003b10:	4b74      	ldr	r3, [pc, #464]	; (8003ce4 <HAL_RCC_OscConfig+0x4d8>)
 8003b12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b14:	4a73      	ldr	r2, [pc, #460]	; (8003ce4 <HAL_RCC_OscConfig+0x4d8>)
 8003b16:	f043 0301 	orr.w	r3, r3, #1
 8003b1a:	6713      	str	r3, [r2, #112]	; 0x70
 8003b1c:	e00b      	b.n	8003b36 <HAL_RCC_OscConfig+0x32a>
 8003b1e:	4b71      	ldr	r3, [pc, #452]	; (8003ce4 <HAL_RCC_OscConfig+0x4d8>)
 8003b20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b22:	4a70      	ldr	r2, [pc, #448]	; (8003ce4 <HAL_RCC_OscConfig+0x4d8>)
 8003b24:	f023 0301 	bic.w	r3, r3, #1
 8003b28:	6713      	str	r3, [r2, #112]	; 0x70
 8003b2a:	4b6e      	ldr	r3, [pc, #440]	; (8003ce4 <HAL_RCC_OscConfig+0x4d8>)
 8003b2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b2e:	4a6d      	ldr	r2, [pc, #436]	; (8003ce4 <HAL_RCC_OscConfig+0x4d8>)
 8003b30:	f023 0304 	bic.w	r3, r3, #4
 8003b34:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	689b      	ldr	r3, [r3, #8]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d015      	beq.n	8003b6a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b3e:	f7fd f933 	bl	8000da8 <HAL_GetTick>
 8003b42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b44:	e00a      	b.n	8003b5c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b46:	f7fd f92f 	bl	8000da8 <HAL_GetTick>
 8003b4a:	4602      	mov	r2, r0
 8003b4c:	693b      	ldr	r3, [r7, #16]
 8003b4e:	1ad3      	subs	r3, r2, r3
 8003b50:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d901      	bls.n	8003b5c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003b58:	2303      	movs	r3, #3
 8003b5a:	e0bc      	b.n	8003cd6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b5c:	4b61      	ldr	r3, [pc, #388]	; (8003ce4 <HAL_RCC_OscConfig+0x4d8>)
 8003b5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b60:	f003 0302 	and.w	r3, r3, #2
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d0ee      	beq.n	8003b46 <HAL_RCC_OscConfig+0x33a>
 8003b68:	e014      	b.n	8003b94 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b6a:	f7fd f91d 	bl	8000da8 <HAL_GetTick>
 8003b6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b70:	e00a      	b.n	8003b88 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b72:	f7fd f919 	bl	8000da8 <HAL_GetTick>
 8003b76:	4602      	mov	r2, r0
 8003b78:	693b      	ldr	r3, [r7, #16]
 8003b7a:	1ad3      	subs	r3, r2, r3
 8003b7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d901      	bls.n	8003b88 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003b84:	2303      	movs	r3, #3
 8003b86:	e0a6      	b.n	8003cd6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b88:	4b56      	ldr	r3, [pc, #344]	; (8003ce4 <HAL_RCC_OscConfig+0x4d8>)
 8003b8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b8c:	f003 0302 	and.w	r3, r3, #2
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d1ee      	bne.n	8003b72 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003b94:	7dfb      	ldrb	r3, [r7, #23]
 8003b96:	2b01      	cmp	r3, #1
 8003b98:	d105      	bne.n	8003ba6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b9a:	4b52      	ldr	r3, [pc, #328]	; (8003ce4 <HAL_RCC_OscConfig+0x4d8>)
 8003b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b9e:	4a51      	ldr	r2, [pc, #324]	; (8003ce4 <HAL_RCC_OscConfig+0x4d8>)
 8003ba0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ba4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	699b      	ldr	r3, [r3, #24]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	f000 8092 	beq.w	8003cd4 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003bb0:	4b4c      	ldr	r3, [pc, #304]	; (8003ce4 <HAL_RCC_OscConfig+0x4d8>)
 8003bb2:	689b      	ldr	r3, [r3, #8]
 8003bb4:	f003 030c 	and.w	r3, r3, #12
 8003bb8:	2b08      	cmp	r3, #8
 8003bba:	d05c      	beq.n	8003c76 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	699b      	ldr	r3, [r3, #24]
 8003bc0:	2b02      	cmp	r3, #2
 8003bc2:	d141      	bne.n	8003c48 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bc4:	4b48      	ldr	r3, [pc, #288]	; (8003ce8 <HAL_RCC_OscConfig+0x4dc>)
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bca:	f7fd f8ed 	bl	8000da8 <HAL_GetTick>
 8003bce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bd0:	e008      	b.n	8003be4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003bd2:	f7fd f8e9 	bl	8000da8 <HAL_GetTick>
 8003bd6:	4602      	mov	r2, r0
 8003bd8:	693b      	ldr	r3, [r7, #16]
 8003bda:	1ad3      	subs	r3, r2, r3
 8003bdc:	2b02      	cmp	r3, #2
 8003bde:	d901      	bls.n	8003be4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003be0:	2303      	movs	r3, #3
 8003be2:	e078      	b.n	8003cd6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003be4:	4b3f      	ldr	r3, [pc, #252]	; (8003ce4 <HAL_RCC_OscConfig+0x4d8>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d1f0      	bne.n	8003bd2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	69da      	ldr	r2, [r3, #28]
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6a1b      	ldr	r3, [r3, #32]
 8003bf8:	431a      	orrs	r2, r3
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bfe:	019b      	lsls	r3, r3, #6
 8003c00:	431a      	orrs	r2, r3
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c06:	085b      	lsrs	r3, r3, #1
 8003c08:	3b01      	subs	r3, #1
 8003c0a:	041b      	lsls	r3, r3, #16
 8003c0c:	431a      	orrs	r2, r3
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c12:	061b      	lsls	r3, r3, #24
 8003c14:	4933      	ldr	r1, [pc, #204]	; (8003ce4 <HAL_RCC_OscConfig+0x4d8>)
 8003c16:	4313      	orrs	r3, r2
 8003c18:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c1a:	4b33      	ldr	r3, [pc, #204]	; (8003ce8 <HAL_RCC_OscConfig+0x4dc>)
 8003c1c:	2201      	movs	r2, #1
 8003c1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c20:	f7fd f8c2 	bl	8000da8 <HAL_GetTick>
 8003c24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c26:	e008      	b.n	8003c3a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c28:	f7fd f8be 	bl	8000da8 <HAL_GetTick>
 8003c2c:	4602      	mov	r2, r0
 8003c2e:	693b      	ldr	r3, [r7, #16]
 8003c30:	1ad3      	subs	r3, r2, r3
 8003c32:	2b02      	cmp	r3, #2
 8003c34:	d901      	bls.n	8003c3a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003c36:	2303      	movs	r3, #3
 8003c38:	e04d      	b.n	8003cd6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c3a:	4b2a      	ldr	r3, [pc, #168]	; (8003ce4 <HAL_RCC_OscConfig+0x4d8>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d0f0      	beq.n	8003c28 <HAL_RCC_OscConfig+0x41c>
 8003c46:	e045      	b.n	8003cd4 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c48:	4b27      	ldr	r3, [pc, #156]	; (8003ce8 <HAL_RCC_OscConfig+0x4dc>)
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c4e:	f7fd f8ab 	bl	8000da8 <HAL_GetTick>
 8003c52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c54:	e008      	b.n	8003c68 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c56:	f7fd f8a7 	bl	8000da8 <HAL_GetTick>
 8003c5a:	4602      	mov	r2, r0
 8003c5c:	693b      	ldr	r3, [r7, #16]
 8003c5e:	1ad3      	subs	r3, r2, r3
 8003c60:	2b02      	cmp	r3, #2
 8003c62:	d901      	bls.n	8003c68 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003c64:	2303      	movs	r3, #3
 8003c66:	e036      	b.n	8003cd6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c68:	4b1e      	ldr	r3, [pc, #120]	; (8003ce4 <HAL_RCC_OscConfig+0x4d8>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d1f0      	bne.n	8003c56 <HAL_RCC_OscConfig+0x44a>
 8003c74:	e02e      	b.n	8003cd4 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	699b      	ldr	r3, [r3, #24]
 8003c7a:	2b01      	cmp	r3, #1
 8003c7c:	d101      	bne.n	8003c82 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	e029      	b.n	8003cd6 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003c82:	4b18      	ldr	r3, [pc, #96]	; (8003ce4 <HAL_RCC_OscConfig+0x4d8>)
 8003c84:	689b      	ldr	r3, [r3, #8]
 8003c86:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	69db      	ldr	r3, [r3, #28]
 8003c92:	429a      	cmp	r2, r3
 8003c94:	d11c      	bne.n	8003cd0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ca0:	429a      	cmp	r2, r3
 8003ca2:	d115      	bne.n	8003cd0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003ca4:	68fa      	ldr	r2, [r7, #12]
 8003ca6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003caa:	4013      	ands	r3, r2
 8003cac:	687a      	ldr	r2, [r7, #4]
 8003cae:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d10d      	bne.n	8003cd0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003cbe:	429a      	cmp	r2, r3
 8003cc0:	d106      	bne.n	8003cd0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003ccc:	429a      	cmp	r2, r3
 8003cce:	d001      	beq.n	8003cd4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	e000      	b.n	8003cd6 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003cd4:	2300      	movs	r3, #0
}
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	3718      	adds	r7, #24
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bd80      	pop	{r7, pc}
 8003cde:	bf00      	nop
 8003ce0:	40007000 	.word	0x40007000
 8003ce4:	40023800 	.word	0x40023800
 8003ce8:	42470060 	.word	0x42470060

08003cec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b084      	sub	sp, #16
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
 8003cf4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d101      	bne.n	8003d00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	e0cc      	b.n	8003e9a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003d00:	4b68      	ldr	r3, [pc, #416]	; (8003ea4 <HAL_RCC_ClockConfig+0x1b8>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f003 030f 	and.w	r3, r3, #15
 8003d08:	683a      	ldr	r2, [r7, #0]
 8003d0a:	429a      	cmp	r2, r3
 8003d0c:	d90c      	bls.n	8003d28 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d0e:	4b65      	ldr	r3, [pc, #404]	; (8003ea4 <HAL_RCC_ClockConfig+0x1b8>)
 8003d10:	683a      	ldr	r2, [r7, #0]
 8003d12:	b2d2      	uxtb	r2, r2
 8003d14:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d16:	4b63      	ldr	r3, [pc, #396]	; (8003ea4 <HAL_RCC_ClockConfig+0x1b8>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f003 030f 	and.w	r3, r3, #15
 8003d1e:	683a      	ldr	r2, [r7, #0]
 8003d20:	429a      	cmp	r2, r3
 8003d22:	d001      	beq.n	8003d28 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003d24:	2301      	movs	r3, #1
 8003d26:	e0b8      	b.n	8003e9a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f003 0302 	and.w	r3, r3, #2
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d020      	beq.n	8003d76 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f003 0304 	and.w	r3, r3, #4
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d005      	beq.n	8003d4c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d40:	4b59      	ldr	r3, [pc, #356]	; (8003ea8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d42:	689b      	ldr	r3, [r3, #8]
 8003d44:	4a58      	ldr	r2, [pc, #352]	; (8003ea8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d46:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003d4a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f003 0308 	and.w	r3, r3, #8
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d005      	beq.n	8003d64 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003d58:	4b53      	ldr	r3, [pc, #332]	; (8003ea8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d5a:	689b      	ldr	r3, [r3, #8]
 8003d5c:	4a52      	ldr	r2, [pc, #328]	; (8003ea8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d5e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003d62:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d64:	4b50      	ldr	r3, [pc, #320]	; (8003ea8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d66:	689b      	ldr	r3, [r3, #8]
 8003d68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	689b      	ldr	r3, [r3, #8]
 8003d70:	494d      	ldr	r1, [pc, #308]	; (8003ea8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d72:	4313      	orrs	r3, r2
 8003d74:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f003 0301 	and.w	r3, r3, #1
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d044      	beq.n	8003e0c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	2b01      	cmp	r3, #1
 8003d88:	d107      	bne.n	8003d9a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d8a:	4b47      	ldr	r3, [pc, #284]	; (8003ea8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d119      	bne.n	8003dca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d96:	2301      	movs	r3, #1
 8003d98:	e07f      	b.n	8003e9a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	2b02      	cmp	r3, #2
 8003da0:	d003      	beq.n	8003daa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003da6:	2b03      	cmp	r3, #3
 8003da8:	d107      	bne.n	8003dba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003daa:	4b3f      	ldr	r3, [pc, #252]	; (8003ea8 <HAL_RCC_ClockConfig+0x1bc>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d109      	bne.n	8003dca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003db6:	2301      	movs	r3, #1
 8003db8:	e06f      	b.n	8003e9a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dba:	4b3b      	ldr	r3, [pc, #236]	; (8003ea8 <HAL_RCC_ClockConfig+0x1bc>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f003 0302 	and.w	r3, r3, #2
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d101      	bne.n	8003dca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	e067      	b.n	8003e9a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003dca:	4b37      	ldr	r3, [pc, #220]	; (8003ea8 <HAL_RCC_ClockConfig+0x1bc>)
 8003dcc:	689b      	ldr	r3, [r3, #8]
 8003dce:	f023 0203 	bic.w	r2, r3, #3
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	4934      	ldr	r1, [pc, #208]	; (8003ea8 <HAL_RCC_ClockConfig+0x1bc>)
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ddc:	f7fc ffe4 	bl	8000da8 <HAL_GetTick>
 8003de0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003de2:	e00a      	b.n	8003dfa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003de4:	f7fc ffe0 	bl	8000da8 <HAL_GetTick>
 8003de8:	4602      	mov	r2, r0
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	1ad3      	subs	r3, r2, r3
 8003dee:	f241 3288 	movw	r2, #5000	; 0x1388
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d901      	bls.n	8003dfa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003df6:	2303      	movs	r3, #3
 8003df8:	e04f      	b.n	8003e9a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003dfa:	4b2b      	ldr	r3, [pc, #172]	; (8003ea8 <HAL_RCC_ClockConfig+0x1bc>)
 8003dfc:	689b      	ldr	r3, [r3, #8]
 8003dfe:	f003 020c 	and.w	r2, r3, #12
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	009b      	lsls	r3, r3, #2
 8003e08:	429a      	cmp	r2, r3
 8003e0a:	d1eb      	bne.n	8003de4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003e0c:	4b25      	ldr	r3, [pc, #148]	; (8003ea4 <HAL_RCC_ClockConfig+0x1b8>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f003 030f 	and.w	r3, r3, #15
 8003e14:	683a      	ldr	r2, [r7, #0]
 8003e16:	429a      	cmp	r2, r3
 8003e18:	d20c      	bcs.n	8003e34 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e1a:	4b22      	ldr	r3, [pc, #136]	; (8003ea4 <HAL_RCC_ClockConfig+0x1b8>)
 8003e1c:	683a      	ldr	r2, [r7, #0]
 8003e1e:	b2d2      	uxtb	r2, r2
 8003e20:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e22:	4b20      	ldr	r3, [pc, #128]	; (8003ea4 <HAL_RCC_ClockConfig+0x1b8>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f003 030f 	and.w	r3, r3, #15
 8003e2a:	683a      	ldr	r2, [r7, #0]
 8003e2c:	429a      	cmp	r2, r3
 8003e2e:	d001      	beq.n	8003e34 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003e30:	2301      	movs	r3, #1
 8003e32:	e032      	b.n	8003e9a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f003 0304 	and.w	r3, r3, #4
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d008      	beq.n	8003e52 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e40:	4b19      	ldr	r3, [pc, #100]	; (8003ea8 <HAL_RCC_ClockConfig+0x1bc>)
 8003e42:	689b      	ldr	r3, [r3, #8]
 8003e44:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	68db      	ldr	r3, [r3, #12]
 8003e4c:	4916      	ldr	r1, [pc, #88]	; (8003ea8 <HAL_RCC_ClockConfig+0x1bc>)
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f003 0308 	and.w	r3, r3, #8
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d009      	beq.n	8003e72 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e5e:	4b12      	ldr	r3, [pc, #72]	; (8003ea8 <HAL_RCC_ClockConfig+0x1bc>)
 8003e60:	689b      	ldr	r3, [r3, #8]
 8003e62:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	691b      	ldr	r3, [r3, #16]
 8003e6a:	00db      	lsls	r3, r3, #3
 8003e6c:	490e      	ldr	r1, [pc, #56]	; (8003ea8 <HAL_RCC_ClockConfig+0x1bc>)
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003e72:	f000 f821 	bl	8003eb8 <HAL_RCC_GetSysClockFreq>
 8003e76:	4601      	mov	r1, r0
 8003e78:	4b0b      	ldr	r3, [pc, #44]	; (8003ea8 <HAL_RCC_ClockConfig+0x1bc>)
 8003e7a:	689b      	ldr	r3, [r3, #8]
 8003e7c:	091b      	lsrs	r3, r3, #4
 8003e7e:	f003 030f 	and.w	r3, r3, #15
 8003e82:	4a0a      	ldr	r2, [pc, #40]	; (8003eac <HAL_RCC_ClockConfig+0x1c0>)
 8003e84:	5cd3      	ldrb	r3, [r2, r3]
 8003e86:	fa21 f303 	lsr.w	r3, r1, r3
 8003e8a:	4a09      	ldr	r2, [pc, #36]	; (8003eb0 <HAL_RCC_ClockConfig+0x1c4>)
 8003e8c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003e8e:	4b09      	ldr	r3, [pc, #36]	; (8003eb4 <HAL_RCC_ClockConfig+0x1c8>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4618      	mov	r0, r3
 8003e94:	f7fc ff44 	bl	8000d20 <HAL_InitTick>

  return HAL_OK;
 8003e98:	2300      	movs	r3, #0
}
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	3710      	adds	r7, #16
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	bd80      	pop	{r7, pc}
 8003ea2:	bf00      	nop
 8003ea4:	40023c00 	.word	0x40023c00
 8003ea8:	40023800 	.word	0x40023800
 8003eac:	0800ae20 	.word	0x0800ae20
 8003eb0:	20000000 	.word	0x20000000
 8003eb4:	20000004 	.word	0x20000004

08003eb8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003eb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003eba:	b085      	sub	sp, #20
 8003ebc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	607b      	str	r3, [r7, #4]
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	60fb      	str	r3, [r7, #12]
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003eca:	2300      	movs	r3, #0
 8003ecc:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003ece:	4b63      	ldr	r3, [pc, #396]	; (800405c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003ed0:	689b      	ldr	r3, [r3, #8]
 8003ed2:	f003 030c 	and.w	r3, r3, #12
 8003ed6:	2b04      	cmp	r3, #4
 8003ed8:	d007      	beq.n	8003eea <HAL_RCC_GetSysClockFreq+0x32>
 8003eda:	2b08      	cmp	r3, #8
 8003edc:	d008      	beq.n	8003ef0 <HAL_RCC_GetSysClockFreq+0x38>
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	f040 80b4 	bne.w	800404c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003ee4:	4b5e      	ldr	r3, [pc, #376]	; (8004060 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003ee6:	60bb      	str	r3, [r7, #8]
       break;
 8003ee8:	e0b3      	b.n	8004052 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003eea:	4b5e      	ldr	r3, [pc, #376]	; (8004064 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8003eec:	60bb      	str	r3, [r7, #8]
      break;
 8003eee:	e0b0      	b.n	8004052 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003ef0:	4b5a      	ldr	r3, [pc, #360]	; (800405c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ef8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003efa:	4b58      	ldr	r3, [pc, #352]	; (800405c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003efc:	685b      	ldr	r3, [r3, #4]
 8003efe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d04a      	beq.n	8003f9c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f06:	4b55      	ldr	r3, [pc, #340]	; (800405c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	099b      	lsrs	r3, r3, #6
 8003f0c:	f04f 0400 	mov.w	r4, #0
 8003f10:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003f14:	f04f 0200 	mov.w	r2, #0
 8003f18:	ea03 0501 	and.w	r5, r3, r1
 8003f1c:	ea04 0602 	and.w	r6, r4, r2
 8003f20:	4629      	mov	r1, r5
 8003f22:	4632      	mov	r2, r6
 8003f24:	f04f 0300 	mov.w	r3, #0
 8003f28:	f04f 0400 	mov.w	r4, #0
 8003f2c:	0154      	lsls	r4, r2, #5
 8003f2e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003f32:	014b      	lsls	r3, r1, #5
 8003f34:	4619      	mov	r1, r3
 8003f36:	4622      	mov	r2, r4
 8003f38:	1b49      	subs	r1, r1, r5
 8003f3a:	eb62 0206 	sbc.w	r2, r2, r6
 8003f3e:	f04f 0300 	mov.w	r3, #0
 8003f42:	f04f 0400 	mov.w	r4, #0
 8003f46:	0194      	lsls	r4, r2, #6
 8003f48:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003f4c:	018b      	lsls	r3, r1, #6
 8003f4e:	1a5b      	subs	r3, r3, r1
 8003f50:	eb64 0402 	sbc.w	r4, r4, r2
 8003f54:	f04f 0100 	mov.w	r1, #0
 8003f58:	f04f 0200 	mov.w	r2, #0
 8003f5c:	00e2      	lsls	r2, r4, #3
 8003f5e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003f62:	00d9      	lsls	r1, r3, #3
 8003f64:	460b      	mov	r3, r1
 8003f66:	4614      	mov	r4, r2
 8003f68:	195b      	adds	r3, r3, r5
 8003f6a:	eb44 0406 	adc.w	r4, r4, r6
 8003f6e:	f04f 0100 	mov.w	r1, #0
 8003f72:	f04f 0200 	mov.w	r2, #0
 8003f76:	0262      	lsls	r2, r4, #9
 8003f78:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003f7c:	0259      	lsls	r1, r3, #9
 8003f7e:	460b      	mov	r3, r1
 8003f80:	4614      	mov	r4, r2
 8003f82:	4618      	mov	r0, r3
 8003f84:	4621      	mov	r1, r4
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	f04f 0400 	mov.w	r4, #0
 8003f8c:	461a      	mov	r2, r3
 8003f8e:	4623      	mov	r3, r4
 8003f90:	f7fc f922 	bl	80001d8 <__aeabi_uldivmod>
 8003f94:	4603      	mov	r3, r0
 8003f96:	460c      	mov	r4, r1
 8003f98:	60fb      	str	r3, [r7, #12]
 8003f9a:	e049      	b.n	8004030 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f9c:	4b2f      	ldr	r3, [pc, #188]	; (800405c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	099b      	lsrs	r3, r3, #6
 8003fa2:	f04f 0400 	mov.w	r4, #0
 8003fa6:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003faa:	f04f 0200 	mov.w	r2, #0
 8003fae:	ea03 0501 	and.w	r5, r3, r1
 8003fb2:	ea04 0602 	and.w	r6, r4, r2
 8003fb6:	4629      	mov	r1, r5
 8003fb8:	4632      	mov	r2, r6
 8003fba:	f04f 0300 	mov.w	r3, #0
 8003fbe:	f04f 0400 	mov.w	r4, #0
 8003fc2:	0154      	lsls	r4, r2, #5
 8003fc4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003fc8:	014b      	lsls	r3, r1, #5
 8003fca:	4619      	mov	r1, r3
 8003fcc:	4622      	mov	r2, r4
 8003fce:	1b49      	subs	r1, r1, r5
 8003fd0:	eb62 0206 	sbc.w	r2, r2, r6
 8003fd4:	f04f 0300 	mov.w	r3, #0
 8003fd8:	f04f 0400 	mov.w	r4, #0
 8003fdc:	0194      	lsls	r4, r2, #6
 8003fde:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003fe2:	018b      	lsls	r3, r1, #6
 8003fe4:	1a5b      	subs	r3, r3, r1
 8003fe6:	eb64 0402 	sbc.w	r4, r4, r2
 8003fea:	f04f 0100 	mov.w	r1, #0
 8003fee:	f04f 0200 	mov.w	r2, #0
 8003ff2:	00e2      	lsls	r2, r4, #3
 8003ff4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003ff8:	00d9      	lsls	r1, r3, #3
 8003ffa:	460b      	mov	r3, r1
 8003ffc:	4614      	mov	r4, r2
 8003ffe:	195b      	adds	r3, r3, r5
 8004000:	eb44 0406 	adc.w	r4, r4, r6
 8004004:	f04f 0100 	mov.w	r1, #0
 8004008:	f04f 0200 	mov.w	r2, #0
 800400c:	02a2      	lsls	r2, r4, #10
 800400e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004012:	0299      	lsls	r1, r3, #10
 8004014:	460b      	mov	r3, r1
 8004016:	4614      	mov	r4, r2
 8004018:	4618      	mov	r0, r3
 800401a:	4621      	mov	r1, r4
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	f04f 0400 	mov.w	r4, #0
 8004022:	461a      	mov	r2, r3
 8004024:	4623      	mov	r3, r4
 8004026:	f7fc f8d7 	bl	80001d8 <__aeabi_uldivmod>
 800402a:	4603      	mov	r3, r0
 800402c:	460c      	mov	r4, r1
 800402e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004030:	4b0a      	ldr	r3, [pc, #40]	; (800405c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004032:	685b      	ldr	r3, [r3, #4]
 8004034:	0c1b      	lsrs	r3, r3, #16
 8004036:	f003 0303 	and.w	r3, r3, #3
 800403a:	3301      	adds	r3, #1
 800403c:	005b      	lsls	r3, r3, #1
 800403e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004040:	68fa      	ldr	r2, [r7, #12]
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	fbb2 f3f3 	udiv	r3, r2, r3
 8004048:	60bb      	str	r3, [r7, #8]
      break;
 800404a:	e002      	b.n	8004052 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800404c:	4b04      	ldr	r3, [pc, #16]	; (8004060 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800404e:	60bb      	str	r3, [r7, #8]
      break;
 8004050:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004052:	68bb      	ldr	r3, [r7, #8]
}
 8004054:	4618      	mov	r0, r3
 8004056:	3714      	adds	r7, #20
 8004058:	46bd      	mov	sp, r7
 800405a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800405c:	40023800 	.word	0x40023800
 8004060:	00f42400 	.word	0x00f42400
 8004064:	007a1200 	.word	0x007a1200

08004068 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004068:	b480      	push	{r7}
 800406a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800406c:	4b03      	ldr	r3, [pc, #12]	; (800407c <HAL_RCC_GetHCLKFreq+0x14>)
 800406e:	681b      	ldr	r3, [r3, #0]
}
 8004070:	4618      	mov	r0, r3
 8004072:	46bd      	mov	sp, r7
 8004074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004078:	4770      	bx	lr
 800407a:	bf00      	nop
 800407c:	20000000 	.word	0x20000000

08004080 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004084:	f7ff fff0 	bl	8004068 <HAL_RCC_GetHCLKFreq>
 8004088:	4601      	mov	r1, r0
 800408a:	4b05      	ldr	r3, [pc, #20]	; (80040a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800408c:	689b      	ldr	r3, [r3, #8]
 800408e:	0a9b      	lsrs	r3, r3, #10
 8004090:	f003 0307 	and.w	r3, r3, #7
 8004094:	4a03      	ldr	r2, [pc, #12]	; (80040a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004096:	5cd3      	ldrb	r3, [r2, r3]
 8004098:	fa21 f303 	lsr.w	r3, r1, r3
}
 800409c:	4618      	mov	r0, r3
 800409e:	bd80      	pop	{r7, pc}
 80040a0:	40023800 	.word	0x40023800
 80040a4:	0800ae30 	.word	0x0800ae30

080040a8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b086      	sub	sp, #24
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80040b0:	2300      	movs	r3, #0
 80040b2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80040b4:	2300      	movs	r3, #0
 80040b6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f003 0301 	and.w	r3, r3, #1
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d105      	bne.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d035      	beq.n	800413c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80040d0:	4b62      	ldr	r3, [pc, #392]	; (800425c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80040d2:	2200      	movs	r2, #0
 80040d4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80040d6:	f7fc fe67 	bl	8000da8 <HAL_GetTick>
 80040da:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80040dc:	e008      	b.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80040de:	f7fc fe63 	bl	8000da8 <HAL_GetTick>
 80040e2:	4602      	mov	r2, r0
 80040e4:	697b      	ldr	r3, [r7, #20]
 80040e6:	1ad3      	subs	r3, r2, r3
 80040e8:	2b02      	cmp	r3, #2
 80040ea:	d901      	bls.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80040ec:	2303      	movs	r3, #3
 80040ee:	e0b0      	b.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80040f0:	4b5b      	ldr	r3, [pc, #364]	; (8004260 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d1f0      	bne.n	80040de <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	019a      	lsls	r2, r3, #6
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	689b      	ldr	r3, [r3, #8]
 8004106:	071b      	lsls	r3, r3, #28
 8004108:	4955      	ldr	r1, [pc, #340]	; (8004260 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800410a:	4313      	orrs	r3, r2
 800410c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004110:	4b52      	ldr	r3, [pc, #328]	; (800425c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004112:	2201      	movs	r2, #1
 8004114:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004116:	f7fc fe47 	bl	8000da8 <HAL_GetTick>
 800411a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800411c:	e008      	b.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800411e:	f7fc fe43 	bl	8000da8 <HAL_GetTick>
 8004122:	4602      	mov	r2, r0
 8004124:	697b      	ldr	r3, [r7, #20]
 8004126:	1ad3      	subs	r3, r2, r3
 8004128:	2b02      	cmp	r3, #2
 800412a:	d901      	bls.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800412c:	2303      	movs	r3, #3
 800412e:	e090      	b.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004130:	4b4b      	ldr	r3, [pc, #300]	; (8004260 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004138:	2b00      	cmp	r3, #0
 800413a:	d0f0      	beq.n	800411e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f003 0302 	and.w	r3, r3, #2
 8004144:	2b00      	cmp	r3, #0
 8004146:	f000 8083 	beq.w	8004250 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800414a:	2300      	movs	r3, #0
 800414c:	60fb      	str	r3, [r7, #12]
 800414e:	4b44      	ldr	r3, [pc, #272]	; (8004260 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004152:	4a43      	ldr	r2, [pc, #268]	; (8004260 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004154:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004158:	6413      	str	r3, [r2, #64]	; 0x40
 800415a:	4b41      	ldr	r3, [pc, #260]	; (8004260 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800415c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800415e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004162:	60fb      	str	r3, [r7, #12]
 8004164:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004166:	4b3f      	ldr	r3, [pc, #252]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4a3e      	ldr	r2, [pc, #248]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800416c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004170:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004172:	f7fc fe19 	bl	8000da8 <HAL_GetTick>
 8004176:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004178:	e008      	b.n	800418c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800417a:	f7fc fe15 	bl	8000da8 <HAL_GetTick>
 800417e:	4602      	mov	r2, r0
 8004180:	697b      	ldr	r3, [r7, #20]
 8004182:	1ad3      	subs	r3, r2, r3
 8004184:	2b02      	cmp	r3, #2
 8004186:	d901      	bls.n	800418c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004188:	2303      	movs	r3, #3
 800418a:	e062      	b.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800418c:	4b35      	ldr	r3, [pc, #212]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004194:	2b00      	cmp	r3, #0
 8004196:	d0f0      	beq.n	800417a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004198:	4b31      	ldr	r3, [pc, #196]	; (8004260 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800419a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800419c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041a0:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80041a2:	693b      	ldr	r3, [r7, #16]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d02f      	beq.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	68db      	ldr	r3, [r3, #12]
 80041ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041b0:	693a      	ldr	r2, [r7, #16]
 80041b2:	429a      	cmp	r2, r3
 80041b4:	d028      	beq.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80041b6:	4b2a      	ldr	r3, [pc, #168]	; (8004260 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80041b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041be:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80041c0:	4b29      	ldr	r3, [pc, #164]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80041c2:	2201      	movs	r2, #1
 80041c4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80041c6:	4b28      	ldr	r3, [pc, #160]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80041c8:	2200      	movs	r2, #0
 80041ca:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80041cc:	4a24      	ldr	r2, [pc, #144]	; (8004260 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80041ce:	693b      	ldr	r3, [r7, #16]
 80041d0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80041d2:	4b23      	ldr	r3, [pc, #140]	; (8004260 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80041d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041d6:	f003 0301 	and.w	r3, r3, #1
 80041da:	2b01      	cmp	r3, #1
 80041dc:	d114      	bne.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80041de:	f7fc fde3 	bl	8000da8 <HAL_GetTick>
 80041e2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041e4:	e00a      	b.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80041e6:	f7fc fddf 	bl	8000da8 <HAL_GetTick>
 80041ea:	4602      	mov	r2, r0
 80041ec:	697b      	ldr	r3, [r7, #20]
 80041ee:	1ad3      	subs	r3, r2, r3
 80041f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d901      	bls.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80041f8:	2303      	movs	r3, #3
 80041fa:	e02a      	b.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041fc:	4b18      	ldr	r3, [pc, #96]	; (8004260 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80041fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004200:	f003 0302 	and.w	r3, r3, #2
 8004204:	2b00      	cmp	r3, #0
 8004206:	d0ee      	beq.n	80041e6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	68db      	ldr	r3, [r3, #12]
 800420c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004210:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004214:	d10d      	bne.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004216:	4b12      	ldr	r3, [pc, #72]	; (8004260 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004218:	689b      	ldr	r3, [r3, #8]
 800421a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	68db      	ldr	r3, [r3, #12]
 8004222:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004226:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800422a:	490d      	ldr	r1, [pc, #52]	; (8004260 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800422c:	4313      	orrs	r3, r2
 800422e:	608b      	str	r3, [r1, #8]
 8004230:	e005      	b.n	800423e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004232:	4b0b      	ldr	r3, [pc, #44]	; (8004260 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004234:	689b      	ldr	r3, [r3, #8]
 8004236:	4a0a      	ldr	r2, [pc, #40]	; (8004260 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004238:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800423c:	6093      	str	r3, [r2, #8]
 800423e:	4b08      	ldr	r3, [pc, #32]	; (8004260 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004240:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	68db      	ldr	r3, [r3, #12]
 8004246:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800424a:	4905      	ldr	r1, [pc, #20]	; (8004260 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800424c:	4313      	orrs	r3, r2
 800424e:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004250:	2300      	movs	r3, #0
}
 8004252:	4618      	mov	r0, r3
 8004254:	3718      	adds	r7, #24
 8004256:	46bd      	mov	sp, r7
 8004258:	bd80      	pop	{r7, pc}
 800425a:	bf00      	nop
 800425c:	42470068 	.word	0x42470068
 8004260:	40023800 	.word	0x40023800
 8004264:	40007000 	.word	0x40007000
 8004268:	42470e40 	.word	0x42470e40

0800426c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800426c:	b480      	push	{r7}
 800426e:	b087      	sub	sp, #28
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004274:	2300      	movs	r3, #0
 8004276:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004278:	2300      	movs	r3, #0
 800427a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 800427c:	2300      	movs	r3, #0
 800427e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004280:	2300      	movs	r3, #0
 8004282:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2b01      	cmp	r3, #1
 8004288:	d13d      	bne.n	8004306 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800428a:	4b22      	ldr	r3, [pc, #136]	; (8004314 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800428c:	689b      	ldr	r3, [r3, #8]
 800428e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004292:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d004      	beq.n	80042a4 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 800429a:	2b01      	cmp	r3, #1
 800429c:	d12f      	bne.n	80042fe <HAL_RCCEx_GetPeriphCLKFreq+0x92>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800429e:	4b1e      	ldr	r3, [pc, #120]	; (8004318 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80042a0:	617b      	str	r3, [r7, #20]
          break;
 80042a2:	e02f      	b.n	8004304 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80042a4:	4b1b      	ldr	r3, [pc, #108]	; (8004314 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80042a6:	685b      	ldr	r3, [r3, #4]
 80042a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80042b0:	d108      	bne.n	80042c4 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80042b2:	4b18      	ldr	r3, [pc, #96]	; (8004314 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80042ba:	4a18      	ldr	r2, [pc, #96]	; (800431c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80042bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80042c0:	613b      	str	r3, [r7, #16]
 80042c2:	e007      	b.n	80042d4 <HAL_RCCEx_GetPeriphCLKFreq+0x68>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80042c4:	4b13      	ldr	r3, [pc, #76]	; (8004314 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80042c6:	685b      	ldr	r3, [r3, #4]
 80042c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80042cc:	4a14      	ldr	r2, [pc, #80]	; (8004320 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80042ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80042d2:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80042d4:	4b0f      	ldr	r3, [pc, #60]	; (8004314 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80042d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042da:	099b      	lsrs	r3, r3, #6
 80042dc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80042e0:	693b      	ldr	r3, [r7, #16]
 80042e2:	fb02 f303 	mul.w	r3, r2, r3
 80042e6:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80042e8:	4b0a      	ldr	r3, [pc, #40]	; (8004314 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80042ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042ee:	0f1b      	lsrs	r3, r3, #28
 80042f0:	f003 0307 	and.w	r3, r3, #7
 80042f4:	68ba      	ldr	r2, [r7, #8]
 80042f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80042fa:	617b      	str	r3, [r7, #20]
          break;
 80042fc:	e002      	b.n	8004304 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80042fe:	2300      	movs	r3, #0
 8004300:	617b      	str	r3, [r7, #20]
          break;
 8004302:	bf00      	nop
        }
      }
      break;
 8004304:	bf00      	nop
    }
  }
  return frequency;
 8004306:	697b      	ldr	r3, [r7, #20]
}
 8004308:	4618      	mov	r0, r3
 800430a:	371c      	adds	r7, #28
 800430c:	46bd      	mov	sp, r7
 800430e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004312:	4770      	bx	lr
 8004314:	40023800 	.word	0x40023800
 8004318:	00bb8000 	.word	0x00bb8000
 800431c:	007a1200 	.word	0x007a1200
 8004320:	00f42400 	.word	0x00f42400

08004324 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b082      	sub	sp, #8
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d101      	bne.n	8004336 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004332:	2301      	movs	r3, #1
 8004334:	e056      	b.n	80043e4 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2200      	movs	r2, #0
 800433a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004342:	b2db      	uxtb	r3, r3
 8004344:	2b00      	cmp	r3, #0
 8004346:	d106      	bne.n	8004356 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2200      	movs	r2, #0
 800434c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004350:	6878      	ldr	r0, [r7, #4]
 8004352:	f7fc fbd7 	bl	8000b04 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2202      	movs	r2, #2
 800435a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	681a      	ldr	r2, [r3, #0]
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800436c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	685a      	ldr	r2, [r3, #4]
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	689b      	ldr	r3, [r3, #8]
 8004376:	431a      	orrs	r2, r3
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	68db      	ldr	r3, [r3, #12]
 800437c:	431a      	orrs	r2, r3
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	691b      	ldr	r3, [r3, #16]
 8004382:	431a      	orrs	r2, r3
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	695b      	ldr	r3, [r3, #20]
 8004388:	431a      	orrs	r2, r3
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	699b      	ldr	r3, [r3, #24]
 800438e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004392:	431a      	orrs	r2, r3
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	69db      	ldr	r3, [r3, #28]
 8004398:	431a      	orrs	r2, r3
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6a1b      	ldr	r3, [r3, #32]
 800439e:	ea42 0103 	orr.w	r1, r2, r3
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	430a      	orrs	r2, r1
 80043ac:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	699b      	ldr	r3, [r3, #24]
 80043b2:	0c1b      	lsrs	r3, r3, #16
 80043b4:	f003 0104 	and.w	r1, r3, #4
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	430a      	orrs	r2, r1
 80043c2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	69da      	ldr	r2, [r3, #28]
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80043d2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2200      	movs	r2, #0
 80043d8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2201      	movs	r2, #1
 80043de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80043e2:	2300      	movs	r3, #0
}
 80043e4:	4618      	mov	r0, r3
 80043e6:	3708      	adds	r7, #8
 80043e8:	46bd      	mov	sp, r7
 80043ea:	bd80      	pop	{r7, pc}

080043ec <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80043ec:	b084      	sub	sp, #16
 80043ee:	b580      	push	{r7, lr}
 80043f0:	b084      	sub	sp, #16
 80043f2:	af00      	add	r7, sp, #0
 80043f4:	6078      	str	r0, [r7, #4]
 80043f6:	f107 001c 	add.w	r0, r7, #28
 80043fa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80043fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004400:	2b01      	cmp	r3, #1
 8004402:	d122      	bne.n	800444a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004408:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	68db      	ldr	r3, [r3, #12]
 8004414:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004418:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800441c:	687a      	ldr	r2, [r7, #4]
 800441e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	68db      	ldr	r3, [r3, #12]
 8004424:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800442c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800442e:	2b01      	cmp	r3, #1
 8004430:	d105      	bne.n	800443e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	68db      	ldr	r3, [r3, #12]
 8004436:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800443e:	6878      	ldr	r0, [r7, #4]
 8004440:	f000 f94a 	bl	80046d8 <USB_CoreReset>
 8004444:	4603      	mov	r3, r0
 8004446:	73fb      	strb	r3, [r7, #15]
 8004448:	e01a      	b.n	8004480 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	68db      	ldr	r3, [r3, #12]
 800444e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8004456:	6878      	ldr	r0, [r7, #4]
 8004458:	f000 f93e 	bl	80046d8 <USB_CoreReset>
 800445c:	4603      	mov	r3, r0
 800445e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004460:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004462:	2b00      	cmp	r3, #0
 8004464:	d106      	bne.n	8004474 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800446a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	639a      	str	r2, [r3, #56]	; 0x38
 8004472:	e005      	b.n	8004480 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004478:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004482:	2b01      	cmp	r3, #1
 8004484:	d10b      	bne.n	800449e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	689b      	ldr	r3, [r3, #8]
 800448a:	f043 0206 	orr.w	r2, r3, #6
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	689b      	ldr	r3, [r3, #8]
 8004496:	f043 0220 	orr.w	r2, r3, #32
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800449e:	7bfb      	ldrb	r3, [r7, #15]
}
 80044a0:	4618      	mov	r0, r3
 80044a2:	3710      	adds	r7, #16
 80044a4:	46bd      	mov	sp, r7
 80044a6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80044aa:	b004      	add	sp, #16
 80044ac:	4770      	bx	lr

080044ae <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80044ae:	b480      	push	{r7}
 80044b0:	b083      	sub	sp, #12
 80044b2:	af00      	add	r7, sp, #0
 80044b4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	689b      	ldr	r3, [r3, #8]
 80044ba:	f043 0201 	orr.w	r2, r3, #1
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80044c2:	2300      	movs	r3, #0
}
 80044c4:	4618      	mov	r0, r3
 80044c6:	370c      	adds	r7, #12
 80044c8:	46bd      	mov	sp, r7
 80044ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ce:	4770      	bx	lr

080044d0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80044d0:	b480      	push	{r7}
 80044d2:	b083      	sub	sp, #12
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	689b      	ldr	r3, [r3, #8]
 80044dc:	f023 0201 	bic.w	r2, r3, #1
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80044e4:	2300      	movs	r3, #0
}
 80044e6:	4618      	mov	r0, r3
 80044e8:	370c      	adds	r7, #12
 80044ea:	46bd      	mov	sp, r7
 80044ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f0:	4770      	bx	lr

080044f2 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80044f2:	b580      	push	{r7, lr}
 80044f4:	b082      	sub	sp, #8
 80044f6:	af00      	add	r7, sp, #0
 80044f8:	6078      	str	r0, [r7, #4]
 80044fa:	460b      	mov	r3, r1
 80044fc:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	68db      	ldr	r3, [r3, #12]
 8004502:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800450a:	78fb      	ldrb	r3, [r7, #3]
 800450c:	2b01      	cmp	r3, #1
 800450e:	d106      	bne.n	800451e <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	68db      	ldr	r3, [r3, #12]
 8004514:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	60da      	str	r2, [r3, #12]
 800451c:	e00b      	b.n	8004536 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800451e:	78fb      	ldrb	r3, [r7, #3]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d106      	bne.n	8004532 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	68db      	ldr	r3, [r3, #12]
 8004528:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	60da      	str	r2, [r3, #12]
 8004530:	e001      	b.n	8004536 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8004532:	2301      	movs	r3, #1
 8004534:	e003      	b.n	800453e <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8004536:	2032      	movs	r0, #50	; 0x32
 8004538:	f7fc fc42 	bl	8000dc0 <HAL_Delay>

  return HAL_OK;
 800453c:	2300      	movs	r3, #0
}
 800453e:	4618      	mov	r0, r3
 8004540:	3708      	adds	r7, #8
 8004542:	46bd      	mov	sp, r7
 8004544:	bd80      	pop	{r7, pc}
	...

08004548 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004548:	b480      	push	{r7}
 800454a:	b085      	sub	sp, #20
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
 8004550:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8004552:	2300      	movs	r3, #0
 8004554:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	019b      	lsls	r3, r3, #6
 800455a:	f043 0220 	orr.w	r2, r3, #32
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	3301      	adds	r3, #1
 8004566:	60fb      	str	r3, [r7, #12]
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	4a09      	ldr	r2, [pc, #36]	; (8004590 <USB_FlushTxFifo+0x48>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d901      	bls.n	8004574 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8004570:	2303      	movs	r3, #3
 8004572:	e006      	b.n	8004582 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	691b      	ldr	r3, [r3, #16]
 8004578:	f003 0320 	and.w	r3, r3, #32
 800457c:	2b20      	cmp	r3, #32
 800457e:	d0f0      	beq.n	8004562 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004580:	2300      	movs	r3, #0
}
 8004582:	4618      	mov	r0, r3
 8004584:	3714      	adds	r7, #20
 8004586:	46bd      	mov	sp, r7
 8004588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458c:	4770      	bx	lr
 800458e:	bf00      	nop
 8004590:	00030d40 	.word	0x00030d40

08004594 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004594:	b480      	push	{r7}
 8004596:	b085      	sub	sp, #20
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800459c:	2300      	movs	r3, #0
 800459e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2210      	movs	r2, #16
 80045a4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	3301      	adds	r3, #1
 80045aa:	60fb      	str	r3, [r7, #12]
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	4a09      	ldr	r2, [pc, #36]	; (80045d4 <USB_FlushRxFifo+0x40>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d901      	bls.n	80045b8 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80045b4:	2303      	movs	r3, #3
 80045b6:	e006      	b.n	80045c6 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	691b      	ldr	r3, [r3, #16]
 80045bc:	f003 0310 	and.w	r3, r3, #16
 80045c0:	2b10      	cmp	r3, #16
 80045c2:	d0f0      	beq.n	80045a6 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80045c4:	2300      	movs	r3, #0
}
 80045c6:	4618      	mov	r0, r3
 80045c8:	3714      	adds	r7, #20
 80045ca:	46bd      	mov	sp, r7
 80045cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d0:	4770      	bx	lr
 80045d2:	bf00      	nop
 80045d4:	00030d40 	.word	0x00030d40

080045d8 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80045d8:	b480      	push	{r7}
 80045da:	b089      	sub	sp, #36	; 0x24
 80045dc:	af00      	add	r7, sp, #0
 80045de:	60f8      	str	r0, [r7, #12]
 80045e0:	60b9      	str	r1, [r7, #8]
 80045e2:	4611      	mov	r1, r2
 80045e4:	461a      	mov	r2, r3
 80045e6:	460b      	mov	r3, r1
 80045e8:	71fb      	strb	r3, [r7, #7]
 80045ea:	4613      	mov	r3, r2
 80045ec:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 80045f2:	68bb      	ldr	r3, [r7, #8]
 80045f4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 80045f6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d11a      	bne.n	8004634 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80045fe:	88bb      	ldrh	r3, [r7, #4]
 8004600:	3303      	adds	r3, #3
 8004602:	089b      	lsrs	r3, r3, #2
 8004604:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004606:	2300      	movs	r3, #0
 8004608:	61bb      	str	r3, [r7, #24]
 800460a:	e00f      	b.n	800462c <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800460c:	79fb      	ldrb	r3, [r7, #7]
 800460e:	031a      	lsls	r2, r3, #12
 8004610:	697b      	ldr	r3, [r7, #20]
 8004612:	4413      	add	r3, r2
 8004614:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004618:	461a      	mov	r2, r3
 800461a:	69fb      	ldr	r3, [r7, #28]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004620:	69fb      	ldr	r3, [r7, #28]
 8004622:	3304      	adds	r3, #4
 8004624:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004626:	69bb      	ldr	r3, [r7, #24]
 8004628:	3301      	adds	r3, #1
 800462a:	61bb      	str	r3, [r7, #24]
 800462c:	69ba      	ldr	r2, [r7, #24]
 800462e:	693b      	ldr	r3, [r7, #16]
 8004630:	429a      	cmp	r2, r3
 8004632:	d3eb      	bcc.n	800460c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004634:	2300      	movs	r3, #0
}
 8004636:	4618      	mov	r0, r3
 8004638:	3724      	adds	r7, #36	; 0x24
 800463a:	46bd      	mov	sp, r7
 800463c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004640:	4770      	bx	lr

08004642 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004642:	b480      	push	{r7}
 8004644:	b089      	sub	sp, #36	; 0x24
 8004646:	af00      	add	r7, sp, #0
 8004648:	60f8      	str	r0, [r7, #12]
 800464a:	60b9      	str	r1, [r7, #8]
 800464c:	4613      	mov	r3, r2
 800464e:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8004654:	68bb      	ldr	r3, [r7, #8]
 8004656:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8004658:	88fb      	ldrh	r3, [r7, #6]
 800465a:	3303      	adds	r3, #3
 800465c:	089b      	lsrs	r3, r3, #2
 800465e:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8004660:	2300      	movs	r3, #0
 8004662:	61bb      	str	r3, [r7, #24]
 8004664:	e00b      	b.n	800467e <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004666:	697b      	ldr	r3, [r7, #20]
 8004668:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800466c:	681a      	ldr	r2, [r3, #0]
 800466e:	69fb      	ldr	r3, [r7, #28]
 8004670:	601a      	str	r2, [r3, #0]
    pDest++;
 8004672:	69fb      	ldr	r3, [r7, #28]
 8004674:	3304      	adds	r3, #4
 8004676:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8004678:	69bb      	ldr	r3, [r7, #24]
 800467a:	3301      	adds	r3, #1
 800467c:	61bb      	str	r3, [r7, #24]
 800467e:	69ba      	ldr	r2, [r7, #24]
 8004680:	693b      	ldr	r3, [r7, #16]
 8004682:	429a      	cmp	r2, r3
 8004684:	d3ef      	bcc.n	8004666 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8004686:	69fb      	ldr	r3, [r7, #28]
}
 8004688:	4618      	mov	r0, r3
 800468a:	3724      	adds	r7, #36	; 0x24
 800468c:	46bd      	mov	sp, r7
 800468e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004692:	4770      	bx	lr

08004694 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004694:	b480      	push	{r7}
 8004696:	b085      	sub	sp, #20
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	695b      	ldr	r3, [r3, #20]
 80046a0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	699b      	ldr	r3, [r3, #24]
 80046a6:	68fa      	ldr	r2, [r7, #12]
 80046a8:	4013      	ands	r3, r2
 80046aa:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80046ac:	68fb      	ldr	r3, [r7, #12]
}
 80046ae:	4618      	mov	r0, r3
 80046b0:	3714      	adds	r7, #20
 80046b2:	46bd      	mov	sp, r7
 80046b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b8:	4770      	bx	lr

080046ba <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80046ba:	b480      	push	{r7}
 80046bc:	b083      	sub	sp, #12
 80046be:	af00      	add	r7, sp, #0
 80046c0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	695b      	ldr	r3, [r3, #20]
 80046c6:	f003 0301 	and.w	r3, r3, #1
}
 80046ca:	4618      	mov	r0, r3
 80046cc:	370c      	adds	r7, #12
 80046ce:	46bd      	mov	sp, r7
 80046d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d4:	4770      	bx	lr
	...

080046d8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80046d8:	b480      	push	{r7}
 80046da:	b085      	sub	sp, #20
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80046e0:	2300      	movs	r3, #0
 80046e2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	3301      	adds	r3, #1
 80046e8:	60fb      	str	r3, [r7, #12]
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	4a13      	ldr	r2, [pc, #76]	; (800473c <USB_CoreReset+0x64>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d901      	bls.n	80046f6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80046f2:	2303      	movs	r3, #3
 80046f4:	e01b      	b.n	800472e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	691b      	ldr	r3, [r3, #16]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	daf2      	bge.n	80046e4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80046fe:	2300      	movs	r3, #0
 8004700:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	691b      	ldr	r3, [r3, #16]
 8004706:	f043 0201 	orr.w	r2, r3, #1
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	3301      	adds	r3, #1
 8004712:	60fb      	str	r3, [r7, #12]
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	4a09      	ldr	r2, [pc, #36]	; (800473c <USB_CoreReset+0x64>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d901      	bls.n	8004720 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800471c:	2303      	movs	r3, #3
 800471e:	e006      	b.n	800472e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	691b      	ldr	r3, [r3, #16]
 8004724:	f003 0301 	and.w	r3, r3, #1
 8004728:	2b01      	cmp	r3, #1
 800472a:	d0f0      	beq.n	800470e <USB_CoreReset+0x36>

  return HAL_OK;
 800472c:	2300      	movs	r3, #0
}
 800472e:	4618      	mov	r0, r3
 8004730:	3714      	adds	r7, #20
 8004732:	46bd      	mov	sp, r7
 8004734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004738:	4770      	bx	lr
 800473a:	bf00      	nop
 800473c:	00030d40 	.word	0x00030d40

08004740 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004740:	b084      	sub	sp, #16
 8004742:	b580      	push	{r7, lr}
 8004744:	b084      	sub	sp, #16
 8004746:	af00      	add	r7, sp, #0
 8004748:	6078      	str	r0, [r7, #4]
 800474a:	f107 001c 	add.w	r0, r7, #28
 800474e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004756:	68bb      	ldr	r3, [r7, #8]
 8004758:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800475c:	461a      	mov	r2, r3
 800475e:	2300      	movs	r3, #0
 8004760:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004766:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004772:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800477e:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800478a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800478e:	2b00      	cmp	r3, #0
 8004790:	d018      	beq.n	80047c4 <USB_HostInit+0x84>
  {
    if (cfg.speed == USB_OTG_SPEED_FULL)
 8004792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004794:	2b03      	cmp	r3, #3
 8004796:	d10a      	bne.n	80047ae <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	68ba      	ldr	r2, [r7, #8]
 80047a2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80047a6:	f043 0304 	orr.w	r3, r3, #4
 80047aa:	6013      	str	r3, [r2, #0]
 80047ac:	e014      	b.n	80047d8 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80047ae:	68bb      	ldr	r3, [r7, #8]
 80047b0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	68ba      	ldr	r2, [r7, #8]
 80047b8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80047bc:	f023 0304 	bic.w	r3, r3, #4
 80047c0:	6013      	str	r3, [r2, #0]
 80047c2:	e009      	b.n	80047d8 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80047c4:	68bb      	ldr	r3, [r7, #8]
 80047c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	68ba      	ldr	r2, [r7, #8]
 80047ce:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80047d2:	f023 0304 	bic.w	r3, r3, #4
 80047d6:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 80047d8:	2110      	movs	r1, #16
 80047da:	6878      	ldr	r0, [r7, #4]
 80047dc:	f7ff feb4 	bl	8004548 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80047e0:	6878      	ldr	r0, [r7, #4]
 80047e2:	f7ff fed7 	bl	8004594 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80047e6:	2300      	movs	r3, #0
 80047e8:	60fb      	str	r3, [r7, #12]
 80047ea:	e015      	b.n	8004818 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	015a      	lsls	r2, r3, #5
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	4413      	add	r3, r2
 80047f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047f8:	461a      	mov	r2, r3
 80047fa:	f04f 33ff 	mov.w	r3, #4294967295
 80047fe:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	015a      	lsls	r2, r3, #5
 8004804:	68bb      	ldr	r3, [r7, #8]
 8004806:	4413      	add	r3, r2
 8004808:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800480c:	461a      	mov	r2, r3
 800480e:	2300      	movs	r3, #0
 8004810:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	3301      	adds	r3, #1
 8004816:	60fb      	str	r3, [r7, #12]
 8004818:	6a3b      	ldr	r3, [r7, #32]
 800481a:	68fa      	ldr	r2, [r7, #12]
 800481c:	429a      	cmp	r2, r3
 800481e:	d3e5      	bcc.n	80047ec <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8004820:	2101      	movs	r1, #1
 8004822:	6878      	ldr	r0, [r7, #4]
 8004824:	f000 f8ac 	bl	8004980 <USB_DriveVbus>

  HAL_Delay(200U);
 8004828:	20c8      	movs	r0, #200	; 0xc8
 800482a:	f7fc fac9 	bl	8000dc0 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2200      	movs	r2, #0
 8004832:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	f04f 32ff 	mov.w	r2, #4294967295
 800483a:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004840:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004844:	2b00      	cmp	r3, #0
 8004846:	d00b      	beq.n	8004860 <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800484e:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	4a14      	ldr	r2, [pc, #80]	; (80048a4 <USB_HostInit+0x164>)
 8004854:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	4a13      	ldr	r2, [pc, #76]	; (80048a8 <USB_HostInit+0x168>)
 800485a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800485e:	e009      	b.n	8004874 <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2280      	movs	r2, #128	; 0x80
 8004864:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	4a10      	ldr	r2, [pc, #64]	; (80048ac <USB_HostInit+0x16c>)
 800486a:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	4a10      	ldr	r2, [pc, #64]	; (80048b0 <USB_HostInit+0x170>)
 8004870:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004876:	2b00      	cmp	r3, #0
 8004878:	d105      	bne.n	8004886 <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	699b      	ldr	r3, [r3, #24]
 800487e:	f043 0210 	orr.w	r2, r3, #16
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	699a      	ldr	r2, [r3, #24]
 800488a:	4b0a      	ldr	r3, [pc, #40]	; (80048b4 <USB_HostInit+0x174>)
 800488c:	4313      	orrs	r3, r2
 800488e:	687a      	ldr	r2, [r7, #4]
 8004890:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8004892:	2300      	movs	r3, #0
}
 8004894:	4618      	mov	r0, r3
 8004896:	3710      	adds	r7, #16
 8004898:	46bd      	mov	sp, r7
 800489a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800489e:	b004      	add	sp, #16
 80048a0:	4770      	bx	lr
 80048a2:	bf00      	nop
 80048a4:	01000200 	.word	0x01000200
 80048a8:	00e00300 	.word	0x00e00300
 80048ac:	00600080 	.word	0x00600080
 80048b0:	004000e0 	.word	0x004000e0
 80048b4:	a3200008 	.word	0xa3200008

080048b8 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80048b8:	b480      	push	{r7}
 80048ba:	b085      	sub	sp, #20
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
 80048c0:	460b      	mov	r3, r1
 80048c2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	68fa      	ldr	r2, [r7, #12]
 80048d2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80048d6:	f023 0303 	bic.w	r3, r3, #3
 80048da:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80048e2:	681a      	ldr	r2, [r3, #0]
 80048e4:	78fb      	ldrb	r3, [r7, #3]
 80048e6:	f003 0303 	and.w	r3, r3, #3
 80048ea:	68f9      	ldr	r1, [r7, #12]
 80048ec:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80048f0:	4313      	orrs	r3, r2
 80048f2:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80048f4:	78fb      	ldrb	r3, [r7, #3]
 80048f6:	2b01      	cmp	r3, #1
 80048f8:	d107      	bne.n	800490a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004900:	461a      	mov	r2, r3
 8004902:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8004906:	6053      	str	r3, [r2, #4]
 8004908:	e009      	b.n	800491e <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800490a:	78fb      	ldrb	r3, [r7, #3]
 800490c:	2b02      	cmp	r3, #2
 800490e:	d106      	bne.n	800491e <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004916:	461a      	mov	r2, r3
 8004918:	f241 7370 	movw	r3, #6000	; 0x1770
 800491c:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800491e:	2300      	movs	r3, #0
}
 8004920:	4618      	mov	r0, r3
 8004922:	3714      	adds	r7, #20
 8004924:	46bd      	mov	sp, r7
 8004926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492a:	4770      	bx	lr

0800492c <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b084      	sub	sp, #16
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8004938:	2300      	movs	r3, #0
 800493a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8004946:	68bb      	ldr	r3, [r7, #8]
 8004948:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800494c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800494e:	68bb      	ldr	r3, [r7, #8]
 8004950:	68fa      	ldr	r2, [r7, #12]
 8004952:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004956:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800495a:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800495c:	2064      	movs	r0, #100	; 0x64
 800495e:	f7fc fa2f 	bl	8000dc0 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8004962:	68bb      	ldr	r3, [r7, #8]
 8004964:	68fa      	ldr	r2, [r7, #12]
 8004966:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800496a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800496e:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8004970:	200a      	movs	r0, #10
 8004972:	f7fc fa25 	bl	8000dc0 <HAL_Delay>

  return HAL_OK;
 8004976:	2300      	movs	r3, #0
}
 8004978:	4618      	mov	r0, r3
 800497a:	3710      	adds	r7, #16
 800497c:	46bd      	mov	sp, r7
 800497e:	bd80      	pop	{r7, pc}

08004980 <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8004980:	b480      	push	{r7}
 8004982:	b085      	sub	sp, #20
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
 8004988:	460b      	mov	r3, r1
 800498a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8004990:	2300      	movs	r3, #0
 8004992:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800499e:	68bb      	ldr	r3, [r7, #8]
 80049a0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80049a4:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80049a6:	68bb      	ldr	r3, [r7, #8]
 80049a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d109      	bne.n	80049c4 <USB_DriveVbus+0x44>
 80049b0:	78fb      	ldrb	r3, [r7, #3]
 80049b2:	2b01      	cmp	r3, #1
 80049b4:	d106      	bne.n	80049c4 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80049b6:	68bb      	ldr	r3, [r7, #8]
 80049b8:	68fa      	ldr	r2, [r7, #12]
 80049ba:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80049be:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80049c2:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80049c4:	68bb      	ldr	r3, [r7, #8]
 80049c6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80049ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049ce:	d109      	bne.n	80049e4 <USB_DriveVbus+0x64>
 80049d0:	78fb      	ldrb	r3, [r7, #3]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d106      	bne.n	80049e4 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80049d6:	68bb      	ldr	r3, [r7, #8]
 80049d8:	68fa      	ldr	r2, [r7, #12]
 80049da:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80049de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80049e2:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80049e4:	2300      	movs	r3, #0
}
 80049e6:	4618      	mov	r0, r3
 80049e8:	3714      	adds	r7, #20
 80049ea:	46bd      	mov	sp, r7
 80049ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f0:	4770      	bx	lr

080049f2 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80049f2:	b480      	push	{r7}
 80049f4:	b085      	sub	sp, #20
 80049f6:	af00      	add	r7, sp, #0
 80049f8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80049fe:	2300      	movs	r3, #0
 8004a00:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8004a0c:	68bb      	ldr	r3, [r7, #8]
 8004a0e:	0c5b      	lsrs	r3, r3, #17
 8004a10:	f003 0303 	and.w	r3, r3, #3
}
 8004a14:	4618      	mov	r0, r3
 8004a16:	3714      	adds	r7, #20
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1e:	4770      	bx	lr

08004a20 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
*/
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8004a20:	b480      	push	{r7}
 8004a22:	b085      	sub	sp, #20
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004a32:	689b      	ldr	r3, [r3, #8]
 8004a34:	b29b      	uxth	r3, r3
}
 8004a36:	4618      	mov	r0, r3
 8004a38:	3714      	adds	r7, #20
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a40:	4770      	bx	lr
	...

08004a44 <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 8004a44:	b480      	push	{r7}
 8004a46:	b087      	sub	sp, #28
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
 8004a4c:	4608      	mov	r0, r1
 8004a4e:	4611      	mov	r1, r2
 8004a50:	461a      	mov	r2, r3
 8004a52:	4603      	mov	r3, r0
 8004a54:	70fb      	strb	r3, [r7, #3]
 8004a56:	460b      	mov	r3, r1
 8004a58:	70bb      	strb	r3, [r7, #2]
 8004a5a:	4613      	mov	r3, r2
 8004a5c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8004a5e:	2300      	movs	r3, #0
 8004a60:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8004a66:	78fb      	ldrb	r3, [r7, #3]
 8004a68:	015a      	lsls	r2, r3, #5
 8004a6a:	68bb      	ldr	r3, [r7, #8]
 8004a6c:	4413      	add	r3, r2
 8004a6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a72:	461a      	mov	r2, r3
 8004a74:	f04f 33ff 	mov.w	r3, #4294967295
 8004a78:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8004a7a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004a7e:	2b03      	cmp	r3, #3
 8004a80:	d87e      	bhi.n	8004b80 <USB_HC_Init+0x13c>
 8004a82:	a201      	add	r2, pc, #4	; (adr r2, 8004a88 <USB_HC_Init+0x44>)
 8004a84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a88:	08004a99 	.word	0x08004a99
 8004a8c:	08004b43 	.word	0x08004b43
 8004a90:	08004a99 	.word	0x08004a99
 8004a94:	08004b05 	.word	0x08004b05
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004a98:	78fb      	ldrb	r3, [r7, #3]
 8004a9a:	015a      	lsls	r2, r3, #5
 8004a9c:	68bb      	ldr	r3, [r7, #8]
 8004a9e:	4413      	add	r3, r2
 8004aa0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004aa4:	461a      	mov	r2, r3
 8004aa6:	f240 439d 	movw	r3, #1181	; 0x49d
 8004aaa:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8004aac:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	da10      	bge.n	8004ad6 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004ab4:	78fb      	ldrb	r3, [r7, #3]
 8004ab6:	015a      	lsls	r2, r3, #5
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	4413      	add	r3, r2
 8004abc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ac0:	68db      	ldr	r3, [r3, #12]
 8004ac2:	78fa      	ldrb	r2, [r7, #3]
 8004ac4:	0151      	lsls	r1, r2, #5
 8004ac6:	68ba      	ldr	r2, [r7, #8]
 8004ac8:	440a      	add	r2, r1
 8004aca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004ace:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ad2:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 8004ad4:	e057      	b.n	8004b86 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ada:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d051      	beq.n	8004b86 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8004ae2:	78fb      	ldrb	r3, [r7, #3]
 8004ae4:	015a      	lsls	r2, r3, #5
 8004ae6:	68bb      	ldr	r3, [r7, #8]
 8004ae8:	4413      	add	r3, r2
 8004aea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004aee:	68db      	ldr	r3, [r3, #12]
 8004af0:	78fa      	ldrb	r2, [r7, #3]
 8004af2:	0151      	lsls	r1, r2, #5
 8004af4:	68ba      	ldr	r2, [r7, #8]
 8004af6:	440a      	add	r2, r1
 8004af8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004afc:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004b00:	60d3      	str	r3, [r2, #12]
      break;
 8004b02:	e040      	b.n	8004b86 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004b04:	78fb      	ldrb	r3, [r7, #3]
 8004b06:	015a      	lsls	r2, r3, #5
 8004b08:	68bb      	ldr	r3, [r7, #8]
 8004b0a:	4413      	add	r3, r2
 8004b0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b10:	461a      	mov	r2, r3
 8004b12:	f240 639d 	movw	r3, #1693	; 0x69d
 8004b16:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8004b18:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	da34      	bge.n	8004b8a <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004b20:	78fb      	ldrb	r3, [r7, #3]
 8004b22:	015a      	lsls	r2, r3, #5
 8004b24:	68bb      	ldr	r3, [r7, #8]
 8004b26:	4413      	add	r3, r2
 8004b28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b2c:	68db      	ldr	r3, [r3, #12]
 8004b2e:	78fa      	ldrb	r2, [r7, #3]
 8004b30:	0151      	lsls	r1, r2, #5
 8004b32:	68ba      	ldr	r2, [r7, #8]
 8004b34:	440a      	add	r2, r1
 8004b36:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004b3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b3e:	60d3      	str	r3, [r2, #12]
      }

      break;
 8004b40:	e023      	b.n	8004b8a <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004b42:	78fb      	ldrb	r3, [r7, #3]
 8004b44:	015a      	lsls	r2, r3, #5
 8004b46:	68bb      	ldr	r3, [r7, #8]
 8004b48:	4413      	add	r3, r2
 8004b4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b4e:	461a      	mov	r2, r3
 8004b50:	f240 2325 	movw	r3, #549	; 0x225
 8004b54:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8004b56:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	da17      	bge.n	8004b8e <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8004b5e:	78fb      	ldrb	r3, [r7, #3]
 8004b60:	015a      	lsls	r2, r3, #5
 8004b62:	68bb      	ldr	r3, [r7, #8]
 8004b64:	4413      	add	r3, r2
 8004b66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b6a:	68db      	ldr	r3, [r3, #12]
 8004b6c:	78fa      	ldrb	r2, [r7, #3]
 8004b6e:	0151      	lsls	r1, r2, #5
 8004b70:	68ba      	ldr	r2, [r7, #8]
 8004b72:	440a      	add	r2, r1
 8004b74:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004b78:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8004b7c:	60d3      	str	r3, [r2, #12]
      }
      break;
 8004b7e:	e006      	b.n	8004b8e <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8004b80:	2301      	movs	r3, #1
 8004b82:	75fb      	strb	r3, [r7, #23]
      break;
 8004b84:	e004      	b.n	8004b90 <USB_HC_Init+0x14c>
      break;
 8004b86:	bf00      	nop
 8004b88:	e002      	b.n	8004b90 <USB_HC_Init+0x14c>
      break;
 8004b8a:	bf00      	nop
 8004b8c:	e000      	b.n	8004b90 <USB_HC_Init+0x14c>
      break;
 8004b8e:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8004b90:	68bb      	ldr	r3, [r7, #8]
 8004b92:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004b96:	699a      	ldr	r2, [r3, #24]
 8004b98:	78fb      	ldrb	r3, [r7, #3]
 8004b9a:	f003 030f 	and.w	r3, r3, #15
 8004b9e:	2101      	movs	r1, #1
 8004ba0:	fa01 f303 	lsl.w	r3, r1, r3
 8004ba4:	68b9      	ldr	r1, [r7, #8]
 8004ba6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004baa:	4313      	orrs	r3, r2
 8004bac:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	699b      	ldr	r3, [r3, #24]
 8004bb2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8004bba:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	da03      	bge.n	8004bca <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8004bc2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004bc6:	613b      	str	r3, [r7, #16]
 8004bc8:	e001      	b.n	8004bce <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8004bca:	2300      	movs	r3, #0
 8004bcc:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 8004bce:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004bd2:	2b02      	cmp	r3, #2
 8004bd4:	d103      	bne.n	8004bde <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8004bd6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004bda:	60fb      	str	r3, [r7, #12]
 8004bdc:	e001      	b.n	8004be2 <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8004bde:	2300      	movs	r3, #0
 8004be0:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004be2:	787b      	ldrb	r3, [r7, #1]
 8004be4:	059b      	lsls	r3, r3, #22
 8004be6:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8004bea:	78bb      	ldrb	r3, [r7, #2]
 8004bec:	02db      	lsls	r3, r3, #11
 8004bee:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004bf2:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8004bf4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004bf8:	049b      	lsls	r3, r3, #18
 8004bfa:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8004bfe:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004c00:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004c02:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8004c06:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004c08:	693b      	ldr	r3, [r7, #16]
 8004c0a:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004c0c:	78fb      	ldrb	r3, [r7, #3]
 8004c0e:	0159      	lsls	r1, r3, #5
 8004c10:	68bb      	ldr	r3, [r7, #8]
 8004c12:	440b      	add	r3, r1
 8004c14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c18:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004c1e:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8004c20:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004c24:	2b03      	cmp	r3, #3
 8004c26:	d10f      	bne.n	8004c48 <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8004c28:	78fb      	ldrb	r3, [r7, #3]
 8004c2a:	015a      	lsls	r2, r3, #5
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	4413      	add	r3, r2
 8004c30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	78fa      	ldrb	r2, [r7, #3]
 8004c38:	0151      	lsls	r1, r2, #5
 8004c3a:	68ba      	ldr	r2, [r7, #8]
 8004c3c:	440a      	add	r2, r1
 8004c3e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004c42:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004c46:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8004c48:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	371c      	adds	r7, #28
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c54:	4770      	bx	lr
 8004c56:	bf00      	nop

08004c58 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b08c      	sub	sp, #48	; 0x30
 8004c5c:	af02      	add	r7, sp, #8
 8004c5e:	60f8      	str	r0, [r7, #12]
 8004c60:	60b9      	str	r1, [r7, #8]
 8004c62:	4613      	mov	r3, r2
 8004c64:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8004c6a:	68bb      	ldr	r3, [r7, #8]
 8004c6c:	785b      	ldrb	r3, [r3, #1]
 8004c6e:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8004c70:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004c74:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d028      	beq.n	8004cd4 <USB_HC_StartXfer+0x7c>
 8004c82:	68bb      	ldr	r3, [r7, #8]
 8004c84:	791b      	ldrb	r3, [r3, #4]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d124      	bne.n	8004cd4 <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 8004c8a:	79fb      	ldrb	r3, [r7, #7]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d10b      	bne.n	8004ca8 <USB_HC_StartXfer+0x50>
 8004c90:	68bb      	ldr	r3, [r7, #8]
 8004c92:	795b      	ldrb	r3, [r3, #5]
 8004c94:	2b01      	cmp	r3, #1
 8004c96:	d107      	bne.n	8004ca8 <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	785b      	ldrb	r3, [r3, #1]
 8004c9c:	4619      	mov	r1, r3
 8004c9e:	68f8      	ldr	r0, [r7, #12]
 8004ca0:	f000 fa2e 	bl	8005100 <USB_DoPing>
      return HAL_OK;
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	e112      	b.n	8004ece <USB_HC_StartXfer+0x276>
    }
    else if (dma == 1U)
 8004ca8:	79fb      	ldrb	r3, [r7, #7]
 8004caa:	2b01      	cmp	r3, #1
 8004cac:	d112      	bne.n	8004cd4 <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8004cae:	69fb      	ldr	r3, [r7, #28]
 8004cb0:	015a      	lsls	r2, r3, #5
 8004cb2:	6a3b      	ldr	r3, [r7, #32]
 8004cb4:	4413      	add	r3, r2
 8004cb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cba:	68db      	ldr	r3, [r3, #12]
 8004cbc:	69fa      	ldr	r2, [r7, #28]
 8004cbe:	0151      	lsls	r1, r2, #5
 8004cc0:	6a3a      	ldr	r2, [r7, #32]
 8004cc2:	440a      	add	r2, r1
 8004cc4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004cc8:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8004ccc:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 8004cce:	68bb      	ldr	r3, [r7, #8]
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8004cd4:	68bb      	ldr	r3, [r7, #8]
 8004cd6:	691b      	ldr	r3, [r3, #16]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d018      	beq.n	8004d0e <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8004cdc:	68bb      	ldr	r3, [r7, #8]
 8004cde:	691b      	ldr	r3, [r3, #16]
 8004ce0:	68ba      	ldr	r2, [r7, #8]
 8004ce2:	8912      	ldrh	r2, [r2, #8]
 8004ce4:	4413      	add	r3, r2
 8004ce6:	3b01      	subs	r3, #1
 8004ce8:	68ba      	ldr	r2, [r7, #8]
 8004cea:	8912      	ldrh	r2, [r2, #8]
 8004cec:	fbb3 f3f2 	udiv	r3, r3, r2
 8004cf0:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8004cf2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8004cf4:	8b7b      	ldrh	r3, [r7, #26]
 8004cf6:	429a      	cmp	r2, r3
 8004cf8:	d90b      	bls.n	8004d12 <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 8004cfa:	8b7b      	ldrh	r3, [r7, #26]
 8004cfc:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8004cfe:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004d00:	68ba      	ldr	r2, [r7, #8]
 8004d02:	8912      	ldrh	r2, [r2, #8]
 8004d04:	fb02 f203 	mul.w	r2, r2, r3
 8004d08:	68bb      	ldr	r3, [r7, #8]
 8004d0a:	611a      	str	r2, [r3, #16]
 8004d0c:	e001      	b.n	8004d12 <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 8004d0e:	2301      	movs	r3, #1
 8004d10:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 8004d12:	68bb      	ldr	r3, [r7, #8]
 8004d14:	78db      	ldrb	r3, [r3, #3]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d006      	beq.n	8004d28 <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8004d1a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004d1c:	68ba      	ldr	r2, [r7, #8]
 8004d1e:	8912      	ldrh	r2, [r2, #8]
 8004d20:	fb02 f203 	mul.w	r2, r2, r3
 8004d24:	68bb      	ldr	r3, [r7, #8]
 8004d26:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8004d28:	68bb      	ldr	r3, [r7, #8]
 8004d2a:	691b      	ldr	r3, [r3, #16]
 8004d2c:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8004d30:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004d32:	04d9      	lsls	r1, r3, #19
 8004d34:	4b68      	ldr	r3, [pc, #416]	; (8004ed8 <USB_HC_StartXfer+0x280>)
 8004d36:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8004d38:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8004d3a:	68bb      	ldr	r3, [r7, #8]
 8004d3c:	7a9b      	ldrb	r3, [r3, #10]
 8004d3e:	075b      	lsls	r3, r3, #29
 8004d40:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8004d44:	69f9      	ldr	r1, [r7, #28]
 8004d46:	0148      	lsls	r0, r1, #5
 8004d48:	6a39      	ldr	r1, [r7, #32]
 8004d4a:	4401      	add	r1, r0
 8004d4c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8004d50:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8004d52:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8004d54:	79fb      	ldrb	r3, [r7, #7]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d009      	beq.n	8004d6e <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8004d5a:	68bb      	ldr	r3, [r7, #8]
 8004d5c:	68d9      	ldr	r1, [r3, #12]
 8004d5e:	69fb      	ldr	r3, [r7, #28]
 8004d60:	015a      	lsls	r2, r3, #5
 8004d62:	6a3b      	ldr	r3, [r7, #32]
 8004d64:	4413      	add	r3, r2
 8004d66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d6a:	460a      	mov	r2, r1
 8004d6c:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8004d6e:	6a3b      	ldr	r3, [r7, #32]
 8004d70:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004d74:	689b      	ldr	r3, [r3, #8]
 8004d76:	f003 0301 	and.w	r3, r3, #1
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	bf0c      	ite	eq
 8004d7e:	2301      	moveq	r3, #1
 8004d80:	2300      	movne	r3, #0
 8004d82:	b2db      	uxtb	r3, r3
 8004d84:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8004d86:	69fb      	ldr	r3, [r7, #28]
 8004d88:	015a      	lsls	r2, r3, #5
 8004d8a:	6a3b      	ldr	r3, [r7, #32]
 8004d8c:	4413      	add	r3, r2
 8004d8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	69fa      	ldr	r2, [r7, #28]
 8004d96:	0151      	lsls	r1, r2, #5
 8004d98:	6a3a      	ldr	r2, [r7, #32]
 8004d9a:	440a      	add	r2, r1
 8004d9c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004da0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004da4:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8004da6:	69fb      	ldr	r3, [r7, #28]
 8004da8:	015a      	lsls	r2, r3, #5
 8004daa:	6a3b      	ldr	r3, [r7, #32]
 8004dac:	4413      	add	r3, r2
 8004dae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004db2:	681a      	ldr	r2, [r3, #0]
 8004db4:	7e7b      	ldrb	r3, [r7, #25]
 8004db6:	075b      	lsls	r3, r3, #29
 8004db8:	69f9      	ldr	r1, [r7, #28]
 8004dba:	0148      	lsls	r0, r1, #5
 8004dbc:	6a39      	ldr	r1, [r7, #32]
 8004dbe:	4401      	add	r1, r0
 8004dc0:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8004dc4:	4313      	orrs	r3, r2
 8004dc6:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004dc8:	69fb      	ldr	r3, [r7, #28]
 8004dca:	015a      	lsls	r2, r3, #5
 8004dcc:	6a3b      	ldr	r3, [r7, #32]
 8004dce:	4413      	add	r3, r2
 8004dd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4a41      	ldr	r2, [pc, #260]	; (8004edc <USB_HC_StartXfer+0x284>)
 8004dd8:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004dda:	4b40      	ldr	r3, [pc, #256]	; (8004edc <USB_HC_StartXfer+0x284>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004de2:	4a3e      	ldr	r2, [pc, #248]	; (8004edc <USB_HC_StartXfer+0x284>)
 8004de4:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8004de6:	68bb      	ldr	r3, [r7, #8]
 8004de8:	78db      	ldrb	r3, [r3, #3]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d006      	beq.n	8004dfc <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8004dee:	4b3b      	ldr	r3, [pc, #236]	; (8004edc <USB_HC_StartXfer+0x284>)
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004df6:	4a39      	ldr	r2, [pc, #228]	; (8004edc <USB_HC_StartXfer+0x284>)
 8004df8:	6013      	str	r3, [r2, #0]
 8004dfa:	e005      	b.n	8004e08 <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8004dfc:	4b37      	ldr	r3, [pc, #220]	; (8004edc <USB_HC_StartXfer+0x284>)
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004e04:	4a35      	ldr	r2, [pc, #212]	; (8004edc <USB_HC_StartXfer+0x284>)
 8004e06:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004e08:	4b34      	ldr	r3, [pc, #208]	; (8004edc <USB_HC_StartXfer+0x284>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004e10:	4a32      	ldr	r2, [pc, #200]	; (8004edc <USB_HC_StartXfer+0x284>)
 8004e12:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004e14:	69fb      	ldr	r3, [r7, #28]
 8004e16:	015a      	lsls	r2, r3, #5
 8004e18:	6a3b      	ldr	r3, [r7, #32]
 8004e1a:	4413      	add	r3, r2
 8004e1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e20:	461a      	mov	r2, r3
 8004e22:	4b2e      	ldr	r3, [pc, #184]	; (8004edc <USB_HC_StartXfer+0x284>)
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	6013      	str	r3, [r2, #0]

  if (dma == 0U) /* Slave mode */
 8004e28:	79fb      	ldrb	r3, [r7, #7]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d14e      	bne.n	8004ecc <USB_HC_StartXfer+0x274>
  {
    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8004e2e:	68bb      	ldr	r3, [r7, #8]
 8004e30:	78db      	ldrb	r3, [r3, #3]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d14a      	bne.n	8004ecc <USB_HC_StartXfer+0x274>
 8004e36:	68bb      	ldr	r3, [r7, #8]
 8004e38:	691b      	ldr	r3, [r3, #16]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d046      	beq.n	8004ecc <USB_HC_StartXfer+0x274>
    {
      switch (hc->ep_type)
 8004e3e:	68bb      	ldr	r3, [r7, #8]
 8004e40:	79db      	ldrb	r3, [r3, #7]
 8004e42:	2b03      	cmp	r3, #3
 8004e44:	d830      	bhi.n	8004ea8 <USB_HC_StartXfer+0x250>
 8004e46:	a201      	add	r2, pc, #4	; (adr r2, 8004e4c <USB_HC_StartXfer+0x1f4>)
 8004e48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e4c:	08004e5d 	.word	0x08004e5d
 8004e50:	08004e81 	.word	0x08004e81
 8004e54:	08004e5d 	.word	0x08004e5d
 8004e58:	08004e81 	.word	0x08004e81
      {
        /* Non periodic transfer */
        case EP_TYPE_CTRL:
        case EP_TYPE_BULK:

          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8004e5c:	68bb      	ldr	r3, [r7, #8]
 8004e5e:	691b      	ldr	r3, [r3, #16]
 8004e60:	3303      	adds	r3, #3
 8004e62:	089b      	lsrs	r3, r3, #2
 8004e64:	82fb      	strh	r3, [r7, #22]

          /* check if there is enough space in FIFO space */
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8004e66:	8afa      	ldrh	r2, [r7, #22]
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e6c:	b29b      	uxth	r3, r3
 8004e6e:	429a      	cmp	r2, r3
 8004e70:	d91c      	bls.n	8004eac <USB_HC_StartXfer+0x254>
          {
            /* need to process data in nptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	699b      	ldr	r3, [r3, #24]
 8004e76:	f043 0220 	orr.w	r2, r3, #32
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	619a      	str	r2, [r3, #24]
          }
          break;
 8004e7e:	e015      	b.n	8004eac <USB_HC_StartXfer+0x254>

        /* Periodic transfer */
        case EP_TYPE_INTR:
        case EP_TYPE_ISOC:
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8004e80:	68bb      	ldr	r3, [r7, #8]
 8004e82:	691b      	ldr	r3, [r3, #16]
 8004e84:	3303      	adds	r3, #3
 8004e86:	089b      	lsrs	r3, r3, #2
 8004e88:	82fb      	strh	r3, [r7, #22]
          /* check if there is enough space in FIFO space */
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8004e8a:	8afa      	ldrh	r2, [r7, #22]
 8004e8c:	6a3b      	ldr	r3, [r7, #32]
 8004e8e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004e92:	691b      	ldr	r3, [r3, #16]
 8004e94:	b29b      	uxth	r3, r3
 8004e96:	429a      	cmp	r2, r3
 8004e98:	d90a      	bls.n	8004eb0 <USB_HC_StartXfer+0x258>
          {
            /* need to process data in ptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	699b      	ldr	r3, [r3, #24]
 8004e9e:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	619a      	str	r2, [r3, #24]
          }
          break;
 8004ea6:	e003      	b.n	8004eb0 <USB_HC_StartXfer+0x258>

        default:
          break;
 8004ea8:	bf00      	nop
 8004eaa:	e002      	b.n	8004eb2 <USB_HC_StartXfer+0x25a>
          break;
 8004eac:	bf00      	nop
 8004eae:	e000      	b.n	8004eb2 <USB_HC_StartXfer+0x25a>
          break;
 8004eb0:	bf00      	nop
      }

      /* Write packet into the Tx FIFO. */
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8004eb2:	68bb      	ldr	r3, [r7, #8]
 8004eb4:	68d9      	ldr	r1, [r3, #12]
 8004eb6:	68bb      	ldr	r3, [r7, #8]
 8004eb8:	785a      	ldrb	r2, [r3, #1]
 8004eba:	68bb      	ldr	r3, [r7, #8]
 8004ebc:	691b      	ldr	r3, [r3, #16]
 8004ebe:	b298      	uxth	r0, r3
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	9300      	str	r3, [sp, #0]
 8004ec4:	4603      	mov	r3, r0
 8004ec6:	68f8      	ldr	r0, [r7, #12]
 8004ec8:	f7ff fb86 	bl	80045d8 <USB_WritePacket>
    }
  }

  return HAL_OK;
 8004ecc:	2300      	movs	r3, #0
}
 8004ece:	4618      	mov	r0, r3
 8004ed0:	3728      	adds	r7, #40	; 0x28
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	bd80      	pop	{r7, pc}
 8004ed6:	bf00      	nop
 8004ed8:	1ff80000 	.word	0x1ff80000
 8004edc:	200000b0 	.word	0x200000b0

08004ee0 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004ee0:	b480      	push	{r7}
 8004ee2:	b085      	sub	sp, #20
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004ef2:	695b      	ldr	r3, [r3, #20]
 8004ef4:	b29b      	uxth	r3, r3
}
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	3714      	adds	r7, #20
 8004efa:	46bd      	mov	sp, r7
 8004efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f00:	4770      	bx	lr

08004f02 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8004f02:	b480      	push	{r7}
 8004f04:	b087      	sub	sp, #28
 8004f06:	af00      	add	r7, sp, #0
 8004f08:	6078      	str	r0, [r7, #4]
 8004f0a:	460b      	mov	r3, r1
 8004f0c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 8004f12:	78fb      	ldrb	r3, [r7, #3]
 8004f14:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8004f16:	2300      	movs	r3, #0
 8004f18:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	015a      	lsls	r2, r3, #5
 8004f1e:	693b      	ldr	r3, [r7, #16]
 8004f20:	4413      	add	r3, r2
 8004f22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	0c9b      	lsrs	r3, r3, #18
 8004f2a:	f003 0303 	and.w	r3, r3, #3
 8004f2e:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8004f30:	68bb      	ldr	r3, [r7, #8]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d002      	beq.n	8004f3c <USB_HC_Halt+0x3a>
 8004f36:	68bb      	ldr	r3, [r7, #8]
 8004f38:	2b02      	cmp	r3, #2
 8004f3a:	d16c      	bne.n	8005016 <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	015a      	lsls	r2, r3, #5
 8004f40:	693b      	ldr	r3, [r7, #16]
 8004f42:	4413      	add	r3, r2
 8004f44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	68fa      	ldr	r2, [r7, #12]
 8004f4c:	0151      	lsls	r1, r2, #5
 8004f4e:	693a      	ldr	r2, [r7, #16]
 8004f50:	440a      	add	r2, r1
 8004f52:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004f56:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004f5a:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f60:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d143      	bne.n	8004ff0 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	015a      	lsls	r2, r3, #5
 8004f6c:	693b      	ldr	r3, [r7, #16]
 8004f6e:	4413      	add	r3, r2
 8004f70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	68fa      	ldr	r2, [r7, #12]
 8004f78:	0151      	lsls	r1, r2, #5
 8004f7a:	693a      	ldr	r2, [r7, #16]
 8004f7c:	440a      	add	r2, r1
 8004f7e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004f82:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004f86:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	015a      	lsls	r2, r3, #5
 8004f8c:	693b      	ldr	r3, [r7, #16]
 8004f8e:	4413      	add	r3, r2
 8004f90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	68fa      	ldr	r2, [r7, #12]
 8004f98:	0151      	lsls	r1, r2, #5
 8004f9a:	693a      	ldr	r2, [r7, #16]
 8004f9c:	440a      	add	r2, r1
 8004f9e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004fa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004fa6:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	015a      	lsls	r2, r3, #5
 8004fac:	693b      	ldr	r3, [r7, #16]
 8004fae:	4413      	add	r3, r2
 8004fb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	68fa      	ldr	r2, [r7, #12]
 8004fb8:	0151      	lsls	r1, r2, #5
 8004fba:	693a      	ldr	r2, [r7, #16]
 8004fbc:	440a      	add	r2, r1
 8004fbe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004fc2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004fc6:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8004fc8:	697b      	ldr	r3, [r7, #20]
 8004fca:	3301      	adds	r3, #1
 8004fcc:	617b      	str	r3, [r7, #20]
 8004fce:	697b      	ldr	r3, [r7, #20]
 8004fd0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004fd4:	d81d      	bhi.n	8005012 <USB_HC_Halt+0x110>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	015a      	lsls	r2, r3, #5
 8004fda:	693b      	ldr	r3, [r7, #16]
 8004fdc:	4413      	add	r3, r2
 8004fde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004fe8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004fec:	d0ec      	beq.n	8004fc8 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8004fee:	e080      	b.n	80050f2 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	015a      	lsls	r2, r3, #5
 8004ff4:	693b      	ldr	r3, [r7, #16]
 8004ff6:	4413      	add	r3, r2
 8004ff8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	68fa      	ldr	r2, [r7, #12]
 8005000:	0151      	lsls	r1, r2, #5
 8005002:	693a      	ldr	r2, [r7, #16]
 8005004:	440a      	add	r2, r1
 8005006:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800500a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800500e:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005010:	e06f      	b.n	80050f2 <USB_HC_Halt+0x1f0>
          break;
 8005012:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005014:	e06d      	b.n	80050f2 <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	015a      	lsls	r2, r3, #5
 800501a:	693b      	ldr	r3, [r7, #16]
 800501c:	4413      	add	r3, r2
 800501e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	68fa      	ldr	r2, [r7, #12]
 8005026:	0151      	lsls	r1, r2, #5
 8005028:	693a      	ldr	r2, [r7, #16]
 800502a:	440a      	add	r2, r1
 800502c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005030:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005034:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8005036:	693b      	ldr	r3, [r7, #16]
 8005038:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800503c:	691b      	ldr	r3, [r3, #16]
 800503e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005042:	2b00      	cmp	r3, #0
 8005044:	d143      	bne.n	80050ce <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	015a      	lsls	r2, r3, #5
 800504a:	693b      	ldr	r3, [r7, #16]
 800504c:	4413      	add	r3, r2
 800504e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	68fa      	ldr	r2, [r7, #12]
 8005056:	0151      	lsls	r1, r2, #5
 8005058:	693a      	ldr	r2, [r7, #16]
 800505a:	440a      	add	r2, r1
 800505c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005060:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005064:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	015a      	lsls	r2, r3, #5
 800506a:	693b      	ldr	r3, [r7, #16]
 800506c:	4413      	add	r3, r2
 800506e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	68fa      	ldr	r2, [r7, #12]
 8005076:	0151      	lsls	r1, r2, #5
 8005078:	693a      	ldr	r2, [r7, #16]
 800507a:	440a      	add	r2, r1
 800507c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005080:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005084:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	015a      	lsls	r2, r3, #5
 800508a:	693b      	ldr	r3, [r7, #16]
 800508c:	4413      	add	r3, r2
 800508e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	68fa      	ldr	r2, [r7, #12]
 8005096:	0151      	lsls	r1, r2, #5
 8005098:	693a      	ldr	r2, [r7, #16]
 800509a:	440a      	add	r2, r1
 800509c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80050a0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80050a4:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 80050a6:	697b      	ldr	r3, [r7, #20]
 80050a8:	3301      	adds	r3, #1
 80050aa:	617b      	str	r3, [r7, #20]
 80050ac:	697b      	ldr	r3, [r7, #20]
 80050ae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80050b2:	d81d      	bhi.n	80050f0 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	015a      	lsls	r2, r3, #5
 80050b8:	693b      	ldr	r3, [r7, #16]
 80050ba:	4413      	add	r3, r2
 80050bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80050c6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80050ca:	d0ec      	beq.n	80050a6 <USB_HC_Halt+0x1a4>
 80050cc:	e011      	b.n	80050f2 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	015a      	lsls	r2, r3, #5
 80050d2:	693b      	ldr	r3, [r7, #16]
 80050d4:	4413      	add	r3, r2
 80050d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	68fa      	ldr	r2, [r7, #12]
 80050de:	0151      	lsls	r1, r2, #5
 80050e0:	693a      	ldr	r2, [r7, #16]
 80050e2:	440a      	add	r2, r1
 80050e4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80050e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80050ec:	6013      	str	r3, [r2, #0]
 80050ee:	e000      	b.n	80050f2 <USB_HC_Halt+0x1f0>
          break;
 80050f0:	bf00      	nop
    }
  }

  return HAL_OK;
 80050f2:	2300      	movs	r3, #0
}
 80050f4:	4618      	mov	r0, r3
 80050f6:	371c      	adds	r7, #28
 80050f8:	46bd      	mov	sp, r7
 80050fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fe:	4770      	bx	lr

08005100 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8005100:	b480      	push	{r7}
 8005102:	b087      	sub	sp, #28
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
 8005108:	460b      	mov	r3, r1
 800510a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8005110:	78fb      	ldrb	r3, [r7, #3]
 8005112:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8005114:	2301      	movs	r3, #1
 8005116:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	04da      	lsls	r2, r3, #19
 800511c:	4b15      	ldr	r3, [pc, #84]	; (8005174 <USB_DoPing+0x74>)
 800511e:	4013      	ands	r3, r2
 8005120:	693a      	ldr	r2, [r7, #16]
 8005122:	0151      	lsls	r1, r2, #5
 8005124:	697a      	ldr	r2, [r7, #20]
 8005126:	440a      	add	r2, r1
 8005128:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800512c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005130:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8005132:	693b      	ldr	r3, [r7, #16]
 8005134:	015a      	lsls	r2, r3, #5
 8005136:	697b      	ldr	r3, [r7, #20]
 8005138:	4413      	add	r3, r2
 800513a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005142:	68bb      	ldr	r3, [r7, #8]
 8005144:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005148:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800514a:	68bb      	ldr	r3, [r7, #8]
 800514c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005150:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8005152:	693b      	ldr	r3, [r7, #16]
 8005154:	015a      	lsls	r2, r3, #5
 8005156:	697b      	ldr	r3, [r7, #20]
 8005158:	4413      	add	r3, r2
 800515a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800515e:	461a      	mov	r2, r3
 8005160:	68bb      	ldr	r3, [r7, #8]
 8005162:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8005164:	2300      	movs	r3, #0
}
 8005166:	4618      	mov	r0, r3
 8005168:	371c      	adds	r7, #28
 800516a:	46bd      	mov	sp, r7
 800516c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005170:	4770      	bx	lr
 8005172:	bf00      	nop
 8005174:	1ff80000 	.word	0x1ff80000

08005178 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b086      	sub	sp, #24
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8005184:	2300      	movs	r3, #0
 8005186:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;


  (void)USB_DisableGlobalInt(USBx);
 8005188:	6878      	ldr	r0, [r7, #4]
 800518a:	f7ff f9a1 	bl	80044d0 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800518e:	2110      	movs	r1, #16
 8005190:	6878      	ldr	r0, [r7, #4]
 8005192:	f7ff f9d9 	bl	8004548 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8005196:	6878      	ldr	r0, [r7, #4]
 8005198:	f7ff f9fc 	bl	8004594 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800519c:	2300      	movs	r3, #0
 800519e:	613b      	str	r3, [r7, #16]
 80051a0:	e01f      	b.n	80051e2 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 80051a2:	693b      	ldr	r3, [r7, #16]
 80051a4:	015a      	lsls	r2, r3, #5
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	4413      	add	r3, r2
 80051aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80051b2:	68bb      	ldr	r3, [r7, #8]
 80051b4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80051b8:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80051ba:	68bb      	ldr	r3, [r7, #8]
 80051bc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80051c0:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80051c2:	68bb      	ldr	r3, [r7, #8]
 80051c4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80051c8:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80051ca:	693b      	ldr	r3, [r7, #16]
 80051cc:	015a      	lsls	r2, r3, #5
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	4413      	add	r3, r2
 80051d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051d6:	461a      	mov	r2, r3
 80051d8:	68bb      	ldr	r3, [r7, #8]
 80051da:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80051dc:	693b      	ldr	r3, [r7, #16]
 80051de:	3301      	adds	r3, #1
 80051e0:	613b      	str	r3, [r7, #16]
 80051e2:	693b      	ldr	r3, [r7, #16]
 80051e4:	2b0f      	cmp	r3, #15
 80051e6:	d9dc      	bls.n	80051a2 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80051e8:	2300      	movs	r3, #0
 80051ea:	613b      	str	r3, [r7, #16]
 80051ec:	e034      	b.n	8005258 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 80051ee:	693b      	ldr	r3, [r7, #16]
 80051f0:	015a      	lsls	r2, r3, #5
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	4413      	add	r3, r2
 80051f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 80051fe:	68bb      	ldr	r3, [r7, #8]
 8005200:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005204:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8005206:	68bb      	ldr	r3, [r7, #8]
 8005208:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800520c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800520e:	68bb      	ldr	r3, [r7, #8]
 8005210:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005214:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8005216:	693b      	ldr	r3, [r7, #16]
 8005218:	015a      	lsls	r2, r3, #5
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	4413      	add	r3, r2
 800521e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005222:	461a      	mov	r2, r3
 8005224:	68bb      	ldr	r3, [r7, #8]
 8005226:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8005228:	697b      	ldr	r3, [r7, #20]
 800522a:	3301      	adds	r3, #1
 800522c:	617b      	str	r3, [r7, #20]
 800522e:	697b      	ldr	r3, [r7, #20]
 8005230:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005234:	d80c      	bhi.n	8005250 <USB_StopHost+0xd8>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005236:	693b      	ldr	r3, [r7, #16]
 8005238:	015a      	lsls	r2, r3, #5
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	4413      	add	r3, r2
 800523e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005248:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800524c:	d0ec      	beq.n	8005228 <USB_StopHost+0xb0>
 800524e:	e000      	b.n	8005252 <USB_StopHost+0xda>
        break;
 8005250:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8005252:	693b      	ldr	r3, [r7, #16]
 8005254:	3301      	adds	r3, #1
 8005256:	613b      	str	r3, [r7, #16]
 8005258:	693b      	ldr	r3, [r7, #16]
 800525a:	2b0f      	cmp	r3, #15
 800525c:	d9c7      	bls.n	80051ee <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005264:	461a      	mov	r2, r3
 8005266:	f04f 33ff 	mov.w	r3, #4294967295
 800526a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	f04f 32ff 	mov.w	r2, #4294967295
 8005272:	615a      	str	r2, [r3, #20]
  (void)USB_EnableGlobalInt(USBx);
 8005274:	6878      	ldr	r0, [r7, #4]
 8005276:	f7ff f91a 	bl	80044ae <USB_EnableGlobalInt>

  return HAL_OK;
 800527a:	2300      	movs	r3, #0
}
 800527c:	4618      	mov	r0, r3
 800527e:	3718      	adds	r7, #24
 8005280:	46bd      	mov	sp, r7
 8005282:	bd80      	pop	{r7, pc}

08005284 <FatFS_routine>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void FatFS_routine(void)
{
 8005284:	b5b0      	push	{r4, r5, r7, lr}
 8005286:	b09c      	sub	sp, #112	; 0x70
 8005288:	af00      	add	r7, sp, #0
	FRESULT res;
	uint32_t byteswritten;

	char wtext[100] = "This line has been written by an STM32 device!\n";
 800528a:	4b2a      	ldr	r3, [pc, #168]	; (8005334 <FatFS_routine+0xb0>)
 800528c:	1d3c      	adds	r4, r7, #4
 800528e:	461d      	mov	r5, r3
 8005290:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005292:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005294:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005296:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005298:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800529c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80052a0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80052a4:	2234      	movs	r2, #52	; 0x34
 80052a6:	2100      	movs	r1, #0
 80052a8:	4618      	mov	r0, r3
 80052aa:	f005 fc8e 	bl	800abca <memset>

	if(f_mount(&USBHFatFS, (TCHAR const*) USBHPath, 0) == FR_OK)
 80052ae:	2200      	movs	r2, #0
 80052b0:	4921      	ldr	r1, [pc, #132]	; (8005338 <FatFS_routine+0xb4>)
 80052b2:	4822      	ldr	r0, [pc, #136]	; (800533c <FatFS_routine+0xb8>)
 80052b4:	f004 fc8a 	bl	8009bcc <f_mount>
 80052b8:	4603      	mov	r3, r0
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d136      	bne.n	800532c <FatFS_routine+0xa8>
	{
		res = f_open(&USBHFile, "STM32.TXT", FA_CREATE_ALWAYS | FA_WRITE);
 80052be:	220a      	movs	r2, #10
 80052c0:	491f      	ldr	r1, [pc, #124]	; (8005340 <FatFS_routine+0xbc>)
 80052c2:	4820      	ldr	r0, [pc, #128]	; (8005344 <FatFS_routine+0xc0>)
 80052c4:	f004 fcc8 	bl	8009c58 <f_open>
 80052c8:	4603      	mov	r3, r0
 80052ca:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

		if (res != FR_OK)
 80052ce:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d125      	bne.n	8005322 <FatFS_routine+0x9e>
		{
			return;
		}

		res = f_write(&USBHFile, wtext, strlen(wtext), (void *)&byteswritten);
 80052d6:	1d3b      	adds	r3, r7, #4
 80052d8:	4618      	mov	r0, r3
 80052da:	f7fa ff75 	bl	80001c8 <strlen>
 80052de:	4602      	mov	r2, r0
 80052e0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80052e4:	1d39      	adds	r1, r7, #4
 80052e6:	4817      	ldr	r0, [pc, #92]	; (8005344 <FatFS_routine+0xc0>)
 80052e8:	f004 fe74 	bl	8009fd4 <f_write>
 80052ec:	4603      	mov	r3, r0
 80052ee:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

		if (res != FR_OK)
 80052f2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d115      	bne.n	8005326 <FatFS_routine+0xa2>
		{
			return;
		}

		res = f_sync(&USBHFile);
 80052fa:	4812      	ldr	r0, [pc, #72]	; (8005344 <FatFS_routine+0xc0>)
 80052fc:	f004 ffdf 	bl	800a2be <f_sync>
 8005300:	4603      	mov	r3, r0
 8005302:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

		if (res != FR_OK)
 8005306:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800530a:	2b00      	cmp	r3, #0
 800530c:	d10d      	bne.n	800532a <FatFS_routine+0xa6>
		{
			return;
		}

		res = f_close(&USBHFile);
 800530e:	480d      	ldr	r0, [pc, #52]	; (8005344 <FatFS_routine+0xc0>)
 8005310:	f005 f853 	bl	800a3ba <f_close>
 8005314:	4603      	mov	r3, r0
 8005316:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

		if (res != FR_OK)
 800531a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800531e:	2b00      	cmp	r3, #0
 8005320:	e004      	b.n	800532c <FatFS_routine+0xa8>
			return;
 8005322:	bf00      	nop
 8005324:	e002      	b.n	800532c <FatFS_routine+0xa8>
			return;
 8005326:	bf00      	nop
 8005328:	e000      	b.n	800532c <FatFS_routine+0xa8>
			return;
 800532a:	bf00      	nop
		{
			return;
		}
	}
}
 800532c:	3770      	adds	r7, #112	; 0x70
 800532e:	46bd      	mov	sp, r7
 8005330:	bdb0      	pop	{r4, r5, r7, pc}
 8005332:	bf00      	nop
 8005334:	0800ad74 	.word	0x0800ad74
 8005338:	200001ec 	.word	0x200001ec
 800533c:	20000420 	.word	0x20000420
 8005340:	0800ad68 	.word	0x0800ad68
 8005344:	200001f0 	.word	0x200001f0

08005348 <MX_FATFS_Init>:

void MX_FATFS_Init(void) 
{
 8005348:	b580      	push	{r7, lr}
 800534a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 800534c:	4904      	ldr	r1, [pc, #16]	; (8005360 <MX_FATFS_Init+0x18>)
 800534e:	4805      	ldr	r0, [pc, #20]	; (8005364 <MX_FATFS_Init+0x1c>)
 8005350:	f005 f8aa 	bl	800a4a8 <FATFS_LinkDriver>
 8005354:	4603      	mov	r3, r0
 8005356:	461a      	mov	r2, r3
 8005358:	4b03      	ldr	r3, [pc, #12]	; (8005368 <MX_FATFS_Init+0x20>)
 800535a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 800535c:	bf00      	nop
 800535e:	bd80      	pop	{r7, pc}
 8005360:	200001ec 	.word	0x200001ec
 8005364:	0800ae38 	.word	0x0800ae38
 8005368:	20000650 	.word	0x20000650

0800536c <get_fattime>:
  * @brief  Gets Time from RTC 
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800536c:	b480      	push	{r7}
 800536e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8005370:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */  
}
 8005372:	4618      	mov	r0, r3
 8005374:	46bd      	mov	sp, r7
 8005376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537a:	4770      	bx	lr

0800537c <USBH_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_initialize(BYTE lun)
{
 800537c:	b480      	push	{r7}
 800537e:	b083      	sub	sp, #12
 8005380:	af00      	add	r7, sp, #0
 8005382:	4603      	mov	r3, r0
 8005384:	71fb      	strb	r3, [r7, #7]
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
 8005386:	2300      	movs	r3, #0
}
 8005388:	4618      	mov	r0, r3
 800538a:	370c      	adds	r7, #12
 800538c:	46bd      	mov	sp, r7
 800538e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005392:	4770      	bx	lr

08005394 <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b084      	sub	sp, #16
 8005398:	af00      	add	r7, sp, #0
 800539a:	4603      	mov	r3, r0
 800539c:	71fb      	strb	r3, [r7, #7]
  DRESULT res = RES_ERROR;
 800539e:	2301      	movs	r3, #1
 80053a0:	73fb      	strb	r3, [r7, #15]

  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 80053a2:	79fb      	ldrb	r3, [r7, #7]
 80053a4:	4619      	mov	r1, r3
 80053a6:	4808      	ldr	r0, [pc, #32]	; (80053c8 <USBH_status+0x34>)
 80053a8:	f000 fe2f 	bl	800600a <USBH_MSC_UnitIsReady>
 80053ac:	4603      	mov	r3, r0
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d002      	beq.n	80053b8 <USBH_status+0x24>
  {
    res = RES_OK;
 80053b2:	2300      	movs	r3, #0
 80053b4:	73fb      	strb	r3, [r7, #15]
 80053b6:	e001      	b.n	80053bc <USBH_status+0x28>
  }
  else
  {
    res = RES_ERROR;
 80053b8:	2301      	movs	r3, #1
 80053ba:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 80053bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80053be:	4618      	mov	r0, r3
 80053c0:	3710      	adds	r7, #16
 80053c2:	46bd      	mov	sp, r7
 80053c4:	bd80      	pop	{r7, pc}
 80053c6:	bf00      	nop
 80053c8:	20000654 	.word	0x20000654

080053cc <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b094      	sub	sp, #80	; 0x50
 80053d0:	af02      	add	r7, sp, #8
 80053d2:	60b9      	str	r1, [r7, #8]
 80053d4:	607a      	str	r2, [r7, #4]
 80053d6:	603b      	str	r3, [r7, #0]
 80053d8:	4603      	mov	r3, r0
 80053da:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80053dc:	2301      	movs	r3, #1
 80053de:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Read(&hUSB_Host, lun, sector, buff, count) == USBH_OK)
 80053e2:	7bf9      	ldrb	r1, [r7, #15]
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	9300      	str	r3, [sp, #0]
 80053e8:	68bb      	ldr	r3, [r7, #8]
 80053ea:	687a      	ldr	r2, [r7, #4]
 80053ec:	4812      	ldr	r0, [pc, #72]	; (8005438 <USBH_read+0x6c>)
 80053ee:	f000 fe56 	bl	800609e <USBH_MSC_Read>
 80053f2:	4603      	mov	r3, r0
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d103      	bne.n	8005400 <USBH_read+0x34>
  {
    res = RES_OK;
 80053f8:	2300      	movs	r3, #0
 80053fa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80053fe:	e015      	b.n	800542c <USBH_read+0x60>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 8005400:	f107 0210 	add.w	r2, r7, #16
 8005404:	7bfb      	ldrb	r3, [r7, #15]
 8005406:	4619      	mov	r1, r3
 8005408:	480b      	ldr	r0, [pc, #44]	; (8005438 <USBH_read+0x6c>)
 800540a:	f000 fe24 	bl	8006056 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 800540e:	7f7b      	ldrb	r3, [r7, #29]
 8005410:	2b28      	cmp	r3, #40	; 0x28
 8005412:	d003      	beq.n	800541c <USBH_read+0x50>
 8005414:	2b3a      	cmp	r3, #58	; 0x3a
 8005416:	d001      	beq.n	800541c <USBH_read+0x50>
 8005418:	2b04      	cmp	r3, #4
 800541a:	d103      	bne.n	8005424 <USBH_read+0x58>
    {
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog ("USB Disk is not ready!");
      res = RES_NOTRDY;
 800541c:	2303      	movs	r3, #3
 800541e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break; 
 8005422:	e003      	b.n	800542c <USBH_read+0x60>

    default:
      res = RES_ERROR;
 8005424:	2301      	movs	r3, #1
 8005426:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800542a:	bf00      	nop
    }
  }

  return res;
 800542c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8005430:	4618      	mov	r0, r3
 8005432:	3748      	adds	r7, #72	; 0x48
 8005434:	46bd      	mov	sp, r7
 8005436:	bd80      	pop	{r7, pc}
 8005438:	20000654 	.word	0x20000654

0800543c <USBH_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT USBH_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b094      	sub	sp, #80	; 0x50
 8005440:	af02      	add	r7, sp, #8
 8005442:	60b9      	str	r1, [r7, #8]
 8005444:	607a      	str	r2, [r7, #4]
 8005446:	603b      	str	r3, [r7, #0]
 8005448:	4603      	mov	r3, r0
 800544a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800544c:	2301      	movs	r3, #1
 800544e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Write(&hUSB_Host, lun, sector, (BYTE *)buff, count) == USBH_OK)
 8005452:	7bf9      	ldrb	r1, [r7, #15]
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	9300      	str	r3, [sp, #0]
 8005458:	68bb      	ldr	r3, [r7, #8]
 800545a:	687a      	ldr	r2, [r7, #4]
 800545c:	4817      	ldr	r0, [pc, #92]	; (80054bc <USBH_write+0x80>)
 800545e:	f000 fe87 	bl	8006170 <USBH_MSC_Write>
 8005462:	4603      	mov	r3, r0
 8005464:	2b00      	cmp	r3, #0
 8005466:	d103      	bne.n	8005470 <USBH_write+0x34>
  {
    res = RES_OK;
 8005468:	2300      	movs	r3, #0
 800546a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800546e:	e01f      	b.n	80054b0 <USBH_write+0x74>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 8005470:	f107 0210 	add.w	r2, r7, #16
 8005474:	7bfb      	ldrb	r3, [r7, #15]
 8005476:	4619      	mov	r1, r3
 8005478:	4810      	ldr	r0, [pc, #64]	; (80054bc <USBH_write+0x80>)
 800547a:	f000 fdec 	bl	8006056 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 800547e:	7f7b      	ldrb	r3, [r7, #29]
 8005480:	2b27      	cmp	r3, #39	; 0x27
 8005482:	d009      	beq.n	8005498 <USBH_write+0x5c>
 8005484:	2b27      	cmp	r3, #39	; 0x27
 8005486:	dc02      	bgt.n	800548e <USBH_write+0x52>
 8005488:	2b04      	cmp	r3, #4
 800548a:	d009      	beq.n	80054a0 <USBH_write+0x64>
 800548c:	e00c      	b.n	80054a8 <USBH_write+0x6c>
 800548e:	2b28      	cmp	r3, #40	; 0x28
 8005490:	d006      	beq.n	80054a0 <USBH_write+0x64>
 8005492:	2b3a      	cmp	r3, #58	; 0x3a
 8005494:	d004      	beq.n	80054a0 <USBH_write+0x64>
 8005496:	e007      	b.n	80054a8 <USBH_write+0x6c>
    {
    case SCSI_ASC_WRITE_PROTECTED:
      USBH_ErrLog("USB Disk is Write protected!");
      res = RES_WRPRT;
 8005498:	2302      	movs	r3, #2
 800549a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800549e:	e007      	b.n	80054b0 <USBH_write+0x74>

    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog("USB Disk is not ready!");
      res = RES_NOTRDY;
 80054a0:	2303      	movs	r3, #3
 80054a2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 80054a6:	e003      	b.n	80054b0 <USBH_write+0x74>

    default:
      res = RES_ERROR;
 80054a8:	2301      	movs	r3, #1
 80054aa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 80054ae:	bf00      	nop
    }
  }

  return res;
 80054b0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 80054b4:	4618      	mov	r0, r3
 80054b6:	3748      	adds	r7, #72	; 0x48
 80054b8:	46bd      	mov	sp, r7
 80054ba:	bd80      	pop	{r7, pc}
 80054bc:	20000654 	.word	0x20000654

080054c0 <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b090      	sub	sp, #64	; 0x40
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	4603      	mov	r3, r0
 80054c8:	603a      	str	r2, [r7, #0]
 80054ca:	71fb      	strb	r3, [r7, #7]
 80054cc:	460b      	mov	r3, r1
 80054ce:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80054d0:	2301      	movs	r3, #1
 80054d2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  MSC_LUNTypeDef info;

  switch (cmd)
 80054d6:	79bb      	ldrb	r3, [r7, #6]
 80054d8:	2b03      	cmp	r3, #3
 80054da:	d852      	bhi.n	8005582 <USBH_ioctl+0xc2>
 80054dc:	a201      	add	r2, pc, #4	; (adr r2, 80054e4 <USBH_ioctl+0x24>)
 80054de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054e2:	bf00      	nop
 80054e4:	080054f5 	.word	0x080054f5
 80054e8:	080054fd 	.word	0x080054fd
 80054ec:	08005527 	.word	0x08005527
 80054f0:	08005553 	.word	0x08005553
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC:
    res = RES_OK;
 80054f4:	2300      	movs	r3, #0
 80054f6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 80054fa:	e045      	b.n	8005588 <USBH_ioctl+0xc8>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 80054fc:	f107 0208 	add.w	r2, r7, #8
 8005500:	79fb      	ldrb	r3, [r7, #7]
 8005502:	4619      	mov	r1, r3
 8005504:	4823      	ldr	r0, [pc, #140]	; (8005594 <USBH_ioctl+0xd4>)
 8005506:	f000 fda6 	bl	8006056 <USBH_MSC_GetLUNInfo>
 800550a:	4603      	mov	r3, r0
 800550c:	2b00      	cmp	r3, #0
 800550e:	d106      	bne.n	800551e <USBH_ioctl+0x5e>
    {
      *(DWORD*)buff = info.capacity.block_nbr;
 8005510:	68fa      	ldr	r2, [r7, #12]
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8005516:	2300      	movs	r3, #0
 8005518:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 800551c:	e034      	b.n	8005588 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 800551e:	2301      	movs	r3, #1
 8005520:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8005524:	e030      	b.n	8005588 <USBH_ioctl+0xc8>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8005526:	f107 0208 	add.w	r2, r7, #8
 800552a:	79fb      	ldrb	r3, [r7, #7]
 800552c:	4619      	mov	r1, r3
 800552e:	4819      	ldr	r0, [pc, #100]	; (8005594 <USBH_ioctl+0xd4>)
 8005530:	f000 fd91 	bl	8006056 <USBH_MSC_GetLUNInfo>
 8005534:	4603      	mov	r3, r0
 8005536:	2b00      	cmp	r3, #0
 8005538:	d107      	bne.n	800554a <USBH_ioctl+0x8a>
    {
      *(DWORD*)buff = info.capacity.block_size;
 800553a:	8a3b      	ldrh	r3, [r7, #16]
 800553c:	461a      	mov	r2, r3
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8005542:	2300      	movs	r3, #0
 8005544:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8005548:	e01e      	b.n	8005588 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 800554a:	2301      	movs	r3, #1
 800554c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8005550:	e01a      	b.n	8005588 <USBH_ioctl+0xc8>

    /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :

    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8005552:	f107 0208 	add.w	r2, r7, #8
 8005556:	79fb      	ldrb	r3, [r7, #7]
 8005558:	4619      	mov	r1, r3
 800555a:	480e      	ldr	r0, [pc, #56]	; (8005594 <USBH_ioctl+0xd4>)
 800555c:	f000 fd7b 	bl	8006056 <USBH_MSC_GetLUNInfo>
 8005560:	4603      	mov	r3, r0
 8005562:	2b00      	cmp	r3, #0
 8005564:	d109      	bne.n	800557a <USBH_ioctl+0xba>
    {
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
 8005566:	8a3b      	ldrh	r3, [r7, #16]
 8005568:	0a5b      	lsrs	r3, r3, #9
 800556a:	b29b      	uxth	r3, r3
 800556c:	461a      	mov	r2, r3
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8005572:	2300      	movs	r3, #0
 8005574:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8005578:	e006      	b.n	8005588 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 800557a:	2301      	movs	r3, #1
 800557c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8005580:	e002      	b.n	8005588 <USBH_ioctl+0xc8>

  default:
    res = RES_PARERR;
 8005582:	2304      	movs	r3, #4
 8005584:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return res;
 8005588:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800558c:	4618      	mov	r0, r3
 800558e:	3740      	adds	r7, #64	; 0x40
 8005590:	46bd      	mov	sp, r7
 8005592:	bd80      	pop	{r7, pc}
 8005594:	20000654 	.word	0x20000654

08005598 <USBH_MSC_InterfaceInit>:
  *         The function init the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceInit (USBH_HandleTypeDef *phost)
{
 8005598:	b590      	push	{r4, r7, lr}
 800559a:	b089      	sub	sp, #36	; 0x24
 800559c:	af04      	add	r7, sp, #16
 800559e:	6078      	str	r0, [r7, #4]
  uint8_t interface = 0U;
 80055a0:	2300      	movs	r3, #0
 80055a2:	73bb      	strb	r3, [r7, #14]
  USBH_StatusTypeDef status = USBH_FAIL;
 80055a4:	2302      	movs	r3, #2
 80055a6:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80055ae:	7919      	ldrb	r1, [r3, #4]
 80055b0:	2350      	movs	r3, #80	; 0x50
 80055b2:	2206      	movs	r2, #6
 80055b4:	6878      	ldr	r0, [r7, #4]
 80055b6:	f001 fc4f 	bl	8006e58 <USBH_FindInterface>
 80055ba:	4603      	mov	r3, r0
 80055bc:	73bb      	strb	r3, [r7, #14]

  if(interface == 0xFFU) /* Not Valid Interface */
 80055be:	7bbb      	ldrb	r3, [r7, #14]
 80055c0:	2bff      	cmp	r3, #255	; 0xff
 80055c2:	d102      	bne.n	80055ca <USBH_MSC_InterfaceInit+0x32>
  {
    USBH_DbgLog ("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    status = USBH_FAIL;
 80055c4:	2302      	movs	r3, #2
 80055c6:	73fb      	strb	r3, [r7, #15]
 80055c8:	e10b      	b.n	80057e2 <USBH_MSC_InterfaceInit+0x24a>
  }
  else
  {
    USBH_SelectInterface (phost, interface);
 80055ca:	7bbb      	ldrb	r3, [r7, #14]
 80055cc:	4619      	mov	r1, r3
 80055ce:	6878      	ldr	r0, [r7, #4]
 80055d0:	f001 fc26 	bl	8006e20 <USBH_SelectInterface>

    phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc (sizeof(MSC_HandleTypeDef));
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	f8d3 4378 	ldr.w	r4, [r3, #888]	; 0x378
 80055da:	f44f 7080 	mov.w	r0, #256	; 0x100
 80055de:	f005 fad9 	bl	800ab94 <malloc>
 80055e2:	4603      	mov	r3, r0
 80055e4:	61e3      	str	r3, [r4, #28]
    MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80055ec:	69db      	ldr	r3, [r3, #28]
 80055ee:	60bb      	str	r3, [r7, #8]

    if(phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80055f6:	4619      	mov	r1, r3
 80055f8:	687a      	ldr	r2, [r7, #4]
 80055fa:	231a      	movs	r3, #26
 80055fc:	fb03 f301 	mul.w	r3, r3, r1
 8005600:	4413      	add	r3, r2
 8005602:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8005606:	781b      	ldrb	r3, [r3, #0]
 8005608:	b25b      	sxtb	r3, r3
 800560a:	2b00      	cmp	r3, #0
 800560c:	da1c      	bge.n	8005648 <USBH_MSC_InterfaceInit+0xb0>
    {
      MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].bEndpointAddress);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8005614:	4619      	mov	r1, r3
 8005616:	687a      	ldr	r2, [r7, #4]
 8005618:	231a      	movs	r3, #26
 800561a:	fb03 f301 	mul.w	r3, r3, r1
 800561e:	4413      	add	r3, r2
 8005620:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8005624:	781a      	ldrb	r2, [r3, #0]
 8005626:	68bb      	ldr	r3, [r7, #8]
 8005628:	71da      	strb	r2, [r3, #7]
      MSC_Handle->InEpSize  = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].wMaxPacketSize;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8005630:	4619      	mov	r1, r3
 8005632:	687a      	ldr	r2, [r7, #4]
 8005634:	231a      	movs	r3, #26
 8005636:	fb03 f301 	mul.w	r3, r3, r1
 800563a:	4413      	add	r3, r2
 800563c:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 8005640:	881a      	ldrh	r2, [r3, #0]
 8005642:	68bb      	ldr	r3, [r7, #8]
 8005644:	815a      	strh	r2, [r3, #10]
 8005646:	e01b      	b.n	8005680 <USBH_MSC_InterfaceInit+0xe8>
    }
    else
    {
      MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].bEndpointAddress);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800564e:	4619      	mov	r1, r3
 8005650:	687a      	ldr	r2, [r7, #4]
 8005652:	231a      	movs	r3, #26
 8005654:	fb03 f301 	mul.w	r3, r3, r1
 8005658:	4413      	add	r3, r2
 800565a:	f203 334a 	addw	r3, r3, #842	; 0x34a
 800565e:	781a      	ldrb	r2, [r3, #0]
 8005660:	68bb      	ldr	r3, [r7, #8]
 8005662:	719a      	strb	r2, [r3, #6]
      MSC_Handle->OutEpSize  = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].wMaxPacketSize;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800566a:	4619      	mov	r1, r3
 800566c:	687a      	ldr	r2, [r7, #4]
 800566e:	231a      	movs	r3, #26
 8005670:	fb03 f301 	mul.w	r3, r3, r1
 8005674:	4413      	add	r3, r2
 8005676:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 800567a:	881a      	ldrh	r2, [r3, #0]
 800567c:	68bb      	ldr	r3, [r7, #8]
 800567e:	811a      	strh	r2, [r3, #8]
    }

    if(phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8005686:	4619      	mov	r1, r3
 8005688:	687a      	ldr	r2, [r7, #4]
 800568a:	231a      	movs	r3, #26
 800568c:	fb03 f301 	mul.w	r3, r3, r1
 8005690:	4413      	add	r3, r2
 8005692:	f203 3352 	addw	r3, r3, #850	; 0x352
 8005696:	781b      	ldrb	r3, [r3, #0]
 8005698:	b25b      	sxtb	r3, r3
 800569a:	2b00      	cmp	r3, #0
 800569c:	da1c      	bge.n	80056d8 <USBH_MSC_InterfaceInit+0x140>
    {
      MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].bEndpointAddress);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80056a4:	4619      	mov	r1, r3
 80056a6:	687a      	ldr	r2, [r7, #4]
 80056a8:	231a      	movs	r3, #26
 80056aa:	fb03 f301 	mul.w	r3, r3, r1
 80056ae:	4413      	add	r3, r2
 80056b0:	f203 3352 	addw	r3, r3, #850	; 0x352
 80056b4:	781a      	ldrb	r2, [r3, #0]
 80056b6:	68bb      	ldr	r3, [r7, #8]
 80056b8:	71da      	strb	r2, [r3, #7]
      MSC_Handle->InEpSize  = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].wMaxPacketSize;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80056c0:	4619      	mov	r1, r3
 80056c2:	687a      	ldr	r2, [r7, #4]
 80056c4:	231a      	movs	r3, #26
 80056c6:	fb03 f301 	mul.w	r3, r3, r1
 80056ca:	4413      	add	r3, r2
 80056cc:	f503 7355 	add.w	r3, r3, #852	; 0x354
 80056d0:	881a      	ldrh	r2, [r3, #0]
 80056d2:	68bb      	ldr	r3, [r7, #8]
 80056d4:	815a      	strh	r2, [r3, #10]
 80056d6:	e01b      	b.n	8005710 <USBH_MSC_InterfaceInit+0x178>
    }
    else
    {
      MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].bEndpointAddress);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80056de:	4619      	mov	r1, r3
 80056e0:	687a      	ldr	r2, [r7, #4]
 80056e2:	231a      	movs	r3, #26
 80056e4:	fb03 f301 	mul.w	r3, r3, r1
 80056e8:	4413      	add	r3, r2
 80056ea:	f203 3352 	addw	r3, r3, #850	; 0x352
 80056ee:	781a      	ldrb	r2, [r3, #0]
 80056f0:	68bb      	ldr	r3, [r7, #8]
 80056f2:	719a      	strb	r2, [r3, #6]
      MSC_Handle->OutEpSize  = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].wMaxPacketSize;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80056fa:	4619      	mov	r1, r3
 80056fc:	687a      	ldr	r2, [r7, #4]
 80056fe:	231a      	movs	r3, #26
 8005700:	fb03 f301 	mul.w	r3, r3, r1
 8005704:	4413      	add	r3, r2
 8005706:	f503 7355 	add.w	r3, r3, #852	; 0x354
 800570a:	881a      	ldrh	r2, [r3, #0]
 800570c:	68bb      	ldr	r3, [r7, #8]
 800570e:	811a      	strh	r2, [r3, #8]
    }

    MSC_Handle->current_lun = 0U;
 8005710:	68bb      	ldr	r3, [r7, #8]
 8005712:	2200      	movs	r2, #0
 8005714:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
    MSC_Handle->rw_lun = 0U;
 8005718:	68bb      	ldr	r3, [r7, #8]
 800571a:	2200      	movs	r2, #0
 800571c:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa
    MSC_Handle->state = MSC_INIT;
 8005720:	68bb      	ldr	r3, [r7, #8]
 8005722:	2200      	movs	r2, #0
 8005724:	731a      	strb	r2, [r3, #12]
    MSC_Handle->error = MSC_OK;
 8005726:	68bb      	ldr	r3, [r7, #8]
 8005728:	2200      	movs	r2, #0
 800572a:	735a      	strb	r2, [r3, #13]
    MSC_Handle->req_state = MSC_REQ_IDLE;
 800572c:	68bb      	ldr	r3, [r7, #8]
 800572e:	2200      	movs	r2, #0
 8005730:	739a      	strb	r2, [r3, #14]
    MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 8005732:	68bb      	ldr	r3, [r7, #8]
 8005734:	799b      	ldrb	r3, [r3, #6]
 8005736:	4619      	mov	r1, r3
 8005738:	6878      	ldr	r0, [r7, #4]
 800573a:	f002 fcb4 	bl	80080a6 <USBH_AllocPipe>
 800573e:	4603      	mov	r3, r0
 8005740:	461a      	mov	r2, r3
 8005742:	68bb      	ldr	r3, [r7, #8]
 8005744:	715a      	strb	r2, [r3, #5]
    MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 8005746:	68bb      	ldr	r3, [r7, #8]
 8005748:	79db      	ldrb	r3, [r3, #7]
 800574a:	4619      	mov	r1, r3
 800574c:	6878      	ldr	r0, [r7, #4]
 800574e:	f002 fcaa 	bl	80080a6 <USBH_AllocPipe>
 8005752:	4603      	mov	r3, r0
 8005754:	461a      	mov	r2, r3
 8005756:	68bb      	ldr	r3, [r7, #8]
 8005758:	711a      	strb	r2, [r3, #4]

    USBH_MSC_BOT_Init(phost);
 800575a:	6878      	ldr	r0, [r7, #4]
 800575c:	f000 fdac 	bl	80062b8 <USBH_MSC_BOT_Init>

    /* De-Initialize LUNs information */
    USBH_memset(MSC_Handle->unit, 0, sizeof(MSC_Handle->unit));
 8005760:	68bb      	ldr	r3, [r7, #8]
 8005762:	3390      	adds	r3, #144	; 0x90
 8005764:	2268      	movs	r2, #104	; 0x68
 8005766:	2100      	movs	r1, #0
 8005768:	4618      	mov	r0, r3
 800576a:	f005 fa2e 	bl	800abca <memset>

    /* Open the new channels */
    USBH_OpenPipe  (phost,
 800576e:	68bb      	ldr	r3, [r7, #8]
 8005770:	7959      	ldrb	r1, [r3, #5]
 8005772:	68bb      	ldr	r3, [r7, #8]
 8005774:	7998      	ldrb	r0, [r3, #6]
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005782:	68ba      	ldr	r2, [r7, #8]
 8005784:	8912      	ldrh	r2, [r2, #8]
 8005786:	9202      	str	r2, [sp, #8]
 8005788:	2202      	movs	r2, #2
 800578a:	9201      	str	r2, [sp, #4]
 800578c:	9300      	str	r3, [sp, #0]
 800578e:	4623      	mov	r3, r4
 8005790:	4602      	mov	r2, r0
 8005792:	6878      	ldr	r0, [r7, #4]
 8005794:	f002 fc58 	bl	8008048 <USBH_OpenPipe>
                    phost->device.address,
                    phost->device.speed,
                    USB_EP_TYPE_BULK,
                    MSC_Handle->OutEpSize);

    USBH_OpenPipe  (phost,
 8005798:	68bb      	ldr	r3, [r7, #8]
 800579a:	7919      	ldrb	r1, [r3, #4]
 800579c:	68bb      	ldr	r3, [r7, #8]
 800579e:	79d8      	ldrb	r0, [r3, #7]
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80057ac:	68ba      	ldr	r2, [r7, #8]
 80057ae:	8952      	ldrh	r2, [r2, #10]
 80057b0:	9202      	str	r2, [sp, #8]
 80057b2:	2202      	movs	r2, #2
 80057b4:	9201      	str	r2, [sp, #4]
 80057b6:	9300      	str	r3, [sp, #0]
 80057b8:	4623      	mov	r3, r4
 80057ba:	4602      	mov	r2, r0
 80057bc:	6878      	ldr	r0, [r7, #4]
 80057be:	f002 fc43 	bl	8008048 <USBH_OpenPipe>
                    phost->device.address,
                    phost->device.speed,
                    USB_EP_TYPE_BULK,
                    MSC_Handle->InEpSize);

    USBH_LL_SetToggle (phost, MSC_Handle->InPipe, 0U);
 80057c2:	68bb      	ldr	r3, [r7, #8]
 80057c4:	791b      	ldrb	r3, [r3, #4]
 80057c6:	2200      	movs	r2, #0
 80057c8:	4619      	mov	r1, r3
 80057ca:	6878      	ldr	r0, [r7, #4]
 80057cc:	f005 f8fe 	bl	800a9cc <USBH_LL_SetToggle>
    USBH_LL_SetToggle (phost, MSC_Handle->OutPipe, 0U);
 80057d0:	68bb      	ldr	r3, [r7, #8]
 80057d2:	795b      	ldrb	r3, [r3, #5]
 80057d4:	2200      	movs	r2, #0
 80057d6:	4619      	mov	r1, r3
 80057d8:	6878      	ldr	r0, [r7, #4]
 80057da:	f005 f8f7 	bl	800a9cc <USBH_LL_SetToggle>
    status = USBH_OK;
 80057de:	2300      	movs	r3, #0
 80057e0:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 80057e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80057e4:	4618      	mov	r0, r3
 80057e6:	3714      	adds	r7, #20
 80057e8:	46bd      	mov	sp, r7
 80057ea:	bd90      	pop	{r4, r7, pc}

080057ec <USBH_MSC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceDeInit (USBH_HandleTypeDef *phost)
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b084      	sub	sp, #16
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80057fa:	69db      	ldr	r3, [r3, #28]
 80057fc:	60fb      	str	r3, [r7, #12]

  if ( MSC_Handle->OutPipe)
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	795b      	ldrb	r3, [r3, #5]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d00e      	beq.n	8005824 <USBH_MSC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	795b      	ldrb	r3, [r3, #5]
 800580a:	4619      	mov	r1, r3
 800580c:	6878      	ldr	r0, [r7, #4]
 800580e:	f002 fc3a 	bl	8008086 <USBH_ClosePipe>
    USBH_FreePipe  (phost, MSC_Handle->OutPipe);
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	795b      	ldrb	r3, [r3, #5]
 8005816:	4619      	mov	r1, r3
 8005818:	6878      	ldr	r0, [r7, #4]
 800581a:	f002 fc62 	bl	80080e2 <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	2200      	movs	r2, #0
 8005822:	715a      	strb	r2, [r3, #5]
  }

  if ( MSC_Handle->InPipe)
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	791b      	ldrb	r3, [r3, #4]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d00e      	beq.n	800584a <USBH_MSC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, MSC_Handle->InPipe);
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	791b      	ldrb	r3, [r3, #4]
 8005830:	4619      	mov	r1, r3
 8005832:	6878      	ldr	r0, [r7, #4]
 8005834:	f002 fc27 	bl	8008086 <USBH_ClosePipe>
    USBH_FreePipe  (phost, MSC_Handle->InPipe);
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	791b      	ldrb	r3, [r3, #4]
 800583c:	4619      	mov	r1, r3
 800583e:	6878      	ldr	r0, [r7, #4]
 8005840:	f002 fc4f 	bl	80080e2 <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	2200      	movs	r2, #0
 8005848:	711a      	strb	r2, [r3, #4]
  }

  if(phost->pActiveClass->pData)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005850:	69db      	ldr	r3, [r3, #28]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d00b      	beq.n	800586e <USBH_MSC_InterfaceDeInit+0x82>
  {
    USBH_free (phost->pActiveClass->pData);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800585c:	69db      	ldr	r3, [r3, #28]
 800585e:	4618      	mov	r0, r3
 8005860:	f005 f9a0 	bl	800aba4 <free>
    phost->pActiveClass->pData = 0U;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800586a:	2200      	movs	r2, #0
 800586c:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800586e:	2300      	movs	r3, #0
}
 8005870:	4618      	mov	r0, r3
 8005872:	3710      	adds	r7, #16
 8005874:	46bd      	mov	sp, r7
 8005876:	bd80      	pop	{r7, pc}

08005878 <USBH_MSC_ClassRequest>:
  *         for MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b084      	sub	sp, #16
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005886:	69db      	ldr	r3, [r3, #28]
 8005888:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef status = USBH_BUSY;
 800588a:	2301      	movs	r3, #1
 800588c:	73fb      	strb	r3, [r7, #15]
  uint8_t i;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->req_state)
 800588e:	68bb      	ldr	r3, [r7, #8]
 8005890:	7b9b      	ldrb	r3, [r3, #14]
 8005892:	2b02      	cmp	r3, #2
 8005894:	d004      	beq.n	80058a0 <USBH_MSC_ClassRequest+0x28>
 8005896:	2b03      	cmp	r3, #3
 8005898:	d03e      	beq.n	8005918 <USBH_MSC_ClassRequest+0xa0>
 800589a:	2b00      	cmp	r3, #0
 800589c:	d000      	beq.n	80058a0 <USBH_MSC_ClassRequest+0x28>
      MSC_Handle->req_state = MSC_Handle->prev_req_state;
    }
    break;

  default:
    break;
 800589e:	e04a      	b.n	8005936 <USBH_MSC_ClassRequest+0xbe>
    status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, (uint8_t *)(void *)&MSC_Handle->max_lun);
 80058a0:	68bb      	ldr	r3, [r7, #8]
 80058a2:	4619      	mov	r1, r3
 80058a4:	6878      	ldr	r0, [r7, #4]
 80058a6:	f000 fce9 	bl	800627c <USBH_MSC_BOT_REQ_GetMaxLUN>
 80058aa:	4603      	mov	r3, r0
 80058ac:	73fb      	strb	r3, [r7, #15]
    if(status == USBH_NOT_SUPPORTED)
 80058ae:	7bfb      	ldrb	r3, [r7, #15]
 80058b0:	2b03      	cmp	r3, #3
 80058b2:	d104      	bne.n	80058be <USBH_MSC_ClassRequest+0x46>
      MSC_Handle->max_lun = 0U;
 80058b4:	68bb      	ldr	r3, [r7, #8]
 80058b6:	2200      	movs	r2, #0
 80058b8:	601a      	str	r2, [r3, #0]
      status = USBH_OK;
 80058ba:	2300      	movs	r3, #0
 80058bc:	73fb      	strb	r3, [r7, #15]
    if(status == USBH_OK)
 80058be:	7bfb      	ldrb	r3, [r7, #15]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d135      	bne.n	8005930 <USBH_MSC_ClassRequest+0xb8>
      MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN)? MAX_SUPPORTED_LUN : (uint8_t )(MSC_Handle->max_lun) + 1U;
 80058c4:	68bb      	ldr	r3, [r7, #8]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	2b02      	cmp	r3, #2
 80058ca:	d804      	bhi.n	80058d6 <USBH_MSC_ClassRequest+0x5e>
 80058cc:	68bb      	ldr	r3, [r7, #8]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	b2db      	uxtb	r3, r3
 80058d2:	3301      	adds	r3, #1
 80058d4:	e000      	b.n	80058d8 <USBH_MSC_ClassRequest+0x60>
 80058d6:	2302      	movs	r3, #2
 80058d8:	68ba      	ldr	r2, [r7, #8]
 80058da:	6013      	str	r3, [r2, #0]
      for(i = 0U; i < MSC_Handle->max_lun; i++)
 80058dc:	2300      	movs	r3, #0
 80058de:	73bb      	strb	r3, [r7, #14]
 80058e0:	e014      	b.n	800590c <USBH_MSC_ClassRequest+0x94>
        MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 80058e2:	7bbb      	ldrb	r3, [r7, #14]
 80058e4:	68ba      	ldr	r2, [r7, #8]
 80058e6:	2134      	movs	r1, #52	; 0x34
 80058e8:	fb01 f303 	mul.w	r3, r1, r3
 80058ec:	4413      	add	r3, r2
 80058ee:	3392      	adds	r3, #146	; 0x92
 80058f0:	2202      	movs	r2, #2
 80058f2:	701a      	strb	r2, [r3, #0]
        MSC_Handle->unit[i].state_changed = 0U;
 80058f4:	7bbb      	ldrb	r3, [r7, #14]
 80058f6:	68ba      	ldr	r2, [r7, #8]
 80058f8:	2134      	movs	r1, #52	; 0x34
 80058fa:	fb01 f303 	mul.w	r3, r1, r3
 80058fe:	4413      	add	r3, r2
 8005900:	33c1      	adds	r3, #193	; 0xc1
 8005902:	2200      	movs	r2, #0
 8005904:	701a      	strb	r2, [r3, #0]
      for(i = 0U; i < MSC_Handle->max_lun; i++)
 8005906:	7bbb      	ldrb	r3, [r7, #14]
 8005908:	3301      	adds	r3, #1
 800590a:	73bb      	strb	r3, [r7, #14]
 800590c:	7bba      	ldrb	r2, [r7, #14]
 800590e:	68bb      	ldr	r3, [r7, #8]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	429a      	cmp	r2, r3
 8005914:	d3e5      	bcc.n	80058e2 <USBH_MSC_ClassRequest+0x6a>
    break;
 8005916:	e00b      	b.n	8005930 <USBH_MSC_ClassRequest+0xb8>
    if(USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 8005918:	2100      	movs	r1, #0
 800591a:	6878      	ldr	r0, [r7, #4]
 800591c:	f001 ff60 	bl	80077e0 <USBH_ClrFeature>
 8005920:	4603      	mov	r3, r0
 8005922:	2b00      	cmp	r3, #0
 8005924:	d106      	bne.n	8005934 <USBH_MSC_ClassRequest+0xbc>
      MSC_Handle->req_state = MSC_Handle->prev_req_state;
 8005926:	68bb      	ldr	r3, [r7, #8]
 8005928:	7bda      	ldrb	r2, [r3, #15]
 800592a:	68bb      	ldr	r3, [r7, #8]
 800592c:	739a      	strb	r2, [r3, #14]
    break;
 800592e:	e001      	b.n	8005934 <USBH_MSC_ClassRequest+0xbc>
    break;
 8005930:	bf00      	nop
 8005932:	e000      	b.n	8005936 <USBH_MSC_ClassRequest+0xbe>
    break;
 8005934:	bf00      	nop
  }

  return status;
 8005936:	7bfb      	ldrb	r3, [r7, #15]
}
 8005938:	4618      	mov	r0, r3
 800593a:	3710      	adds	r7, #16
 800593c:	46bd      	mov	sp, r7
 800593e:	bd80      	pop	{r7, pc}

08005940 <USBH_MSC_Process>:
  *         The function is for managing state machine for MSC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
{
 8005940:	b580      	push	{r7, lr}
 8005942:	b086      	sub	sp, #24
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800594e:	69db      	ldr	r3, [r3, #28]
 8005950:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY ;
 8005952:	2301      	movs	r3, #1
 8005954:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY ;
 8005956:	2301      	movs	r3, #1
 8005958:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ready_status = USBH_BUSY ;
 800595a:	2301      	movs	r3, #1
 800595c:	73bb      	strb	r3, [r7, #14]

  switch (MSC_Handle->state)
 800595e:	693b      	ldr	r3, [r7, #16]
 8005960:	7b1b      	ldrb	r3, [r3, #12]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d003      	beq.n	800596e <USBH_MSC_Process+0x2e>
 8005966:	2b01      	cmp	r3, #1
 8005968:	f000 8271 	beq.w	8005e4e <USBH_MSC_Process+0x50e>
  case MSC_IDLE:
    error = USBH_OK;
    break;

  default:
    break;
 800596c:	e272      	b.n	8005e54 <USBH_MSC_Process+0x514>
    if(MSC_Handle->current_lun < MSC_Handle->max_lun)
 800596e:	693b      	ldr	r3, [r7, #16]
 8005970:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005974:	461a      	mov	r2, r3
 8005976:	693b      	ldr	r3, [r7, #16]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	429a      	cmp	r2, r3
 800597c:	f080 824f 	bcs.w	8005e1e <USBH_MSC_Process+0x4de>
      MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8005980:	693b      	ldr	r3, [r7, #16]
 8005982:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005986:	4619      	mov	r1, r3
 8005988:	693a      	ldr	r2, [r7, #16]
 800598a:	2334      	movs	r3, #52	; 0x34
 800598c:	fb03 f301 	mul.w	r3, r3, r1
 8005990:	4413      	add	r3, r2
 8005992:	3391      	adds	r3, #145	; 0x91
 8005994:	2201      	movs	r2, #1
 8005996:	701a      	strb	r2, [r3, #0]
      switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 8005998:	693b      	ldr	r3, [r7, #16]
 800599a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800599e:	4619      	mov	r1, r3
 80059a0:	693a      	ldr	r2, [r7, #16]
 80059a2:	2334      	movs	r3, #52	; 0x34
 80059a4:	fb03 f301 	mul.w	r3, r3, r1
 80059a8:	4413      	add	r3, r2
 80059aa:	3390      	adds	r3, #144	; 0x90
 80059ac:	781b      	ldrb	r3, [r3, #0]
 80059ae:	2b08      	cmp	r3, #8
 80059b0:	f200 8243 	bhi.w	8005e3a <USBH_MSC_Process+0x4fa>
 80059b4:	a201      	add	r2, pc, #4	; (adr r2, 80059bc <USBH_MSC_Process+0x7c>)
 80059b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059ba:	bf00      	nop
 80059bc:	080059e1 	.word	0x080059e1
 80059c0:	08005e3b 	.word	0x08005e3b
 80059c4:	08005aa9 	.word	0x08005aa9
 80059c8:	08005c2d 	.word	0x08005c2d
 80059cc:	08005a07 	.word	0x08005a07
 80059d0:	08005cf9 	.word	0x08005cf9
 80059d4:	08005e3b 	.word	0x08005e3b
 80059d8:	08005e3b 	.word	0x08005e3b
 80059dc:	08005e0d 	.word	0x08005e0d
        MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 80059e0:	693b      	ldr	r3, [r7, #16]
 80059e2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80059e6:	4619      	mov	r1, r3
 80059e8:	693a      	ldr	r2, [r7, #16]
 80059ea:	2334      	movs	r3, #52	; 0x34
 80059ec:	fb03 f301 	mul.w	r3, r3, r1
 80059f0:	4413      	add	r3, r2
 80059f2:	3390      	adds	r3, #144	; 0x90
 80059f4:	2204      	movs	r2, #4
 80059f6:	701a      	strb	r2, [r3, #0]
        MSC_Handle->timer = phost->Timer;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	f8d3 23bc 	ldr.w	r2, [r3, #956]	; 0x3bc
 80059fe:	693b      	ldr	r3, [r7, #16]
 8005a00:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
        break;
 8005a04:	e222      	b.n	8005e4c <USBH_MSC_Process+0x50c>
        scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 8005a06:	693b      	ldr	r3, [r7, #16]
 8005a08:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005a0c:	b2d9      	uxtb	r1, r3
 8005a0e:	693b      	ldr	r3, [r7, #16]
 8005a10:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005a14:	461a      	mov	r2, r3
 8005a16:	2334      	movs	r3, #52	; 0x34
 8005a18:	fb03 f302 	mul.w	r3, r3, r2
 8005a1c:	3398      	adds	r3, #152	; 0x98
 8005a1e:	693a      	ldr	r2, [r7, #16]
 8005a20:	4413      	add	r3, r2
 8005a22:	3307      	adds	r3, #7
 8005a24:	461a      	mov	r2, r3
 8005a26:	6878      	ldr	r0, [r7, #4]
 8005a28:	f000 ff68 	bl	80068fc <USBH_MSC_SCSI_Inquiry>
 8005a2c:	4603      	mov	r3, r0
 8005a2e:	73fb      	strb	r3, [r7, #15]
        if (scsi_status == USBH_OK)
 8005a30:	7bfb      	ldrb	r3, [r7, #15]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d10b      	bne.n	8005a4e <USBH_MSC_Process+0x10e>
          MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 8005a36:	693b      	ldr	r3, [r7, #16]
 8005a38:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005a3c:	4619      	mov	r1, r3
 8005a3e:	693a      	ldr	r2, [r7, #16]
 8005a40:	2334      	movs	r3, #52	; 0x34
 8005a42:	fb03 f301 	mul.w	r3, r3, r1
 8005a46:	4413      	add	r3, r2
 8005a48:	3390      	adds	r3, #144	; 0x90
 8005a4a:	2202      	movs	r2, #2
 8005a4c:	701a      	strb	r2, [r3, #0]
        if (scsi_status == USBH_FAIL)
 8005a4e:	7bfb      	ldrb	r3, [r7, #15]
 8005a50:	2b02      	cmp	r3, #2
 8005a52:	d10c      	bne.n	8005a6e <USBH_MSC_Process+0x12e>
          MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8005a54:	693b      	ldr	r3, [r7, #16]
 8005a56:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005a5a:	4619      	mov	r1, r3
 8005a5c:	693a      	ldr	r2, [r7, #16]
 8005a5e:	2334      	movs	r3, #52	; 0x34
 8005a60:	fb03 f301 	mul.w	r3, r3, r1
 8005a64:	4413      	add	r3, r2
 8005a66:	3390      	adds	r3, #144	; 0x90
 8005a68:	2205      	movs	r2, #5
 8005a6a:	701a      	strb	r2, [r3, #0]
        break;
 8005a6c:	e1e7      	b.n	8005e3e <USBH_MSC_Process+0x4fe>
          if(scsi_status == USBH_UNRECOVERED_ERROR)
 8005a6e:	7bfb      	ldrb	r3, [r7, #15]
 8005a70:	2b04      	cmp	r3, #4
 8005a72:	f040 81e4 	bne.w	8005e3e <USBH_MSC_Process+0x4fe>
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8005a76:	693b      	ldr	r3, [r7, #16]
 8005a78:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005a7c:	4619      	mov	r1, r3
 8005a7e:	693a      	ldr	r2, [r7, #16]
 8005a80:	2334      	movs	r3, #52	; 0x34
 8005a82:	fb03 f301 	mul.w	r3, r3, r1
 8005a86:	4413      	add	r3, r2
 8005a88:	3390      	adds	r3, #144	; 0x90
 8005a8a:	2201      	movs	r2, #1
 8005a8c:	701a      	strb	r2, [r3, #0]
            MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8005a8e:	693b      	ldr	r3, [r7, #16]
 8005a90:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005a94:	4619      	mov	r1, r3
 8005a96:	693a      	ldr	r2, [r7, #16]
 8005a98:	2334      	movs	r3, #52	; 0x34
 8005a9a:	fb03 f301 	mul.w	r3, r3, r1
 8005a9e:	4413      	add	r3, r2
 8005aa0:	3391      	adds	r3, #145	; 0x91
 8005aa2:	2202      	movs	r2, #2
 8005aa4:	701a      	strb	r2, [r3, #0]
        break;
 8005aa6:	e1ca      	b.n	8005e3e <USBH_MSC_Process+0x4fe>
        ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 8005aa8:	693b      	ldr	r3, [r7, #16]
 8005aaa:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005aae:	b2db      	uxtb	r3, r3
 8005ab0:	4619      	mov	r1, r3
 8005ab2:	6878      	ldr	r0, [r7, #4]
 8005ab4:	f000 fe64 	bl	8006780 <USBH_MSC_SCSI_TestUnitReady>
 8005ab8:	4603      	mov	r3, r0
 8005aba:	73bb      	strb	r3, [r7, #14]
        if (ready_status == USBH_OK)
 8005abc:	7bbb      	ldrb	r3, [r7, #14]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d149      	bne.n	8005b56 <USBH_MSC_Process+0x216>
          if(MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 8005ac2:	693b      	ldr	r3, [r7, #16]
 8005ac4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005ac8:	4619      	mov	r1, r3
 8005aca:	693a      	ldr	r2, [r7, #16]
 8005acc:	2334      	movs	r3, #52	; 0x34
 8005ace:	fb03 f301 	mul.w	r3, r3, r1
 8005ad2:	4413      	add	r3, r2
 8005ad4:	3392      	adds	r3, #146	; 0x92
 8005ad6:	781b      	ldrb	r3, [r3, #0]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d00c      	beq.n	8005af6 <USBH_MSC_Process+0x1b6>
            MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 8005adc:	693b      	ldr	r3, [r7, #16]
 8005ade:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005ae2:	4619      	mov	r1, r3
 8005ae4:	693a      	ldr	r2, [r7, #16]
 8005ae6:	2334      	movs	r3, #52	; 0x34
 8005ae8:	fb03 f301 	mul.w	r3, r3, r1
 8005aec:	4413      	add	r3, r2
 8005aee:	33c1      	adds	r3, #193	; 0xc1
 8005af0:	2201      	movs	r2, #1
 8005af2:	701a      	strb	r2, [r3, #0]
 8005af4:	e00b      	b.n	8005b0e <USBH_MSC_Process+0x1ce>
            MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 8005af6:	693b      	ldr	r3, [r7, #16]
 8005af8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005afc:	4619      	mov	r1, r3
 8005afe:	693a      	ldr	r2, [r7, #16]
 8005b00:	2334      	movs	r3, #52	; 0x34
 8005b02:	fb03 f301 	mul.w	r3, r3, r1
 8005b06:	4413      	add	r3, r2
 8005b08:	33c1      	adds	r3, #193	; 0xc1
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 8005b0e:	693b      	ldr	r3, [r7, #16]
 8005b10:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005b14:	4619      	mov	r1, r3
 8005b16:	693a      	ldr	r2, [r7, #16]
 8005b18:	2334      	movs	r3, #52	; 0x34
 8005b1a:	fb03 f301 	mul.w	r3, r3, r1
 8005b1e:	4413      	add	r3, r2
 8005b20:	3390      	adds	r3, #144	; 0x90
 8005b22:	2203      	movs	r2, #3
 8005b24:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 8005b26:	693b      	ldr	r3, [r7, #16]
 8005b28:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005b2c:	4619      	mov	r1, r3
 8005b2e:	693a      	ldr	r2, [r7, #16]
 8005b30:	2334      	movs	r3, #52	; 0x34
 8005b32:	fb03 f301 	mul.w	r3, r3, r1
 8005b36:	4413      	add	r3, r2
 8005b38:	3391      	adds	r3, #145	; 0x91
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 8005b3e:	693b      	ldr	r3, [r7, #16]
 8005b40:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005b44:	4619      	mov	r1, r3
 8005b46:	693a      	ldr	r2, [r7, #16]
 8005b48:	2334      	movs	r3, #52	; 0x34
 8005b4a:	fb03 f301 	mul.w	r3, r3, r1
 8005b4e:	4413      	add	r3, r2
 8005b50:	3392      	adds	r3, #146	; 0x92
 8005b52:	2200      	movs	r2, #0
 8005b54:	701a      	strb	r2, [r3, #0]
        if (ready_status == USBH_FAIL)
 8005b56:	7bbb      	ldrb	r3, [r7, #14]
 8005b58:	2b02      	cmp	r3, #2
 8005b5a:	d14a      	bne.n	8005bf2 <USBH_MSC_Process+0x2b2>
          if( MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 8005b5c:	693b      	ldr	r3, [r7, #16]
 8005b5e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005b62:	4619      	mov	r1, r3
 8005b64:	693a      	ldr	r2, [r7, #16]
 8005b66:	2334      	movs	r3, #52	; 0x34
 8005b68:	fb03 f301 	mul.w	r3, r3, r1
 8005b6c:	4413      	add	r3, r2
 8005b6e:	3392      	adds	r3, #146	; 0x92
 8005b70:	781b      	ldrb	r3, [r3, #0]
 8005b72:	2b02      	cmp	r3, #2
 8005b74:	d00c      	beq.n	8005b90 <USBH_MSC_Process+0x250>
            MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 8005b76:	693b      	ldr	r3, [r7, #16]
 8005b78:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005b7c:	4619      	mov	r1, r3
 8005b7e:	693a      	ldr	r2, [r7, #16]
 8005b80:	2334      	movs	r3, #52	; 0x34
 8005b82:	fb03 f301 	mul.w	r3, r3, r1
 8005b86:	4413      	add	r3, r2
 8005b88:	33c1      	adds	r3, #193	; 0xc1
 8005b8a:	2201      	movs	r2, #1
 8005b8c:	701a      	strb	r2, [r3, #0]
 8005b8e:	e00b      	b.n	8005ba8 <USBH_MSC_Process+0x268>
            MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 8005b90:	693b      	ldr	r3, [r7, #16]
 8005b92:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005b96:	4619      	mov	r1, r3
 8005b98:	693a      	ldr	r2, [r7, #16]
 8005b9a:	2334      	movs	r3, #52	; 0x34
 8005b9c:	fb03 f301 	mul.w	r3, r3, r1
 8005ba0:	4413      	add	r3, r2
 8005ba2:	33c1      	adds	r3, #193	; 0xc1
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8005ba8:	693b      	ldr	r3, [r7, #16]
 8005baa:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005bae:	4619      	mov	r1, r3
 8005bb0:	693a      	ldr	r2, [r7, #16]
 8005bb2:	2334      	movs	r3, #52	; 0x34
 8005bb4:	fb03 f301 	mul.w	r3, r3, r1
 8005bb8:	4413      	add	r3, r2
 8005bba:	3390      	adds	r3, #144	; 0x90
 8005bbc:	2205      	movs	r2, #5
 8005bbe:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8005bc0:	693b      	ldr	r3, [r7, #16]
 8005bc2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005bc6:	4619      	mov	r1, r3
 8005bc8:	693a      	ldr	r2, [r7, #16]
 8005bca:	2334      	movs	r3, #52	; 0x34
 8005bcc:	fb03 f301 	mul.w	r3, r3, r1
 8005bd0:	4413      	add	r3, r2
 8005bd2:	3391      	adds	r3, #145	; 0x91
 8005bd4:	2201      	movs	r2, #1
 8005bd6:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 8005bd8:	693b      	ldr	r3, [r7, #16]
 8005bda:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005bde:	4619      	mov	r1, r3
 8005be0:	693a      	ldr	r2, [r7, #16]
 8005be2:	2334      	movs	r3, #52	; 0x34
 8005be4:	fb03 f301 	mul.w	r3, r3, r1
 8005be8:	4413      	add	r3, r2
 8005bea:	3392      	adds	r3, #146	; 0x92
 8005bec:	2202      	movs	r2, #2
 8005bee:	701a      	strb	r2, [r3, #0]
        break;
 8005bf0:	e127      	b.n	8005e42 <USBH_MSC_Process+0x502>
          if (ready_status == USBH_UNRECOVERED_ERROR)
 8005bf2:	7bbb      	ldrb	r3, [r7, #14]
 8005bf4:	2b04      	cmp	r3, #4
 8005bf6:	f040 8124 	bne.w	8005e42 <USBH_MSC_Process+0x502>
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8005bfa:	693b      	ldr	r3, [r7, #16]
 8005bfc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005c00:	4619      	mov	r1, r3
 8005c02:	693a      	ldr	r2, [r7, #16]
 8005c04:	2334      	movs	r3, #52	; 0x34
 8005c06:	fb03 f301 	mul.w	r3, r3, r1
 8005c0a:	4413      	add	r3, r2
 8005c0c:	3390      	adds	r3, #144	; 0x90
 8005c0e:	2201      	movs	r2, #1
 8005c10:	701a      	strb	r2, [r3, #0]
            MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8005c12:	693b      	ldr	r3, [r7, #16]
 8005c14:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005c18:	4619      	mov	r1, r3
 8005c1a:	693a      	ldr	r2, [r7, #16]
 8005c1c:	2334      	movs	r3, #52	; 0x34
 8005c1e:	fb03 f301 	mul.w	r3, r3, r1
 8005c22:	4413      	add	r3, r2
 8005c24:	3391      	adds	r3, #145	; 0x91
 8005c26:	2202      	movs	r2, #2
 8005c28:	701a      	strb	r2, [r3, #0]
        break;
 8005c2a:	e10a      	b.n	8005e42 <USBH_MSC_Process+0x502>
        scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
 8005c2c:	693b      	ldr	r3, [r7, #16]
 8005c2e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005c32:	b2d9      	uxtb	r1, r3
 8005c34:	693b      	ldr	r3, [r7, #16]
 8005c36:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005c3a:	461a      	mov	r2, r3
 8005c3c:	2334      	movs	r3, #52	; 0x34
 8005c3e:	fb03 f302 	mul.w	r3, r3, r2
 8005c42:	3390      	adds	r3, #144	; 0x90
 8005c44:	693a      	ldr	r2, [r7, #16]
 8005c46:	4413      	add	r3, r2
 8005c48:	3304      	adds	r3, #4
 8005c4a:	461a      	mov	r2, r3
 8005c4c:	6878      	ldr	r0, [r7, #4]
 8005c4e:	f000 fdda 	bl	8006806 <USBH_MSC_SCSI_ReadCapacity>
 8005c52:	4603      	mov	r3, r0
 8005c54:	73fb      	strb	r3, [r7, #15]
        if(scsi_status == USBH_OK)
 8005c56:	7bfb      	ldrb	r3, [r7, #15]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d120      	bne.n	8005c9e <USBH_MSC_Process+0x35e>
          MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8005c5c:	693b      	ldr	r3, [r7, #16]
 8005c5e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005c62:	4619      	mov	r1, r3
 8005c64:	693a      	ldr	r2, [r7, #16]
 8005c66:	2334      	movs	r3, #52	; 0x34
 8005c68:	fb03 f301 	mul.w	r3, r3, r1
 8005c6c:	4413      	add	r3, r2
 8005c6e:	3390      	adds	r3, #144	; 0x90
 8005c70:	2201      	movs	r2, #1
 8005c72:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 8005c74:	693b      	ldr	r3, [r7, #16]
 8005c76:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005c7a:	4619      	mov	r1, r3
 8005c7c:	693a      	ldr	r2, [r7, #16]
 8005c7e:	2334      	movs	r3, #52	; 0x34
 8005c80:	fb03 f301 	mul.w	r3, r3, r1
 8005c84:	4413      	add	r3, r2
 8005c86:	3391      	adds	r3, #145	; 0x91
 8005c88:	2200      	movs	r2, #0
 8005c8a:	701a      	strb	r2, [r3, #0]
          MSC_Handle->current_lun++;
 8005c8c:	693b      	ldr	r3, [r7, #16]
 8005c8e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005c92:	3301      	adds	r3, #1
 8005c94:	b29a      	uxth	r2, r3
 8005c96:	693b      	ldr	r3, [r7, #16]
 8005c98:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
        break;
 8005c9c:	e0d3      	b.n	8005e46 <USBH_MSC_Process+0x506>
        else if(scsi_status == USBH_FAIL)
 8005c9e:	7bfb      	ldrb	r3, [r7, #15]
 8005ca0:	2b02      	cmp	r3, #2
 8005ca2:	d10c      	bne.n	8005cbe <USBH_MSC_Process+0x37e>
          MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8005ca4:	693b      	ldr	r3, [r7, #16]
 8005ca6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005caa:	4619      	mov	r1, r3
 8005cac:	693a      	ldr	r2, [r7, #16]
 8005cae:	2334      	movs	r3, #52	; 0x34
 8005cb0:	fb03 f301 	mul.w	r3, r3, r1
 8005cb4:	4413      	add	r3, r2
 8005cb6:	3390      	adds	r3, #144	; 0x90
 8005cb8:	2205      	movs	r2, #5
 8005cba:	701a      	strb	r2, [r3, #0]
        break;
 8005cbc:	e0c3      	b.n	8005e46 <USBH_MSC_Process+0x506>
          if(scsi_status == USBH_UNRECOVERED_ERROR)
 8005cbe:	7bfb      	ldrb	r3, [r7, #15]
 8005cc0:	2b04      	cmp	r3, #4
 8005cc2:	f040 80c0 	bne.w	8005e46 <USBH_MSC_Process+0x506>
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8005cc6:	693b      	ldr	r3, [r7, #16]
 8005cc8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005ccc:	4619      	mov	r1, r3
 8005cce:	693a      	ldr	r2, [r7, #16]
 8005cd0:	2334      	movs	r3, #52	; 0x34
 8005cd2:	fb03 f301 	mul.w	r3, r3, r1
 8005cd6:	4413      	add	r3, r2
 8005cd8:	3390      	adds	r3, #144	; 0x90
 8005cda:	2201      	movs	r2, #1
 8005cdc:	701a      	strb	r2, [r3, #0]
            MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8005cde:	693b      	ldr	r3, [r7, #16]
 8005ce0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005ce4:	4619      	mov	r1, r3
 8005ce6:	693a      	ldr	r2, [r7, #16]
 8005ce8:	2334      	movs	r3, #52	; 0x34
 8005cea:	fb03 f301 	mul.w	r3, r3, r1
 8005cee:	4413      	add	r3, r2
 8005cf0:	3391      	adds	r3, #145	; 0x91
 8005cf2:	2202      	movs	r2, #2
 8005cf4:	701a      	strb	r2, [r3, #0]
        break;
 8005cf6:	e0a6      	b.n	8005e46 <USBH_MSC_Process+0x506>
        scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 8005cf8:	693b      	ldr	r3, [r7, #16]
 8005cfa:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005cfe:	b2d9      	uxtb	r1, r3
 8005d00:	693b      	ldr	r3, [r7, #16]
 8005d02:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005d06:	461a      	mov	r2, r3
 8005d08:	2334      	movs	r3, #52	; 0x34
 8005d0a:	fb03 f302 	mul.w	r3, r3, r2
 8005d0e:	3398      	adds	r3, #152	; 0x98
 8005d10:	693a      	ldr	r2, [r7, #16]
 8005d12:	4413      	add	r3, r2
 8005d14:	3304      	adds	r3, #4
 8005d16:	461a      	mov	r2, r3
 8005d18:	6878      	ldr	r0, [r7, #4]
 8005d1a:	f000 fe94 	bl	8006a46 <USBH_MSC_SCSI_RequestSense>
 8005d1e:	4603      	mov	r3, r0
 8005d20:	73fb      	strb	r3, [r7, #15]
        if( scsi_status == USBH_OK)
 8005d22:	7bfb      	ldrb	r3, [r7, #15]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d145      	bne.n	8005db4 <USBH_MSC_Process+0x474>
          if((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 8005d28:	693b      	ldr	r3, [r7, #16]
 8005d2a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005d2e:	4619      	mov	r1, r3
 8005d30:	693a      	ldr	r2, [r7, #16]
 8005d32:	2334      	movs	r3, #52	; 0x34
 8005d34:	fb03 f301 	mul.w	r3, r3, r1
 8005d38:	4413      	add	r3, r2
 8005d3a:	339c      	adds	r3, #156	; 0x9c
 8005d3c:	781b      	ldrb	r3, [r3, #0]
 8005d3e:	2b06      	cmp	r3, #6
 8005d40:	d00c      	beq.n	8005d5c <USBH_MSC_Process+0x41c>
             (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY) )
 8005d42:	693b      	ldr	r3, [r7, #16]
 8005d44:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005d48:	4619      	mov	r1, r3
 8005d4a:	693a      	ldr	r2, [r7, #16]
 8005d4c:	2334      	movs	r3, #52	; 0x34
 8005d4e:	fb03 f301 	mul.w	r3, r3, r1
 8005d52:	4413      	add	r3, r2
 8005d54:	339c      	adds	r3, #156	; 0x9c
 8005d56:	781b      	ldrb	r3, [r3, #0]
          if((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 8005d58:	2b02      	cmp	r3, #2
 8005d5a:	d117      	bne.n	8005d8c <USBH_MSC_Process+0x44c>
            if((phost->Timer - MSC_Handle->timer) < 10000U)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	f8d3 23bc 	ldr.w	r2, [r3, #956]	; 0x3bc
 8005d62:	693b      	ldr	r3, [r7, #16]
 8005d64:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8005d68:	1ad3      	subs	r3, r2, r3
 8005d6a:	f242 720f 	movw	r2, #9999	; 0x270f
 8005d6e:	4293      	cmp	r3, r2
 8005d70:	d80c      	bhi.n	8005d8c <USBH_MSC_Process+0x44c>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 8005d72:	693b      	ldr	r3, [r7, #16]
 8005d74:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005d78:	4619      	mov	r1, r3
 8005d7a:	693a      	ldr	r2, [r7, #16]
 8005d7c:	2334      	movs	r3, #52	; 0x34
 8005d7e:	fb03 f301 	mul.w	r3, r3, r1
 8005d82:	4413      	add	r3, r2
 8005d84:	3390      	adds	r3, #144	; 0x90
 8005d86:	2202      	movs	r2, #2
 8005d88:	701a      	strb	r2, [r3, #0]
              break;
 8005d8a:	e05f      	b.n	8005e4c <USBH_MSC_Process+0x50c>
          MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8005d8c:	693b      	ldr	r3, [r7, #16]
 8005d8e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005d92:	4619      	mov	r1, r3
 8005d94:	693a      	ldr	r2, [r7, #16]
 8005d96:	2334      	movs	r3, #52	; 0x34
 8005d98:	fb03 f301 	mul.w	r3, r3, r1
 8005d9c:	4413      	add	r3, r2
 8005d9e:	3390      	adds	r3, #144	; 0x90
 8005da0:	2201      	movs	r2, #1
 8005da2:	701a      	strb	r2, [r3, #0]
          MSC_Handle->current_lun++;
 8005da4:	693b      	ldr	r3, [r7, #16]
 8005da6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005daa:	3301      	adds	r3, #1
 8005dac:	b29a      	uxth	r2, r3
 8005dae:	693b      	ldr	r3, [r7, #16]
 8005db0:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
        if(scsi_status == USBH_FAIL)
 8005db4:	7bfb      	ldrb	r3, [r7, #15]
 8005db6:	2b02      	cmp	r3, #2
 8005db8:	d10c      	bne.n	8005dd4 <USBH_MSC_Process+0x494>
          MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 8005dba:	693b      	ldr	r3, [r7, #16]
 8005dbc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005dc0:	4619      	mov	r1, r3
 8005dc2:	693a      	ldr	r2, [r7, #16]
 8005dc4:	2334      	movs	r3, #52	; 0x34
 8005dc6:	fb03 f301 	mul.w	r3, r3, r1
 8005dca:	4413      	add	r3, r2
 8005dcc:	3390      	adds	r3, #144	; 0x90
 8005dce:	2208      	movs	r2, #8
 8005dd0:	701a      	strb	r2, [r3, #0]
        break;
 8005dd2:	e03a      	b.n	8005e4a <USBH_MSC_Process+0x50a>
          if(scsi_status == USBH_UNRECOVERED_ERROR)
 8005dd4:	7bfb      	ldrb	r3, [r7, #15]
 8005dd6:	2b04      	cmp	r3, #4
 8005dd8:	d137      	bne.n	8005e4a <USBH_MSC_Process+0x50a>
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8005dda:	693b      	ldr	r3, [r7, #16]
 8005ddc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005de0:	4619      	mov	r1, r3
 8005de2:	693a      	ldr	r2, [r7, #16]
 8005de4:	2334      	movs	r3, #52	; 0x34
 8005de6:	fb03 f301 	mul.w	r3, r3, r1
 8005dea:	4413      	add	r3, r2
 8005dec:	3390      	adds	r3, #144	; 0x90
 8005dee:	2201      	movs	r2, #1
 8005df0:	701a      	strb	r2, [r3, #0]
            MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8005df2:	693b      	ldr	r3, [r7, #16]
 8005df4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005df8:	4619      	mov	r1, r3
 8005dfa:	693a      	ldr	r2, [r7, #16]
 8005dfc:	2334      	movs	r3, #52	; 0x34
 8005dfe:	fb03 f301 	mul.w	r3, r3, r1
 8005e02:	4413      	add	r3, r2
 8005e04:	3391      	adds	r3, #145	; 0x91
 8005e06:	2202      	movs	r2, #2
 8005e08:	701a      	strb	r2, [r3, #0]
        break;
 8005e0a:	e01e      	b.n	8005e4a <USBH_MSC_Process+0x50a>
        MSC_Handle->current_lun++;
 8005e0c:	693b      	ldr	r3, [r7, #16]
 8005e0e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005e12:	3301      	adds	r3, #1
 8005e14:	b29a      	uxth	r2, r3
 8005e16:	693b      	ldr	r3, [r7, #16]
 8005e18:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
        break;
 8005e1c:	e016      	b.n	8005e4c <USBH_MSC_Process+0x50c>
      MSC_Handle->current_lun = 0U;
 8005e1e:	693b      	ldr	r3, [r7, #16]
 8005e20:	2200      	movs	r2, #0
 8005e22:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
      MSC_Handle->state = MSC_IDLE;
 8005e26:	693b      	ldr	r3, [r7, #16]
 8005e28:	2201      	movs	r2, #1
 8005e2a:	731a      	strb	r2, [r3, #12]
      phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8005e32:	2102      	movs	r1, #2
 8005e34:	6878      	ldr	r0, [r7, #4]
 8005e36:	4798      	blx	r3
    break;
 8005e38:	e00c      	b.n	8005e54 <USBH_MSC_Process+0x514>
        break;
 8005e3a:	bf00      	nop
 8005e3c:	e00a      	b.n	8005e54 <USBH_MSC_Process+0x514>
        break;
 8005e3e:	bf00      	nop
 8005e40:	e008      	b.n	8005e54 <USBH_MSC_Process+0x514>
        break;
 8005e42:	bf00      	nop
 8005e44:	e006      	b.n	8005e54 <USBH_MSC_Process+0x514>
        break;
 8005e46:	bf00      	nop
 8005e48:	e004      	b.n	8005e54 <USBH_MSC_Process+0x514>
        break;
 8005e4a:	bf00      	nop
    break;
 8005e4c:	e002      	b.n	8005e54 <USBH_MSC_Process+0x514>
    error = USBH_OK;
 8005e4e:	2300      	movs	r3, #0
 8005e50:	75fb      	strb	r3, [r7, #23]
    break;
 8005e52:	bf00      	nop
  }
  return error;
 8005e54:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e56:	4618      	mov	r0, r3
 8005e58:	3718      	adds	r7, #24
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	bd80      	pop	{r7, pc}
 8005e5e:	bf00      	nop

08005e60 <USBH_MSC_SOFProcess>:
  *         The function is for SOF state
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8005e60:	b480      	push	{r7}
 8005e62:	b083      	sub	sp, #12
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]

  return USBH_OK;
 8005e68:	2300      	movs	r3, #0
}
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	370c      	adds	r7, #12
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e74:	4770      	bx	lr

08005e76 <USBH_MSC_RdWrProcess>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8005e76:	b580      	push	{r7, lr}
 8005e78:	b088      	sub	sp, #32
 8005e7a:	af02      	add	r7, sp, #8
 8005e7c:	6078      	str	r0, [r7, #4]
 8005e7e:	460b      	mov	r3, r1
 8005e80:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005e88:	69db      	ldr	r3, [r3, #28]
 8005e8a:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY ;
 8005e8c:	2301      	movs	r3, #1
 8005e8e:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY ;
 8005e90:	2301      	movs	r3, #1
 8005e92:	73fb      	strb	r3, [r7, #15]

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 8005e94:	78fb      	ldrb	r3, [r7, #3]
 8005e96:	693a      	ldr	r2, [r7, #16]
 8005e98:	2134      	movs	r1, #52	; 0x34
 8005e9a:	fb01 f303 	mul.w	r3, r1, r3
 8005e9e:	4413      	add	r3, r2
 8005ea0:	3390      	adds	r3, #144	; 0x90
 8005ea2:	781b      	ldrb	r3, [r3, #0]
 8005ea4:	2b06      	cmp	r3, #6
 8005ea6:	d004      	beq.n	8005eb2 <USBH_MSC_RdWrProcess+0x3c>
 8005ea8:	2b07      	cmp	r3, #7
 8005eaa:	d037      	beq.n	8005f1c <USBH_MSC_RdWrProcess+0xa6>
 8005eac:	2b05      	cmp	r3, #5
 8005eae:	d06a      	beq.n	8005f86 <USBH_MSC_RdWrProcess+0x110>
#endif
#endif
    break;

  default:
    break;
 8005eb0:	e0a6      	b.n	8006000 <USBH_MSC_RdWrProcess+0x18a>
    scsi_status = USBH_MSC_SCSI_Read(phost,lun, 0U, NULL, 0U);
 8005eb2:	78f9      	ldrb	r1, [r7, #3]
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	9300      	str	r3, [sp, #0]
 8005eb8:	2300      	movs	r3, #0
 8005eba:	2200      	movs	r2, #0
 8005ebc:	6878      	ldr	r0, [r7, #4]
 8005ebe:	f000 fea6 	bl	8006c0e <USBH_MSC_SCSI_Read>
 8005ec2:	4603      	mov	r3, r0
 8005ec4:	73fb      	strb	r3, [r7, #15]
    if(scsi_status == USBH_OK)
 8005ec6:	7bfb      	ldrb	r3, [r7, #15]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d10b      	bne.n	8005ee4 <USBH_MSC_RdWrProcess+0x6e>
      MSC_Handle->unit[lun].state = MSC_IDLE;
 8005ecc:	78fb      	ldrb	r3, [r7, #3]
 8005ece:	693a      	ldr	r2, [r7, #16]
 8005ed0:	2134      	movs	r1, #52	; 0x34
 8005ed2:	fb01 f303 	mul.w	r3, r1, r3
 8005ed6:	4413      	add	r3, r2
 8005ed8:	3390      	adds	r3, #144	; 0x90
 8005eda:	2201      	movs	r2, #1
 8005edc:	701a      	strb	r2, [r3, #0]
      error = USBH_OK;
 8005ede:	2300      	movs	r3, #0
 8005ee0:	75fb      	strb	r3, [r7, #23]
    break;
 8005ee2:	e088      	b.n	8005ff6 <USBH_MSC_RdWrProcess+0x180>
    else if( scsi_status == USBH_FAIL)
 8005ee4:	7bfb      	ldrb	r3, [r7, #15]
 8005ee6:	2b02      	cmp	r3, #2
 8005ee8:	d109      	bne.n	8005efe <USBH_MSC_RdWrProcess+0x88>
      MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 8005eea:	78fb      	ldrb	r3, [r7, #3]
 8005eec:	693a      	ldr	r2, [r7, #16]
 8005eee:	2134      	movs	r1, #52	; 0x34
 8005ef0:	fb01 f303 	mul.w	r3, r1, r3
 8005ef4:	4413      	add	r3, r2
 8005ef6:	3390      	adds	r3, #144	; 0x90
 8005ef8:	2205      	movs	r2, #5
 8005efa:	701a      	strb	r2, [r3, #0]
    break;
 8005efc:	e07b      	b.n	8005ff6 <USBH_MSC_RdWrProcess+0x180>
      if(scsi_status == USBH_UNRECOVERED_ERROR)
 8005efe:	7bfb      	ldrb	r3, [r7, #15]
 8005f00:	2b04      	cmp	r3, #4
 8005f02:	d178      	bne.n	8005ff6 <USBH_MSC_RdWrProcess+0x180>
        MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8005f04:	78fb      	ldrb	r3, [r7, #3]
 8005f06:	693a      	ldr	r2, [r7, #16]
 8005f08:	2134      	movs	r1, #52	; 0x34
 8005f0a:	fb01 f303 	mul.w	r3, r1, r3
 8005f0e:	4413      	add	r3, r2
 8005f10:	3390      	adds	r3, #144	; 0x90
 8005f12:	2208      	movs	r2, #8
 8005f14:	701a      	strb	r2, [r3, #0]
        error = USBH_FAIL;
 8005f16:	2302      	movs	r3, #2
 8005f18:	75fb      	strb	r3, [r7, #23]
    break;
 8005f1a:	e06c      	b.n	8005ff6 <USBH_MSC_RdWrProcess+0x180>
    scsi_status = USBH_MSC_SCSI_Write(phost,lun, 0U, NULL, 0U);
 8005f1c:	78f9      	ldrb	r1, [r7, #3]
 8005f1e:	2300      	movs	r3, #0
 8005f20:	9300      	str	r3, [sp, #0]
 8005f22:	2300      	movs	r3, #0
 8005f24:	2200      	movs	r2, #0
 8005f26:	6878      	ldr	r0, [r7, #4]
 8005f28:	f000 fe06 	bl	8006b38 <USBH_MSC_SCSI_Write>
 8005f2c:	4603      	mov	r3, r0
 8005f2e:	73fb      	strb	r3, [r7, #15]
    if(scsi_status == USBH_OK)
 8005f30:	7bfb      	ldrb	r3, [r7, #15]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d10b      	bne.n	8005f4e <USBH_MSC_RdWrProcess+0xd8>
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8005f36:	78fb      	ldrb	r3, [r7, #3]
 8005f38:	693a      	ldr	r2, [r7, #16]
 8005f3a:	2134      	movs	r1, #52	; 0x34
 8005f3c:	fb01 f303 	mul.w	r3, r1, r3
 8005f40:	4413      	add	r3, r2
 8005f42:	3390      	adds	r3, #144	; 0x90
 8005f44:	2201      	movs	r2, #1
 8005f46:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 8005f48:	2300      	movs	r3, #0
 8005f4a:	75fb      	strb	r3, [r7, #23]
    break;
 8005f4c:	e055      	b.n	8005ffa <USBH_MSC_RdWrProcess+0x184>
    else if( scsi_status == USBH_FAIL)
 8005f4e:	7bfb      	ldrb	r3, [r7, #15]
 8005f50:	2b02      	cmp	r3, #2
 8005f52:	d109      	bne.n	8005f68 <USBH_MSC_RdWrProcess+0xf2>
      MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 8005f54:	78fb      	ldrb	r3, [r7, #3]
 8005f56:	693a      	ldr	r2, [r7, #16]
 8005f58:	2134      	movs	r1, #52	; 0x34
 8005f5a:	fb01 f303 	mul.w	r3, r1, r3
 8005f5e:	4413      	add	r3, r2
 8005f60:	3390      	adds	r3, #144	; 0x90
 8005f62:	2205      	movs	r2, #5
 8005f64:	701a      	strb	r2, [r3, #0]
    break;
 8005f66:	e048      	b.n	8005ffa <USBH_MSC_RdWrProcess+0x184>
      if(scsi_status == USBH_UNRECOVERED_ERROR)
 8005f68:	7bfb      	ldrb	r3, [r7, #15]
 8005f6a:	2b04      	cmp	r3, #4
 8005f6c:	d145      	bne.n	8005ffa <USBH_MSC_RdWrProcess+0x184>
        MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8005f6e:	78fb      	ldrb	r3, [r7, #3]
 8005f70:	693a      	ldr	r2, [r7, #16]
 8005f72:	2134      	movs	r1, #52	; 0x34
 8005f74:	fb01 f303 	mul.w	r3, r1, r3
 8005f78:	4413      	add	r3, r2
 8005f7a:	3390      	adds	r3, #144	; 0x90
 8005f7c:	2208      	movs	r2, #8
 8005f7e:	701a      	strb	r2, [r3, #0]
        error = USBH_FAIL;
 8005f80:	2302      	movs	r3, #2
 8005f82:	75fb      	strb	r3, [r7, #23]
    break;
 8005f84:	e039      	b.n	8005ffa <USBH_MSC_RdWrProcess+0x184>
    scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 8005f86:	78fb      	ldrb	r3, [r7, #3]
 8005f88:	2234      	movs	r2, #52	; 0x34
 8005f8a:	fb02 f303 	mul.w	r3, r2, r3
 8005f8e:	3398      	adds	r3, #152	; 0x98
 8005f90:	693a      	ldr	r2, [r7, #16]
 8005f92:	4413      	add	r3, r2
 8005f94:	1d1a      	adds	r2, r3, #4
 8005f96:	78fb      	ldrb	r3, [r7, #3]
 8005f98:	4619      	mov	r1, r3
 8005f9a:	6878      	ldr	r0, [r7, #4]
 8005f9c:	f000 fd53 	bl	8006a46 <USBH_MSC_SCSI_RequestSense>
 8005fa0:	4603      	mov	r3, r0
 8005fa2:	73fb      	strb	r3, [r7, #15]
    if(scsi_status == USBH_OK)
 8005fa4:	7bfb      	ldrb	r3, [r7, #15]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d113      	bne.n	8005fd2 <USBH_MSC_RdWrProcess+0x15c>
      MSC_Handle->unit[lun].state = MSC_IDLE;
 8005faa:	78fb      	ldrb	r3, [r7, #3]
 8005fac:	693a      	ldr	r2, [r7, #16]
 8005fae:	2134      	movs	r1, #52	; 0x34
 8005fb0:	fb01 f303 	mul.w	r3, r1, r3
 8005fb4:	4413      	add	r3, r2
 8005fb6:	3390      	adds	r3, #144	; 0x90
 8005fb8:	2201      	movs	r2, #1
 8005fba:	701a      	strb	r2, [r3, #0]
      MSC_Handle->unit[lun].error = MSC_ERROR;
 8005fbc:	78fb      	ldrb	r3, [r7, #3]
 8005fbe:	693a      	ldr	r2, [r7, #16]
 8005fc0:	2134      	movs	r1, #52	; 0x34
 8005fc2:	fb01 f303 	mul.w	r3, r1, r3
 8005fc6:	4413      	add	r3, r2
 8005fc8:	3391      	adds	r3, #145	; 0x91
 8005fca:	2202      	movs	r2, #2
 8005fcc:	701a      	strb	r2, [r3, #0]
      error = USBH_FAIL;
 8005fce:	2302      	movs	r3, #2
 8005fd0:	75fb      	strb	r3, [r7, #23]
    if(scsi_status == USBH_FAIL)
 8005fd2:	7bfb      	ldrb	r3, [r7, #15]
 8005fd4:	2b02      	cmp	r3, #2
 8005fd6:	d012      	beq.n	8005ffe <USBH_MSC_RdWrProcess+0x188>
      if(scsi_status == USBH_UNRECOVERED_ERROR)
 8005fd8:	7bfb      	ldrb	r3, [r7, #15]
 8005fda:	2b04      	cmp	r3, #4
 8005fdc:	d10f      	bne.n	8005ffe <USBH_MSC_RdWrProcess+0x188>
        MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8005fde:	78fb      	ldrb	r3, [r7, #3]
 8005fe0:	693a      	ldr	r2, [r7, #16]
 8005fe2:	2134      	movs	r1, #52	; 0x34
 8005fe4:	fb01 f303 	mul.w	r3, r1, r3
 8005fe8:	4413      	add	r3, r2
 8005fea:	3390      	adds	r3, #144	; 0x90
 8005fec:	2208      	movs	r2, #8
 8005fee:	701a      	strb	r2, [r3, #0]
        error = USBH_FAIL;
 8005ff0:	2302      	movs	r3, #2
 8005ff2:	75fb      	strb	r3, [r7, #23]
    break;
 8005ff4:	e003      	b.n	8005ffe <USBH_MSC_RdWrProcess+0x188>
    break;
 8005ff6:	bf00      	nop
 8005ff8:	e002      	b.n	8006000 <USBH_MSC_RdWrProcess+0x18a>
    break;
 8005ffa:	bf00      	nop
 8005ffc:	e000      	b.n	8006000 <USBH_MSC_RdWrProcess+0x18a>
    break;
 8005ffe:	bf00      	nop

  }
  return error;
 8006000:	7dfb      	ldrb	r3, [r7, #23]
}
 8006002:	4618      	mov	r0, r3
 8006004:	3718      	adds	r7, #24
 8006006:	46bd      	mov	sp, r7
 8006008:	bd80      	pop	{r7, pc}

0800600a <USBH_MSC_UnitIsReady>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval Lun status (0: not ready / 1: ready)
  */
uint8_t  USBH_MSC_UnitIsReady (USBH_HandleTypeDef *phost, uint8_t lun)
{
 800600a:	b480      	push	{r7}
 800600c:	b085      	sub	sp, #20
 800600e:	af00      	add	r7, sp, #0
 8006010:	6078      	str	r0, [r7, #4]
 8006012:	460b      	mov	r3, r1
 8006014:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800601c:	69db      	ldr	r3, [r3, #28]
 800601e:	60bb      	str	r3, [r7, #8]
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	781b      	ldrb	r3, [r3, #0]
 8006024:	b2db      	uxtb	r3, r3
 8006026:	2b0b      	cmp	r3, #11
 8006028:	d10c      	bne.n	8006044 <USBH_MSC_UnitIsReady+0x3a>
 800602a:	78fb      	ldrb	r3, [r7, #3]
 800602c:	68ba      	ldr	r2, [r7, #8]
 800602e:	2134      	movs	r1, #52	; 0x34
 8006030:	fb01 f303 	mul.w	r3, r1, r3
 8006034:	4413      	add	r3, r2
 8006036:	3391      	adds	r3, #145	; 0x91
 8006038:	781b      	ldrb	r3, [r3, #0]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d102      	bne.n	8006044 <USBH_MSC_UnitIsReady+0x3a>
  {
    res = 1U;
 800603e:	2301      	movs	r3, #1
 8006040:	73fb      	strb	r3, [r7, #15]
 8006042:	e001      	b.n	8006048 <USBH_MSC_UnitIsReady+0x3e>
  }
  else
  {
    res = 0U;
 8006044:	2300      	movs	r3, #0
 8006046:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 8006048:	7bfb      	ldrb	r3, [r7, #15]
}
 800604a:	4618      	mov	r0, r3
 800604c:	3714      	adds	r7, #20
 800604e:	46bd      	mov	sp, r7
 8006050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006054:	4770      	bx	lr

08006056 <USBH_MSC_GetLUNInfo>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
 8006056:	b580      	push	{r7, lr}
 8006058:	b086      	sub	sp, #24
 800605a:	af00      	add	r7, sp, #0
 800605c:	60f8      	str	r0, [r7, #12]
 800605e:	460b      	mov	r3, r1
 8006060:	607a      	str	r2, [r7, #4]
 8006062:	72fb      	strb	r3, [r7, #11]
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800606a:	69db      	ldr	r3, [r3, #28]
 800606c:	617b      	str	r3, [r7, #20]
  if(phost->gState == HOST_CLASS)
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	781b      	ldrb	r3, [r3, #0]
 8006072:	b2db      	uxtb	r3, r3
 8006074:	2b0b      	cmp	r3, #11
 8006076:	d10d      	bne.n	8006094 <USBH_MSC_GetLUNInfo+0x3e>
  {
    USBH_memcpy(info,&MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 8006078:	7afb      	ldrb	r3, [r7, #11]
 800607a:	2234      	movs	r2, #52	; 0x34
 800607c:	fb02 f303 	mul.w	r3, r2, r3
 8006080:	3390      	adds	r3, #144	; 0x90
 8006082:	697a      	ldr	r2, [r7, #20]
 8006084:	4413      	add	r3, r2
 8006086:	2234      	movs	r2, #52	; 0x34
 8006088:	4619      	mov	r1, r3
 800608a:	6878      	ldr	r0, [r7, #4]
 800608c:	f004 fd92 	bl	800abb4 <memcpy>
    return USBH_OK;
 8006090:	2300      	movs	r3, #0
 8006092:	e000      	b.n	8006096 <USBH_MSC_GetLUNInfo+0x40>
  }
  else
  {
    return USBH_FAIL;
 8006094:	2302      	movs	r3, #2
  }
}
 8006096:	4618      	mov	r0, r3
 8006098:	3718      	adds	r7, #24
 800609a:	46bd      	mov	sp, r7
 800609c:	bd80      	pop	{r7, pc}

0800609e <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                     uint8_t lun,
                                     uint32_t address,
                                     uint8_t *pbuf,
                                     uint32_t length)
{
 800609e:	b580      	push	{r7, lr}
 80060a0:	b088      	sub	sp, #32
 80060a2:	af02      	add	r7, sp, #8
 80060a4:	60f8      	str	r0, [r7, #12]
 80060a6:	607a      	str	r2, [r7, #4]
 80060a8:	603b      	str	r3, [r7, #0]
 80060aa:	460b      	mov	r3, r1
 80060ac:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80060b4:	69db      	ldr	r3, [r3, #28]
 80060b6:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80060be:	b2db      	uxtb	r3, r3
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d00e      	beq.n	80060e2 <USBH_MSC_Read+0x44>
      (phost->gState != HOST_CLASS) ||
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	781b      	ldrb	r3, [r3, #0]
 80060c8:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 80060ca:	2b0b      	cmp	r3, #11
 80060cc:	d109      	bne.n	80060e2 <USBH_MSC_Read+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 80060ce:	7afb      	ldrb	r3, [r7, #11]
 80060d0:	697a      	ldr	r2, [r7, #20]
 80060d2:	2134      	movs	r1, #52	; 0x34
 80060d4:	fb01 f303 	mul.w	r3, r1, r3
 80060d8:	4413      	add	r3, r2
 80060da:	3390      	adds	r3, #144	; 0x90
 80060dc:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 80060de:	2b01      	cmp	r3, #1
 80060e0:	d001      	beq.n	80060e6 <USBH_MSC_Read+0x48>
  {
    return  USBH_FAIL;
 80060e2:	2302      	movs	r3, #2
 80060e4:	e040      	b.n	8006168 <USBH_MSC_Read+0xca>
  }

  MSC_Handle->state = MSC_READ;
 80060e6:	697b      	ldr	r3, [r7, #20]
 80060e8:	2206      	movs	r2, #6
 80060ea:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
 80060ec:	7afb      	ldrb	r3, [r7, #11]
 80060ee:	697a      	ldr	r2, [r7, #20]
 80060f0:	2134      	movs	r1, #52	; 0x34
 80060f2:	fb01 f303 	mul.w	r3, r1, r3
 80060f6:	4413      	add	r3, r2
 80060f8:	3390      	adds	r3, #144	; 0x90
 80060fa:	2206      	movs	r2, #6
 80060fc:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 80060fe:	7afb      	ldrb	r3, [r7, #11]
 8006100:	b29a      	uxth	r2, r3
 8006102:	697b      	ldr	r3, [r7, #20]
 8006104:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 8006108:	7af9      	ldrb	r1, [r7, #11]
 800610a:	6a3b      	ldr	r3, [r7, #32]
 800610c:	9300      	str	r3, [sp, #0]
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	687a      	ldr	r2, [r7, #4]
 8006112:	68f8      	ldr	r0, [r7, #12]
 8006114:	f000 fd7b 	bl	8006c0e <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 800611e:	613b      	str	r3, [r7, #16]

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8006120:	e016      	b.n	8006150 <USBH_MSC_Read+0xb2>
  {
    if(((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	f8d3 23bc 	ldr.w	r2, [r3, #956]	; 0x3bc
 8006128:	693b      	ldr	r3, [r7, #16]
 800612a:	1ad2      	subs	r2, r2, r3
 800612c:	6a3b      	ldr	r3, [r7, #32]
 800612e:	f242 7110 	movw	r1, #10000	; 0x2710
 8006132:	fb01 f303 	mul.w	r3, r1, r3
 8006136:	429a      	cmp	r2, r3
 8006138:	d805      	bhi.n	8006146 <USBH_MSC_Read+0xa8>
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006140:	b2db      	uxtb	r3, r3
 8006142:	2b00      	cmp	r3, #0
 8006144:	d104      	bne.n	8006150 <USBH_MSC_Read+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 8006146:	697b      	ldr	r3, [r7, #20]
 8006148:	2201      	movs	r2, #1
 800614a:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 800614c:	2302      	movs	r3, #2
 800614e:	e00b      	b.n	8006168 <USBH_MSC_Read+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8006150:	7afb      	ldrb	r3, [r7, #11]
 8006152:	4619      	mov	r1, r3
 8006154:	68f8      	ldr	r0, [r7, #12]
 8006156:	f7ff fe8e 	bl	8005e76 <USBH_MSC_RdWrProcess>
 800615a:	4603      	mov	r3, r0
 800615c:	2b01      	cmp	r3, #1
 800615e:	d0e0      	beq.n	8006122 <USBH_MSC_Read+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 8006160:	697b      	ldr	r3, [r7, #20]
 8006162:	2201      	movs	r2, #1
 8006164:	731a      	strb	r2, [r3, #12]

  return USBH_OK;
 8006166:	2300      	movs	r3, #0
}
 8006168:	4618      	mov	r0, r3
 800616a:	3718      	adds	r7, #24
 800616c:	46bd      	mov	sp, r7
 800616e:	bd80      	pop	{r7, pc}

08006170 <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                     uint8_t lun,
                                     uint32_t address,
                                     uint8_t *pbuf,
                                     uint32_t length)
{
 8006170:	b580      	push	{r7, lr}
 8006172:	b088      	sub	sp, #32
 8006174:	af02      	add	r7, sp, #8
 8006176:	60f8      	str	r0, [r7, #12]
 8006178:	607a      	str	r2, [r7, #4]
 800617a:	603b      	str	r3, [r7, #0]
 800617c:	460b      	mov	r3, r1
 800617e:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006186:	69db      	ldr	r3, [r3, #28]
 8006188:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006190:	b2db      	uxtb	r3, r3
 8006192:	2b00      	cmp	r3, #0
 8006194:	d00e      	beq.n	80061b4 <USBH_MSC_Write+0x44>
      (phost->gState != HOST_CLASS) ||
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	781b      	ldrb	r3, [r3, #0]
 800619a:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 800619c:	2b0b      	cmp	r3, #11
 800619e:	d109      	bne.n	80061b4 <USBH_MSC_Write+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 80061a0:	7afb      	ldrb	r3, [r7, #11]
 80061a2:	697a      	ldr	r2, [r7, #20]
 80061a4:	2134      	movs	r1, #52	; 0x34
 80061a6:	fb01 f303 	mul.w	r3, r1, r3
 80061aa:	4413      	add	r3, r2
 80061ac:	3390      	adds	r3, #144	; 0x90
 80061ae:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 80061b0:	2b01      	cmp	r3, #1
 80061b2:	d001      	beq.n	80061b8 <USBH_MSC_Write+0x48>
  {
    return  USBH_FAIL;
 80061b4:	2302      	movs	r3, #2
 80061b6:	e040      	b.n	800623a <USBH_MSC_Write+0xca>
  }

  MSC_Handle->state = MSC_WRITE;
 80061b8:	697b      	ldr	r3, [r7, #20]
 80061ba:	2207      	movs	r2, #7
 80061bc:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
 80061be:	7afb      	ldrb	r3, [r7, #11]
 80061c0:	697a      	ldr	r2, [r7, #20]
 80061c2:	2134      	movs	r1, #52	; 0x34
 80061c4:	fb01 f303 	mul.w	r3, r1, r3
 80061c8:	4413      	add	r3, r2
 80061ca:	3390      	adds	r3, #144	; 0x90
 80061cc:	2207      	movs	r2, #7
 80061ce:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 80061d0:	7afb      	ldrb	r3, [r7, #11]
 80061d2:	b29a      	uxth	r2, r3
 80061d4:	697b      	ldr	r3, [r7, #20]
 80061d6:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 80061da:	7af9      	ldrb	r1, [r7, #11]
 80061dc:	6a3b      	ldr	r3, [r7, #32]
 80061de:	9300      	str	r3, [sp, #0]
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	687a      	ldr	r2, [r7, #4]
 80061e4:	68f8      	ldr	r0, [r7, #12]
 80061e6:	f000 fca7 	bl	8006b38 <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 80061f0:	613b      	str	r3, [r7, #16]
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 80061f2:	e016      	b.n	8006222 <USBH_MSC_Write+0xb2>
  {
    if(((phost->Timer - timeout) >  (10000U * length)) || (phost->device.is_connected == 0U))
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	f8d3 23bc 	ldr.w	r2, [r3, #956]	; 0x3bc
 80061fa:	693b      	ldr	r3, [r7, #16]
 80061fc:	1ad2      	subs	r2, r2, r3
 80061fe:	6a3b      	ldr	r3, [r7, #32]
 8006200:	f242 7110 	movw	r1, #10000	; 0x2710
 8006204:	fb01 f303 	mul.w	r3, r1, r3
 8006208:	429a      	cmp	r2, r3
 800620a:	d805      	bhi.n	8006218 <USBH_MSC_Write+0xa8>
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006212:	b2db      	uxtb	r3, r3
 8006214:	2b00      	cmp	r3, #0
 8006216:	d104      	bne.n	8006222 <USBH_MSC_Write+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 8006218:	697b      	ldr	r3, [r7, #20]
 800621a:	2201      	movs	r2, #1
 800621c:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 800621e:	2302      	movs	r3, #2
 8006220:	e00b      	b.n	800623a <USBH_MSC_Write+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8006222:	7afb      	ldrb	r3, [r7, #11]
 8006224:	4619      	mov	r1, r3
 8006226:	68f8      	ldr	r0, [r7, #12]
 8006228:	f7ff fe25 	bl	8005e76 <USBH_MSC_RdWrProcess>
 800622c:	4603      	mov	r3, r0
 800622e:	2b01      	cmp	r3, #1
 8006230:	d0e0      	beq.n	80061f4 <USBH_MSC_Write+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 8006232:	697b      	ldr	r3, [r7, #20]
 8006234:	2201      	movs	r2, #1
 8006236:	731a      	strb	r2, [r3, #12]
  return USBH_OK;
 8006238:	2300      	movs	r3, #0
}
 800623a:	4618      	mov	r0, r3
 800623c:	3718      	adds	r7, #24
 800623e:	46bd      	mov	sp, r7
 8006240:	bd80      	pop	{r7, pc}

08006242 <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 8006242:	b580      	push	{r7, lr}
 8006244:	b082      	sub	sp, #8
 8006246:	af00      	add	r7, sp, #0
 8006248:	6078      	str	r0, [r7, #4]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	2221      	movs	r2, #33	; 0x21
 800624e:	741a      	strb	r2, [r3, #16]
                                                 | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	22ff      	movs	r2, #255	; 0xff
 8006254:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	2200      	movs	r2, #0
 800625a:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2200      	movs	r2, #0
 8006260:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	2200      	movs	r2, #0
 8006266:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, 0U, 0U);
 8006268:	2200      	movs	r2, #0
 800626a:	2100      	movs	r1, #0
 800626c:	6878      	ldr	r0, [r7, #4]
 800626e:	f001 fc97 	bl	8007ba0 <USBH_CtlReq>
 8006272:	4603      	mov	r3, r0
}
 8006274:	4618      	mov	r0, r3
 8006276:	3708      	adds	r7, #8
 8006278:	46bd      	mov	sp, r7
 800627a:	bd80      	pop	{r7, pc}

0800627c <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 800627c:	b580      	push	{r7, lr}
 800627e:	b082      	sub	sp, #8
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
 8006284:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	22a1      	movs	r2, #161	; 0xa1
 800628a:	741a      	strb	r2, [r3, #16]
                                                 | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	22fe      	movs	r2, #254	; 0xfe
 8006290:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	2200      	movs	r2, #0
 8006296:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2200      	movs	r2, #0
 800629c:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 1U;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	2201      	movs	r2, #1
 80062a2:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, Maxlun, 1U);
 80062a4:	2201      	movs	r2, #1
 80062a6:	6839      	ldr	r1, [r7, #0]
 80062a8:	6878      	ldr	r0, [r7, #4]
 80062aa:	f001 fc79 	bl	8007ba0 <USBH_CtlReq>
 80062ae:	4603      	mov	r3, r0
}
 80062b0:	4618      	mov	r0, r3
 80062b2:	3708      	adds	r7, #8
 80062b4:	46bd      	mov	sp, r7
 80062b6:	bd80      	pop	{r7, pc}

080062b8 <USBH_MSC_BOT_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
 80062b8:	b480      	push	{r7}
 80062ba:	b085      	sub	sp, #20
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]

  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80062c6:	69db      	ldr	r3, [r3, #28]
 80062c8:	60fb      	str	r3, [r7, #12]

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	4a09      	ldr	r2, [pc, #36]	; (80062f4 <USBH_MSC_BOT_Init+0x3c>)
 80062ce:	655a      	str	r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	4a09      	ldr	r2, [pc, #36]	; (80062f8 <USBH_MSC_BOT_Init+0x40>)
 80062d4:	659a      	str	r2, [r3, #88]	; 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	2201      	movs	r2, #1
 80062da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	2201      	movs	r2, #1
 80062e2:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

  return USBH_OK;
 80062e6:	2300      	movs	r3, #0
}
 80062e8:	4618      	mov	r0, r3
 80062ea:	3714      	adds	r7, #20
 80062ec:	46bd      	mov	sp, r7
 80062ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f2:	4770      	bx	lr
 80062f4:	43425355 	.word	0x43425355
 80062f8:	20304050 	.word	0x20304050

080062fc <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process (USBH_HandleTypeDef *phost, uint8_t lun)
{
 80062fc:	b580      	push	{r7, lr}
 80062fe:	b088      	sub	sp, #32
 8006300:	af02      	add	r7, sp, #8
 8006302:	6078      	str	r0, [r7, #4]
 8006304:	460b      	mov	r3, r1
 8006306:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 8006308:	2301      	movs	r3, #1
 800630a:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;
 800630c:	2301      	movs	r3, #1
 800630e:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
 8006310:	2301      	movs	r3, #1
 8006312:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006314:	2300      	movs	r3, #0
 8006316:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800631e:	69db      	ldr	r3, [r3, #28]
 8006320:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0U;
 8006322:	2300      	movs	r3, #0
 8006324:	73fb      	strb	r3, [r7, #15]

  switch (MSC_Handle->hbot.state)
 8006326:	693b      	ldr	r3, [r7, #16]
 8006328:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800632c:	3b01      	subs	r3, #1
 800632e:	2b0a      	cmp	r3, #10
 8006330:	f200 81a1 	bhi.w	8006676 <USBH_MSC_BOT_Process+0x37a>
 8006334:	a201      	add	r2, pc, #4	; (adr r2, 800633c <USBH_MSC_BOT_Process+0x40>)
 8006336:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800633a:	bf00      	nop
 800633c:	08006369 	.word	0x08006369
 8006340:	08006393 	.word	0x08006393
 8006344:	080063fd 	.word	0x080063fd
 8006348:	0800641b 	.word	0x0800641b
 800634c:	0800649f 	.word	0x0800649f
 8006350:	080064c3 	.word	0x080064c3
 8006354:	0800655d 	.word	0x0800655d
 8006358:	08006579 	.word	0x08006579
 800635c:	080065cb 	.word	0x080065cb
 8006360:	080065fb 	.word	0x080065fb
 8006364:	0800665d 	.word	0x0800665d
  {
  case BOT_SEND_CBW:
    MSC_Handle->hbot.cbw.field.LUN = lun;
 8006368:	693b      	ldr	r3, [r7, #16]
 800636a:	78fa      	ldrb	r2, [r7, #3]
 800636c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
    MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 8006370:	693b      	ldr	r3, [r7, #16]
 8006372:	2202      	movs	r2, #2
 8006374:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    USBH_BulkSendData (phost, MSC_Handle->hbot.cbw.data,
 8006378:	693b      	ldr	r3, [r7, #16]
 800637a:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800637e:	693b      	ldr	r3, [r7, #16]
 8006380:	795a      	ldrb	r2, [r3, #5]
 8006382:	2301      	movs	r3, #1
 8006384:	9300      	str	r3, [sp, #0]
 8006386:	4613      	mov	r3, r2
 8006388:	221f      	movs	r2, #31
 800638a:	6878      	ldr	r0, [r7, #4]
 800638c:	f001 fe19 	bl	8007fc2 <USBH_BulkSendData>
                       BOT_CBW_LENGTH, MSC_Handle->OutPipe, 1U);

    break;
 8006390:	e180      	b.n	8006694 <USBH_MSC_BOT_Process+0x398>

  case BOT_SEND_CBW_WAIT:

    URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 8006392:	693b      	ldr	r3, [r7, #16]
 8006394:	795b      	ldrb	r3, [r3, #5]
 8006396:	4619      	mov	r1, r3
 8006398:	6878      	ldr	r0, [r7, #4]
 800639a:	f004 faed 	bl	800a978 <USBH_LL_GetURBState>
 800639e:	4603      	mov	r3, r0
 80063a0:	753b      	strb	r3, [r7, #20]

    if(URB_Status == USBH_URB_DONE)
 80063a2:	7d3b      	ldrb	r3, [r7, #20]
 80063a4:	2b01      	cmp	r3, #1
 80063a6:	d118      	bne.n	80063da <USBH_MSC_BOT_Process+0xde>
    {
      if ( MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 80063a8:	693b      	ldr	r3, [r7, #16]
 80063aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d00f      	beq.n	80063d0 <USBH_MSC_BOT_Process+0xd4>
      {
        /* If there is Data Transfer Stage */
        if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 80063b0:	693b      	ldr	r3, [r7, #16]
 80063b2:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 80063b6:	b25b      	sxtb	r3, r3
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	da04      	bge.n	80063c6 <USBH_MSC_BOT_Process+0xca>
        {
          /* Data Direction is IN */
          MSC_Handle->hbot.state = BOT_DATA_IN;
 80063bc:	693b      	ldr	r3, [r7, #16]
 80063be:	2203      	movs	r2, #3
 80063c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 80063c4:	e159      	b.n	800667a <USBH_MSC_BOT_Process+0x37e>
          MSC_Handle->hbot.state = BOT_DATA_OUT;
 80063c6:	693b      	ldr	r3, [r7, #16]
 80063c8:	2205      	movs	r2, #5
 80063ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    break;
 80063ce:	e154      	b.n	800667a <USBH_MSC_BOT_Process+0x37e>
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 80063d0:	693b      	ldr	r3, [r7, #16]
 80063d2:	2207      	movs	r2, #7
 80063d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    break;
 80063d8:	e14f      	b.n	800667a <USBH_MSC_BOT_Process+0x37e>
    else if(URB_Status == USBH_URB_NOTREADY)
 80063da:	7d3b      	ldrb	r3, [r7, #20]
 80063dc:	2b02      	cmp	r3, #2
 80063de:	d104      	bne.n	80063ea <USBH_MSC_BOT_Process+0xee>
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 80063e0:	693b      	ldr	r3, [r7, #16]
 80063e2:	2201      	movs	r2, #1
 80063e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    break;
 80063e8:	e147      	b.n	800667a <USBH_MSC_BOT_Process+0x37e>
      if(URB_Status == USBH_URB_STALL)
 80063ea:	7d3b      	ldrb	r3, [r7, #20]
 80063ec:	2b05      	cmp	r3, #5
 80063ee:	f040 8144 	bne.w	800667a <USBH_MSC_BOT_Process+0x37e>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 80063f2:	693b      	ldr	r3, [r7, #16]
 80063f4:	220a      	movs	r2, #10
 80063f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    break;
 80063fa:	e13e      	b.n	800667a <USBH_MSC_BOT_Process+0x37e>

  case BOT_DATA_IN:
    /* Send first packet */
    USBH_BulkReceiveData (phost, MSC_Handle->hbot.pbuf,
 80063fc:	693b      	ldr	r3, [r7, #16]
 80063fe:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8006402:	693b      	ldr	r3, [r7, #16]
 8006404:	895a      	ldrh	r2, [r3, #10]
 8006406:	693b      	ldr	r3, [r7, #16]
 8006408:	791b      	ldrb	r3, [r3, #4]
 800640a:	6878      	ldr	r0, [r7, #4]
 800640c:	f001 fdfe 	bl	800800c <USBH_BulkReceiveData>
                          MSC_Handle->InEpSize, MSC_Handle->InPipe);

    MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 8006410:	693b      	ldr	r3, [r7, #16]
 8006412:	2204      	movs	r2, #4
 8006414:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    break;
 8006418:	e13c      	b.n	8006694 <USBH_MSC_BOT_Process+0x398>

  case BOT_DATA_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 800641a:	693b      	ldr	r3, [r7, #16]
 800641c:	791b      	ldrb	r3, [r3, #4]
 800641e:	4619      	mov	r1, r3
 8006420:	6878      	ldr	r0, [r7, #4]
 8006422:	f004 faa9 	bl	800a978 <USBH_LL_GetURBState>
 8006426:	4603      	mov	r3, r0
 8006428:	753b      	strb	r3, [r7, #20]

    if(URB_Status == USBH_URB_DONE)
 800642a:	7d3b      	ldrb	r3, [r7, #20]
 800642c:	2b01      	cmp	r3, #1
 800642e:	d12d      	bne.n	800648c <USBH_MSC_BOT_Process+0x190>
    {
      /* Adjust Data pointer and data length */
      if(MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 8006430:	693b      	ldr	r3, [r7, #16]
 8006432:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006434:	693a      	ldr	r2, [r7, #16]
 8006436:	8952      	ldrh	r2, [r2, #10]
 8006438:	4293      	cmp	r3, r2
 800643a:	d910      	bls.n	800645e <USBH_MSC_BOT_Process+0x162>
      {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 800643c:	693b      	ldr	r3, [r7, #16]
 800643e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006442:	693a      	ldr	r2, [r7, #16]
 8006444:	8952      	ldrh	r2, [r2, #10]
 8006446:	441a      	add	r2, r3
 8006448:	693b      	ldr	r3, [r7, #16]
 800644a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 800644e:	693b      	ldr	r3, [r7, #16]
 8006450:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006452:	693a      	ldr	r2, [r7, #16]
 8006454:	8952      	ldrh	r2, [r2, #10]
 8006456:	1a9a      	subs	r2, r3, r2
 8006458:	693b      	ldr	r3, [r7, #16]
 800645a:	65da      	str	r2, [r3, #92]	; 0x5c
 800645c:	e002      	b.n	8006464 <USBH_MSC_BOT_Process+0x168>
      }
      else
      {
        MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 800645e:	693b      	ldr	r3, [r7, #16]
 8006460:	2200      	movs	r2, #0
 8006462:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* More Data To be Received */
      if(MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8006464:	693b      	ldr	r3, [r7, #16]
 8006466:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006468:	2b00      	cmp	r3, #0
 800646a:	d00a      	beq.n	8006482 <USBH_MSC_BOT_Process+0x186>
      {
        /* Send next packet */
        USBH_BulkReceiveData (phost, MSC_Handle->hbot.pbuf,
 800646c:	693b      	ldr	r3, [r7, #16]
 800646e:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8006472:	693b      	ldr	r3, [r7, #16]
 8006474:	895a      	ldrh	r2, [r3, #10]
 8006476:	693b      	ldr	r3, [r7, #16]
 8006478:	791b      	ldrb	r3, [r3, #4]
 800647a:	6878      	ldr	r0, [r7, #4]
 800647c:	f001 fdc6 	bl	800800c <USBH_BulkReceiveData>
#endif
    }
    else
    {
    }
    break;
 8006480:	e0fd      	b.n	800667e <USBH_MSC_BOT_Process+0x382>
        MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 8006482:	693b      	ldr	r3, [r7, #16]
 8006484:	2207      	movs	r2, #7
 8006486:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    break;
 800648a:	e0f8      	b.n	800667e <USBH_MSC_BOT_Process+0x382>
    else if(URB_Status == USBH_URB_STALL)
 800648c:	7d3b      	ldrb	r3, [r7, #20]
 800648e:	2b05      	cmp	r3, #5
 8006490:	f040 80f5 	bne.w	800667e <USBH_MSC_BOT_Process+0x382>
      MSC_Handle->hbot.state  = BOT_ERROR_IN;
 8006494:	693b      	ldr	r3, [r7, #16]
 8006496:	2209      	movs	r2, #9
 8006498:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    break;
 800649c:	e0ef      	b.n	800667e <USBH_MSC_BOT_Process+0x382>

  case BOT_DATA_OUT:

    USBH_BulkSendData (phost, MSC_Handle->hbot.pbuf,
 800649e:	693b      	ldr	r3, [r7, #16]
 80064a0:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 80064a4:	693b      	ldr	r3, [r7, #16]
 80064a6:	891a      	ldrh	r2, [r3, #8]
 80064a8:	693b      	ldr	r3, [r7, #16]
 80064aa:	7958      	ldrb	r0, [r3, #5]
 80064ac:	2301      	movs	r3, #1
 80064ae:	9300      	str	r3, [sp, #0]
 80064b0:	4603      	mov	r3, r0
 80064b2:	6878      	ldr	r0, [r7, #4]
 80064b4:	f001 fd85 	bl	8007fc2 <USBH_BulkSendData>
                       MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);

    MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 80064b8:	693b      	ldr	r3, [r7, #16]
 80064ba:	2206      	movs	r2, #6
 80064bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    break;
 80064c0:	e0e8      	b.n	8006694 <USBH_MSC_BOT_Process+0x398>

  case BOT_DATA_OUT_WAIT:
    URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 80064c2:	693b      	ldr	r3, [r7, #16]
 80064c4:	795b      	ldrb	r3, [r3, #5]
 80064c6:	4619      	mov	r1, r3
 80064c8:	6878      	ldr	r0, [r7, #4]
 80064ca:	f004 fa55 	bl	800a978 <USBH_LL_GetURBState>
 80064ce:	4603      	mov	r3, r0
 80064d0:	753b      	strb	r3, [r7, #20]

    if(URB_Status == USBH_URB_DONE)
 80064d2:	7d3b      	ldrb	r3, [r7, #20]
 80064d4:	2b01      	cmp	r3, #1
 80064d6:	d130      	bne.n	800653a <USBH_MSC_BOT_Process+0x23e>
    {
      /* Adjust Data pointer and data length */
      if(MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 80064d8:	693b      	ldr	r3, [r7, #16]
 80064da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064dc:	693a      	ldr	r2, [r7, #16]
 80064de:	8912      	ldrh	r2, [r2, #8]
 80064e0:	4293      	cmp	r3, r2
 80064e2:	d910      	bls.n	8006506 <USBH_MSC_BOT_Process+0x20a>
      {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 80064e4:	693b      	ldr	r3, [r7, #16]
 80064e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80064ea:	693a      	ldr	r2, [r7, #16]
 80064ec:	8912      	ldrh	r2, [r2, #8]
 80064ee:	441a      	add	r2, r3
 80064f0:	693b      	ldr	r3, [r7, #16]
 80064f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 80064f6:	693b      	ldr	r3, [r7, #16]
 80064f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064fa:	693a      	ldr	r2, [r7, #16]
 80064fc:	8912      	ldrh	r2, [r2, #8]
 80064fe:	1a9a      	subs	r2, r3, r2
 8006500:	693b      	ldr	r3, [r7, #16]
 8006502:	65da      	str	r2, [r3, #92]	; 0x5c
 8006504:	e002      	b.n	800650c <USBH_MSC_BOT_Process+0x210>
      }
      else
      {
        MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 8006506:	693b      	ldr	r3, [r7, #16]
 8006508:	2200      	movs	r2, #0
 800650a:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* More Data To be Sent */
      if(MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 800650c:	693b      	ldr	r3, [r7, #16]
 800650e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006510:	2b00      	cmp	r3, #0
 8006512:	d00d      	beq.n	8006530 <USBH_MSC_BOT_Process+0x234>
      {
        USBH_BulkSendData (phost, MSC_Handle->hbot.pbuf,
 8006514:	693b      	ldr	r3, [r7, #16]
 8006516:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800651a:	693b      	ldr	r3, [r7, #16]
 800651c:	891a      	ldrh	r2, [r3, #8]
 800651e:	693b      	ldr	r3, [r7, #16]
 8006520:	7958      	ldrb	r0, [r3, #5]
 8006522:	2301      	movs	r3, #1
 8006524:	9300      	str	r3, [sp, #0]
 8006526:	4603      	mov	r3, r0
 8006528:	6878      	ldr	r0, [r7, #4]
 800652a:	f001 fd4a 	bl	8007fc2 <USBH_BulkSendData>
#endif
    }
    else
    {
    }
    break;
 800652e:	e0a8      	b.n	8006682 <USBH_MSC_BOT_Process+0x386>
        MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 8006530:	693b      	ldr	r3, [r7, #16]
 8006532:	2207      	movs	r2, #7
 8006534:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    break;
 8006538:	e0a3      	b.n	8006682 <USBH_MSC_BOT_Process+0x386>
    else if(URB_Status == USBH_URB_NOTREADY)
 800653a:	7d3b      	ldrb	r3, [r7, #20]
 800653c:	2b02      	cmp	r3, #2
 800653e:	d104      	bne.n	800654a <USBH_MSC_BOT_Process+0x24e>
      MSC_Handle->hbot.state  = BOT_DATA_OUT;
 8006540:	693b      	ldr	r3, [r7, #16]
 8006542:	2205      	movs	r2, #5
 8006544:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    break;
 8006548:	e09b      	b.n	8006682 <USBH_MSC_BOT_Process+0x386>
    else if(URB_Status == USBH_URB_STALL)
 800654a:	7d3b      	ldrb	r3, [r7, #20]
 800654c:	2b05      	cmp	r3, #5
 800654e:	f040 8098 	bne.w	8006682 <USBH_MSC_BOT_Process+0x386>
      MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 8006552:	693b      	ldr	r3, [r7, #16]
 8006554:	220a      	movs	r2, #10
 8006556:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    break;
 800655a:	e092      	b.n	8006682 <USBH_MSC_BOT_Process+0x386>

  case BOT_RECEIVE_CSW:

    USBH_BulkReceiveData (phost, MSC_Handle->hbot.csw.data,
 800655c:	693b      	ldr	r3, [r7, #16]
 800655e:	f103 0178 	add.w	r1, r3, #120	; 0x78
 8006562:	693b      	ldr	r3, [r7, #16]
 8006564:	791b      	ldrb	r3, [r3, #4]
 8006566:	220d      	movs	r2, #13
 8006568:	6878      	ldr	r0, [r7, #4]
 800656a:	f001 fd4f 	bl	800800c <USBH_BulkReceiveData>
                          BOT_CSW_LENGTH, MSC_Handle->InPipe);

    MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 800656e:	693b      	ldr	r3, [r7, #16]
 8006570:	2208      	movs	r2, #8
 8006572:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    break;
 8006576:	e08d      	b.n	8006694 <USBH_MSC_BOT_Process+0x398>

  case BOT_RECEIVE_CSW_WAIT:

    URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 8006578:	693b      	ldr	r3, [r7, #16]
 800657a:	791b      	ldrb	r3, [r3, #4]
 800657c:	4619      	mov	r1, r3
 800657e:	6878      	ldr	r0, [r7, #4]
 8006580:	f004 f9fa 	bl	800a978 <USBH_LL_GetURBState>
 8006584:	4603      	mov	r3, r0
 8006586:	753b      	strb	r3, [r7, #20]

    /* Decode CSW */
    if(URB_Status == USBH_URB_DONE)
 8006588:	7d3b      	ldrb	r3, [r7, #20]
 800658a:	2b01      	cmp	r3, #1
 800658c:	d115      	bne.n	80065ba <USBH_MSC_BOT_Process+0x2be>
    {
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800658e:	693b      	ldr	r3, [r7, #16]
 8006590:	2201      	movs	r2, #1
 8006592:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 8006596:	693b      	ldr	r3, [r7, #16]
 8006598:	2201      	movs	r2, #1
 800659a:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      CSW_Status = USBH_MSC_DecodeCSW(phost);
 800659e:	6878      	ldr	r0, [r7, #4]
 80065a0:	f000 f8aa 	bl	80066f8 <USBH_MSC_DecodeCSW>
 80065a4:	4603      	mov	r3, r0
 80065a6:	757b      	strb	r3, [r7, #21]

      if(CSW_Status == BOT_CSW_CMD_PASSED)
 80065a8:	7d7b      	ldrb	r3, [r7, #21]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d102      	bne.n	80065b4 <USBH_MSC_BOT_Process+0x2b8>
      {
        status = USBH_OK;
 80065ae:	2300      	movs	r3, #0
 80065b0:	75fb      	strb	r3, [r7, #23]
#endif
    }
    else
    {
    }
    break;
 80065b2:	e068      	b.n	8006686 <USBH_MSC_BOT_Process+0x38a>
        status = USBH_FAIL;
 80065b4:	2302      	movs	r3, #2
 80065b6:	75fb      	strb	r3, [r7, #23]
    break;
 80065b8:	e065      	b.n	8006686 <USBH_MSC_BOT_Process+0x38a>
    else if(URB_Status == USBH_URB_STALL)
 80065ba:	7d3b      	ldrb	r3, [r7, #20]
 80065bc:	2b05      	cmp	r3, #5
 80065be:	d162      	bne.n	8006686 <USBH_MSC_BOT_Process+0x38a>
      MSC_Handle->hbot.state  = BOT_ERROR_IN;
 80065c0:	693b      	ldr	r3, [r7, #16]
 80065c2:	2209      	movs	r2, #9
 80065c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    break;
 80065c8:	e05d      	b.n	8006686 <USBH_MSC_BOT_Process+0x38a>

  case BOT_ERROR_IN:
    error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 80065ca:	78fb      	ldrb	r3, [r7, #3]
 80065cc:	2200      	movs	r2, #0
 80065ce:	4619      	mov	r1, r3
 80065d0:	6878      	ldr	r0, [r7, #4]
 80065d2:	f000 f865 	bl	80066a0 <USBH_MSC_BOT_Abort>
 80065d6:	4603      	mov	r3, r0
 80065d8:	75bb      	strb	r3, [r7, #22]

    if (error == USBH_OK)
 80065da:	7dbb      	ldrb	r3, [r7, #22]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d104      	bne.n	80065ea <USBH_MSC_BOT_Process+0x2ee>
    {
      MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 80065e0:	693b      	ldr	r3, [r7, #16]
 80065e2:	2207      	movs	r2, #7
 80065e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
    }
    else
    {
    }
    break;
 80065e8:	e04f      	b.n	800668a <USBH_MSC_BOT_Process+0x38e>
    else if (error == USBH_UNRECOVERED_ERROR)
 80065ea:	7dbb      	ldrb	r3, [r7, #22]
 80065ec:	2b04      	cmp	r3, #4
 80065ee:	d14c      	bne.n	800668a <USBH_MSC_BOT_Process+0x38e>
      MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 80065f0:	693b      	ldr	r3, [r7, #16]
 80065f2:	220b      	movs	r2, #11
 80065f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    break;
 80065f8:	e047      	b.n	800668a <USBH_MSC_BOT_Process+0x38e>

  case BOT_ERROR_OUT:
    error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 80065fa:	78fb      	ldrb	r3, [r7, #3]
 80065fc:	2201      	movs	r2, #1
 80065fe:	4619      	mov	r1, r3
 8006600:	6878      	ldr	r0, [r7, #4]
 8006602:	f000 f84d 	bl	80066a0 <USBH_MSC_BOT_Abort>
 8006606:	4603      	mov	r3, r0
 8006608:	75bb      	strb	r3, [r7, #22]

    if (error == USBH_OK)
 800660a:	7dbb      	ldrb	r3, [r7, #22]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d11d      	bne.n	800664c <USBH_MSC_BOT_Process+0x350>
    {

      toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 8006610:	693b      	ldr	r3, [r7, #16]
 8006612:	795b      	ldrb	r3, [r3, #5]
 8006614:	4619      	mov	r1, r3
 8006616:	6878      	ldr	r0, [r7, #4]
 8006618:	f004 fa0b 	bl	800aa32 <USBH_LL_GetToggle>
 800661c:	4603      	mov	r3, r0
 800661e:	73fb      	strb	r3, [r7, #15]
      USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 8006620:	693b      	ldr	r3, [r7, #16]
 8006622:	7959      	ldrb	r1, [r3, #5]
 8006624:	7bfb      	ldrb	r3, [r7, #15]
 8006626:	f1c3 0301 	rsb	r3, r3, #1
 800662a:	b2db      	uxtb	r3, r3
 800662c:	461a      	mov	r2, r3
 800662e:	6878      	ldr	r0, [r7, #4]
 8006630:	f004 f9cc 	bl	800a9cc <USBH_LL_SetToggle>
      USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8006634:	693b      	ldr	r3, [r7, #16]
 8006636:	791b      	ldrb	r3, [r3, #4]
 8006638:	2200      	movs	r2, #0
 800663a:	4619      	mov	r1, r3
 800663c:	6878      	ldr	r0, [r7, #4]
 800663e:	f004 f9c5 	bl	800a9cc <USBH_LL_SetToggle>
      MSC_Handle->hbot.state = BOT_ERROR_IN;
 8006642:	693b      	ldr	r3, [r7, #16]
 8006644:	2209      	movs	r2, #9
 8006646:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (error == USBH_UNRECOVERED_ERROR)
      {
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
      }
    }
    break;
 800664a:	e020      	b.n	800668e <USBH_MSC_BOT_Process+0x392>
      if (error == USBH_UNRECOVERED_ERROR)
 800664c:	7dbb      	ldrb	r3, [r7, #22]
 800664e:	2b04      	cmp	r3, #4
 8006650:	d11d      	bne.n	800668e <USBH_MSC_BOT_Process+0x392>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 8006652:	693b      	ldr	r3, [r7, #16]
 8006654:	220b      	movs	r2, #11
 8006656:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    break;
 800665a:	e018      	b.n	800668e <USBH_MSC_BOT_Process+0x392>


  case BOT_UNRECOVERED_ERROR:
    status = USBH_MSC_BOT_REQ_Reset(phost);
 800665c:	6878      	ldr	r0, [r7, #4]
 800665e:	f7ff fdf0 	bl	8006242 <USBH_MSC_BOT_REQ_Reset>
 8006662:	4603      	mov	r3, r0
 8006664:	75fb      	strb	r3, [r7, #23]
    if ( status == USBH_OK)
 8006666:	7dfb      	ldrb	r3, [r7, #23]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d112      	bne.n	8006692 <USBH_MSC_BOT_Process+0x396>
    {
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800666c:	693b      	ldr	r3, [r7, #16]
 800666e:	2201      	movs	r2, #1
 8006670:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    }
    break;
 8006674:	e00d      	b.n	8006692 <USBH_MSC_BOT_Process+0x396>

  default:
    break;
 8006676:	bf00      	nop
 8006678:	e00c      	b.n	8006694 <USBH_MSC_BOT_Process+0x398>
    break;
 800667a:	bf00      	nop
 800667c:	e00a      	b.n	8006694 <USBH_MSC_BOT_Process+0x398>
    break;
 800667e:	bf00      	nop
 8006680:	e008      	b.n	8006694 <USBH_MSC_BOT_Process+0x398>
    break;
 8006682:	bf00      	nop
 8006684:	e006      	b.n	8006694 <USBH_MSC_BOT_Process+0x398>
    break;
 8006686:	bf00      	nop
 8006688:	e004      	b.n	8006694 <USBH_MSC_BOT_Process+0x398>
    break;
 800668a:	bf00      	nop
 800668c:	e002      	b.n	8006694 <USBH_MSC_BOT_Process+0x398>
    break;
 800668e:	bf00      	nop
 8006690:	e000      	b.n	8006694 <USBH_MSC_BOT_Process+0x398>
    break;
 8006692:	bf00      	nop
  }
  return status;
 8006694:	7dfb      	ldrb	r3, [r7, #23]
}
 8006696:	4618      	mov	r0, r3
 8006698:	3718      	adds	r7, #24
 800669a:	46bd      	mov	sp, r7
 800669c:	bd80      	pop	{r7, pc}
 800669e:	bf00      	nop

080066a0 <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
 80066a0:	b580      	push	{r7, lr}
 80066a2:	b084      	sub	sp, #16
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
 80066a8:	460b      	mov	r3, r1
 80066aa:	70fb      	strb	r3, [r7, #3]
 80066ac:	4613      	mov	r3, r2
 80066ae:	70bb      	strb	r3, [r7, #2]
  USBH_StatusTypeDef status = USBH_FAIL;
 80066b0:	2302      	movs	r3, #2
 80066b2:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80066ba:	69db      	ldr	r3, [r3, #28]
 80066bc:	60bb      	str	r3, [r7, #8]

  switch (dir)
 80066be:	78bb      	ldrb	r3, [r7, #2]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d002      	beq.n	80066ca <USBH_MSC_BOT_Abort+0x2a>
 80066c4:	2b01      	cmp	r3, #1
 80066c6:	d009      	beq.n	80066dc <USBH_MSC_BOT_Abort+0x3c>
    /*send ClrFeature on Bulk OUT endpoint */
    status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
    break;

  default:
    break;
 80066c8:	e011      	b.n	80066ee <USBH_MSC_BOT_Abort+0x4e>
    status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 80066ca:	68bb      	ldr	r3, [r7, #8]
 80066cc:	79db      	ldrb	r3, [r3, #7]
 80066ce:	4619      	mov	r1, r3
 80066d0:	6878      	ldr	r0, [r7, #4]
 80066d2:	f001 f885 	bl	80077e0 <USBH_ClrFeature>
 80066d6:	4603      	mov	r3, r0
 80066d8:	73fb      	strb	r3, [r7, #15]
    break;
 80066da:	e008      	b.n	80066ee <USBH_MSC_BOT_Abort+0x4e>
    status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 80066dc:	68bb      	ldr	r3, [r7, #8]
 80066de:	799b      	ldrb	r3, [r3, #6]
 80066e0:	4619      	mov	r1, r3
 80066e2:	6878      	ldr	r0, [r7, #4]
 80066e4:	f001 f87c 	bl	80077e0 <USBH_ClrFeature>
 80066e8:	4603      	mov	r3, r0
 80066ea:	73fb      	strb	r3, [r7, #15]
    break;
 80066ec:	bf00      	nop
  }
  return status;
 80066ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80066f0:	4618      	mov	r0, r3
 80066f2:	3710      	adds	r7, #16
 80066f4:	46bd      	mov	sp, r7
 80066f6:	bd80      	pop	{r7, pc}

080066f8 <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 80066f8:	b580      	push	{r7, lr}
 80066fa:	b084      	sub	sp, #16
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006706:	69db      	ldr	r3, [r3, #28]
 8006708:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 800670a:	2301      	movs	r3, #1
 800670c:	73fb      	strb	r3, [r7, #15]

    /*Checking if the transfer length is different than 13*/
    if(USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 800670e:	68bb      	ldr	r3, [r7, #8]
 8006710:	791b      	ldrb	r3, [r3, #4]
 8006712:	4619      	mov	r1, r3
 8006714:	6878      	ldr	r0, [r7, #4]
 8006716:	f004 f89d 	bl	800a854 <USBH_LL_GetLastXferSize>
 800671a:	4603      	mov	r3, r0
 800671c:	2b0d      	cmp	r3, #13
 800671e:	d002      	beq.n	8006726 <USBH_MSC_DecodeCSW+0x2e>
      Device intends to transfer no data)
      (11) Ho > Do  (Host expects to send data to the device,
      Device intends to receive data from the host)*/


      status = BOT_CSW_PHASE_ERROR;
 8006720:	2302      	movs	r3, #2
 8006722:	73fb      	strb	r3, [r7, #15]
 8006724:	e024      	b.n	8006770 <USBH_MSC_DecodeCSW+0x78>
    }
    else
    { /* CSW length is Correct */

      /* Check validity of the CSW Signature and CSWStatus */
      if(MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 8006726:	68bb      	ldr	r3, [r7, #8]
 8006728:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800672a:	4a14      	ldr	r2, [pc, #80]	; (800677c <USBH_MSC_DecodeCSW+0x84>)
 800672c:	4293      	cmp	r3, r2
 800672e:	d11d      	bne.n	800676c <USBH_MSC_DecodeCSW+0x74>
      {/* Check Condition 1. dCSWSignature is equal to 53425355h */

        if(MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 8006730:	68bb      	ldr	r3, [r7, #8]
 8006732:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8006734:	68bb      	ldr	r3, [r7, #8]
 8006736:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006738:	429a      	cmp	r2, r3
 800673a:	d119      	bne.n	8006770 <USBH_MSC_DecodeCSW+0x78>
        {
          /* Check Condition 3. dCSWTag matches the dCBWTag from the
          corresponding CBW */

          if(MSC_Handle->hbot.csw.field.Status == 0U)
 800673c:	68bb      	ldr	r3, [r7, #8]
 800673e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006742:	2b00      	cmp	r3, #0
 8006744:	d102      	bne.n	800674c <USBH_MSC_DecodeCSW+0x54>
            (12) Ho = Do (Host expects to send data to the device,
            Device intends to receive data from the host)

            */

            status = BOT_CSW_CMD_PASSED;
 8006746:	2300      	movs	r3, #0
 8006748:	73fb      	strb	r3, [r7, #15]
 800674a:	e011      	b.n	8006770 <USBH_MSC_DecodeCSW+0x78>
          }
          else if(MSC_Handle->hbot.csw.field.Status == 1U)
 800674c:	68bb      	ldr	r3, [r7, #8]
 800674e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006752:	2b01      	cmp	r3, #1
 8006754:	d102      	bne.n	800675c <USBH_MSC_DecodeCSW+0x64>
          {
            status = BOT_CSW_CMD_FAILED;
 8006756:	2301      	movs	r3, #1
 8006758:	73fb      	strb	r3, [r7, #15]
 800675a:	e009      	b.n	8006770 <USBH_MSC_DecodeCSW+0x78>
          }

          else if(MSC_Handle->hbot.csw.field.Status == 2U)
 800675c:	68bb      	ldr	r3, [r7, #8]
 800675e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006762:	2b02      	cmp	r3, #2
 8006764:	d104      	bne.n	8006770 <USBH_MSC_DecodeCSW+0x78>
            Di Device intends to send data to the host)
            (13) Ho < Do (Host expects to send data to the device,
            Device intends to receive data from the host)
            */

            status = BOT_CSW_PHASE_ERROR;
 8006766:	2302      	movs	r3, #2
 8006768:	73fb      	strb	r3, [r7, #15]
 800676a:	e001      	b.n	8006770 <USBH_MSC_DecodeCSW+0x78>
      else
      {
        /* If the CSW Signature is not valid, We sall return the Phase Error to
        Upper Layers for Reset Recovery */

        status = BOT_CSW_PHASE_ERROR;
 800676c:	2302      	movs	r3, #2
 800676e:	73fb      	strb	r3, [r7, #15]
      }
    } /* CSW Length Check*/

  return status;
 8006770:	7bfb      	ldrb	r3, [r7, #15]
}
 8006772:	4618      	mov	r0, r3
 8006774:	3710      	adds	r7, #16
 8006776:	46bd      	mov	sp, r7
 8006778:	bd80      	pop	{r7, pc}
 800677a:	bf00      	nop
 800677c:	53425355 	.word	0x53425355

08006780 <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady (USBH_HandleTypeDef *phost,
                                                uint8_t lun)
{
 8006780:	b580      	push	{r7, lr}
 8006782:	b084      	sub	sp, #16
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
 8006788:	460b      	mov	r3, r1
 800678a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800678c:	2302      	movs	r3, #2
 800678e:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006796:	69db      	ldr	r3, [r3, #28]
 8006798:	60bb      	str	r3, [r7, #8]

  switch(MSC_Handle->hbot.cmd_state)
 800679a:	68bb      	ldr	r3, [r7, #8]
 800679c:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 80067a0:	2b01      	cmp	r3, #1
 80067a2:	d002      	beq.n	80067aa <USBH_MSC_SCSI_TestUnitReady+0x2a>
 80067a4:	2b02      	cmp	r3, #2
 80067a6:	d021      	beq.n	80067ec <USBH_MSC_SCSI_TestUnitReady+0x6c>
  case BOT_CMD_WAIT:
    error = USBH_MSC_BOT_Process(phost, lun);
    break;

  default:
    break;
 80067a8:	e028      	b.n	80067fc <USBH_MSC_SCSI_TestUnitReady+0x7c>
    MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 80067aa:	68bb      	ldr	r3, [r7, #8]
 80067ac:	2200      	movs	r2, #0
 80067ae:	65da      	str	r2, [r3, #92]	; 0x5c
    MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 80067b0:	68bb      	ldr	r3, [r7, #8]
 80067b2:	2200      	movs	r2, #0
 80067b4:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 80067b8:	68bb      	ldr	r3, [r7, #8]
 80067ba:	220a      	movs	r2, #10
 80067bc:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
    USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 80067c0:	68bb      	ldr	r3, [r7, #8]
 80067c2:	3363      	adds	r3, #99	; 0x63
 80067c4:	2210      	movs	r2, #16
 80067c6:	2100      	movs	r1, #0
 80067c8:	4618      	mov	r0, r3
 80067ca:	f004 f9fe 	bl	800abca <memset>
    MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_TEST_UNIT_READY;
 80067ce:	68bb      	ldr	r3, [r7, #8]
 80067d0:	2200      	movs	r2, #0
 80067d2:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
    MSC_Handle->hbot.state = BOT_SEND_CBW;
 80067d6:	68bb      	ldr	r3, [r7, #8]
 80067d8:	2201      	movs	r2, #1
 80067da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 80067de:	68bb      	ldr	r3, [r7, #8]
 80067e0:	2202      	movs	r2, #2
 80067e2:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
    error = USBH_BUSY;
 80067e6:	2301      	movs	r3, #1
 80067e8:	73fb      	strb	r3, [r7, #15]
    break;
 80067ea:	e007      	b.n	80067fc <USBH_MSC_SCSI_TestUnitReady+0x7c>
    error = USBH_MSC_BOT_Process(phost, lun);
 80067ec:	78fb      	ldrb	r3, [r7, #3]
 80067ee:	4619      	mov	r1, r3
 80067f0:	6878      	ldr	r0, [r7, #4]
 80067f2:	f7ff fd83 	bl	80062fc <USBH_MSC_BOT_Process>
 80067f6:	4603      	mov	r3, r0
 80067f8:	73fb      	strb	r3, [r7, #15]
    break;
 80067fa:	bf00      	nop
  }

  return error;
 80067fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80067fe:	4618      	mov	r0, r3
 8006800:	3710      	adds	r7, #16
 8006802:	46bd      	mov	sp, r7
 8006804:	bd80      	pop	{r7, pc}

08006806 <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity (USBH_HandleTypeDef *phost,
                                               uint8_t lun,
                                               SCSI_CapacityTypeDef *capacity)
{
 8006806:	b580      	push	{r7, lr}
 8006808:	b086      	sub	sp, #24
 800680a:	af00      	add	r7, sp, #0
 800680c:	60f8      	str	r0, [r7, #12]
 800680e:	460b      	mov	r3, r1
 8006810:	607a      	str	r2, [r7, #4]
 8006812:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_BUSY ;
 8006814:	2301      	movs	r3, #1
 8006816:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800681e:	69db      	ldr	r3, [r3, #28]
 8006820:	613b      	str	r3, [r7, #16]

  switch(MSC_Handle->hbot.cmd_state)
 8006822:	693b      	ldr	r3, [r7, #16]
 8006824:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8006828:	2b01      	cmp	r3, #1
 800682a:	d002      	beq.n	8006832 <USBH_MSC_SCSI_ReadCapacity+0x2c>
 800682c:	2b02      	cmp	r3, #2
 800682e:	d027      	beq.n	8006880 <USBH_MSC_SCSI_ReadCapacity+0x7a>
      capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
    }
    break;

  default:
    break;
 8006830:	e05f      	b.n	80068f2 <USBH_MSC_SCSI_ReadCapacity+0xec>
    MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 8006832:	693b      	ldr	r3, [r7, #16]
 8006834:	2208      	movs	r2, #8
 8006836:	65da      	str	r2, [r3, #92]	; 0x5c
    MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8006838:	693b      	ldr	r3, [r7, #16]
 800683a:	2280      	movs	r2, #128	; 0x80
 800683c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8006840:	693b      	ldr	r3, [r7, #16]
 8006842:	220a      	movs	r2, #10
 8006844:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
    USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8006848:	693b      	ldr	r3, [r7, #16]
 800684a:	3363      	adds	r3, #99	; 0x63
 800684c:	2210      	movs	r2, #16
 800684e:	2100      	movs	r1, #0
 8006850:	4618      	mov	r0, r3
 8006852:	f004 f9ba 	bl	800abca <memset>
    MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 8006856:	693b      	ldr	r3, [r7, #16]
 8006858:	2225      	movs	r2, #37	; 0x25
 800685a:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
    MSC_Handle->hbot.state = BOT_SEND_CBW;
 800685e:	693b      	ldr	r3, [r7, #16]
 8006860:	2201      	movs	r2, #1
 8006862:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8006866:	693b      	ldr	r3, [r7, #16]
 8006868:	2202      	movs	r2, #2
 800686a:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
    MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800686e:	693b      	ldr	r3, [r7, #16]
 8006870:	f103 0210 	add.w	r2, r3, #16
 8006874:	693b      	ldr	r3, [r7, #16]
 8006876:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    error = USBH_BUSY;
 800687a:	2301      	movs	r3, #1
 800687c:	75fb      	strb	r3, [r7, #23]
    break;
 800687e:	e038      	b.n	80068f2 <USBH_MSC_SCSI_ReadCapacity+0xec>
    error = USBH_MSC_BOT_Process(phost, lun);
 8006880:	7afb      	ldrb	r3, [r7, #11]
 8006882:	4619      	mov	r1, r3
 8006884:	68f8      	ldr	r0, [r7, #12]
 8006886:	f7ff fd39 	bl	80062fc <USBH_MSC_BOT_Process>
 800688a:	4603      	mov	r3, r0
 800688c:	75fb      	strb	r3, [r7, #23]
    if(error == USBH_OK)
 800688e:	7dfb      	ldrb	r3, [r7, #23]
 8006890:	2b00      	cmp	r3, #0
 8006892:	d12d      	bne.n	80068f0 <USBH_MSC_SCSI_ReadCapacity+0xea>
      capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) |\
 8006894:	693b      	ldr	r3, [r7, #16]
 8006896:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800689a:	3303      	adds	r3, #3
 800689c:	781b      	ldrb	r3, [r3, #0]
 800689e:	461a      	mov	r2, r3
 80068a0:	693b      	ldr	r3, [r7, #16]
 80068a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80068a6:	3302      	adds	r3, #2
 80068a8:	781b      	ldrb	r3, [r3, #0]
 80068aa:	021b      	lsls	r3, r3, #8
 80068ac:	431a      	orrs	r2, r3
                           ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 80068ae:	693b      	ldr	r3, [r7, #16]
 80068b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80068b4:	3301      	adds	r3, #1
 80068b6:	781b      	ldrb	r3, [r3, #0]
 80068b8:	041b      	lsls	r3, r3, #16
      capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) |\
 80068ba:	431a      	orrs	r2, r3
                           ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 80068bc:	693b      	ldr	r3, [r7, #16]
 80068be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80068c2:	781b      	ldrb	r3, [r3, #0]
 80068c4:	061b      	lsls	r3, r3, #24
 80068c6:	431a      	orrs	r2, r3
      capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) |\
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	601a      	str	r2, [r3, #0]
      capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 80068cc:	693b      	ldr	r3, [r7, #16]
 80068ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80068d2:	3307      	adds	r3, #7
 80068d4:	781b      	ldrb	r3, [r3, #0]
 80068d6:	b29a      	uxth	r2, r3
 80068d8:	693b      	ldr	r3, [r7, #16]
 80068da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80068de:	3306      	adds	r3, #6
 80068e0:	781b      	ldrb	r3, [r3, #0]
 80068e2:	b29b      	uxth	r3, r3
 80068e4:	021b      	lsls	r3, r3, #8
 80068e6:	b29b      	uxth	r3, r3
 80068e8:	4313      	orrs	r3, r2
 80068ea:	b29a      	uxth	r2, r3
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	809a      	strh	r2, [r3, #4]
    break;
 80068f0:	bf00      	nop
  }

  return error;
 80068f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80068f4:	4618      	mov	r0, r3
 80068f6:	3718      	adds	r7, #24
 80068f8:	46bd      	mov	sp, r7
 80068fa:	bd80      	pop	{r7, pc}

080068fc <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry (USBH_HandleTypeDef *phost, uint8_t lun,
                                          SCSI_StdInquiryDataTypeDef *inquiry)
{
 80068fc:	b580      	push	{r7, lr}
 80068fe:	b086      	sub	sp, #24
 8006900:	af00      	add	r7, sp, #0
 8006902:	60f8      	str	r0, [r7, #12]
 8006904:	460b      	mov	r3, r1
 8006906:	607a      	str	r2, [r7, #4]
 8006908:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 800690a:	2302      	movs	r3, #2
 800690c:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006914:	69db      	ldr	r3, [r3, #28]
 8006916:	613b      	str	r3, [r7, #16]

  switch(MSC_Handle->hbot.cmd_state)
 8006918:	693b      	ldr	r3, [r7, #16]
 800691a:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800691e:	2b01      	cmp	r3, #1
 8006920:	d002      	beq.n	8006928 <USBH_MSC_SCSI_Inquiry+0x2c>
 8006922:	2b02      	cmp	r3, #2
 8006924:	d03d      	beq.n	80069a2 <USBH_MSC_SCSI_Inquiry+0xa6>
      USBH_memcpy (inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
    }
    break;

  default:
    break;
 8006926:	e089      	b.n	8006a3c <USBH_MSC_SCSI_Inquiry+0x140>
    MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 8006928:	693b      	ldr	r3, [r7, #16]
 800692a:	2224      	movs	r2, #36	; 0x24
 800692c:	65da      	str	r2, [r3, #92]	; 0x5c
    MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800692e:	693b      	ldr	r3, [r7, #16]
 8006930:	2280      	movs	r2, #128	; 0x80
 8006932:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8006936:	693b      	ldr	r3, [r7, #16]
 8006938:	220a      	movs	r2, #10
 800693a:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
    USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 800693e:	693b      	ldr	r3, [r7, #16]
 8006940:	3363      	adds	r3, #99	; 0x63
 8006942:	220a      	movs	r2, #10
 8006944:	2100      	movs	r1, #0
 8006946:	4618      	mov	r0, r3
 8006948:	f004 f93f 	bl	800abca <memset>
    MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
 800694c:	693b      	ldr	r3, [r7, #16]
 800694e:	2212      	movs	r2, #18
 8006950:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
    MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 8006954:	7afb      	ldrb	r3, [r7, #11]
 8006956:	015b      	lsls	r3, r3, #5
 8006958:	b2da      	uxtb	r2, r3
 800695a:	693b      	ldr	r3, [r7, #16]
 800695c:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
    MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 8006960:	693b      	ldr	r3, [r7, #16]
 8006962:	2200      	movs	r2, #0
 8006964:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
    MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 8006968:	693b      	ldr	r3, [r7, #16]
 800696a:	2200      	movs	r2, #0
 800696c:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
    MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
 8006970:	693b      	ldr	r3, [r7, #16]
 8006972:	2224      	movs	r2, #36	; 0x24
 8006974:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
    MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 8006978:	693b      	ldr	r3, [r7, #16]
 800697a:	2200      	movs	r2, #0
 800697c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    MSC_Handle->hbot.state = BOT_SEND_CBW;
 8006980:	693b      	ldr	r3, [r7, #16]
 8006982:	2201      	movs	r2, #1
 8006984:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8006988:	693b      	ldr	r3, [r7, #16]
 800698a:	2202      	movs	r2, #2
 800698c:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
    MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8006990:	693b      	ldr	r3, [r7, #16]
 8006992:	f103 0210 	add.w	r2, r3, #16
 8006996:	693b      	ldr	r3, [r7, #16]
 8006998:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    error = USBH_BUSY;
 800699c:	2301      	movs	r3, #1
 800699e:	75fb      	strb	r3, [r7, #23]
    break;
 80069a0:	e04c      	b.n	8006a3c <USBH_MSC_SCSI_Inquiry+0x140>
    error = USBH_MSC_BOT_Process(phost, lun);
 80069a2:	7afb      	ldrb	r3, [r7, #11]
 80069a4:	4619      	mov	r1, r3
 80069a6:	68f8      	ldr	r0, [r7, #12]
 80069a8:	f7ff fca8 	bl	80062fc <USBH_MSC_BOT_Process>
 80069ac:	4603      	mov	r3, r0
 80069ae:	75fb      	strb	r3, [r7, #23]
    if(error == USBH_OK)
 80069b0:	7dfb      	ldrb	r3, [r7, #23]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d141      	bne.n	8006a3a <USBH_MSC_SCSI_Inquiry+0x13e>
      USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 80069b6:	2222      	movs	r2, #34	; 0x22
 80069b8:	2100      	movs	r1, #0
 80069ba:	6878      	ldr	r0, [r7, #4]
 80069bc:	f004 f905 	bl	800abca <memset>
      inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 80069c0:	693b      	ldr	r3, [r7, #16]
 80069c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80069c6:	781b      	ldrb	r3, [r3, #0]
 80069c8:	f003 031f 	and.w	r3, r3, #31
 80069cc:	b2da      	uxtb	r2, r3
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	705a      	strb	r2, [r3, #1]
      inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 80069d2:	693b      	ldr	r3, [r7, #16]
 80069d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80069d8:	781b      	ldrb	r3, [r3, #0]
 80069da:	095b      	lsrs	r3, r3, #5
 80069dc:	b2da      	uxtb	r2, r3
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	701a      	strb	r2, [r3, #0]
      if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 80069e2:	693b      	ldr	r3, [r7, #16]
 80069e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80069e8:	3301      	adds	r3, #1
 80069ea:	781b      	ldrb	r3, [r3, #0]
 80069ec:	b25b      	sxtb	r3, r3
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	da03      	bge.n	80069fa <USBH_MSC_SCSI_Inquiry+0xfe>
        inquiry->RemovableMedia = 1U;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	2201      	movs	r2, #1
 80069f6:	709a      	strb	r2, [r3, #2]
 80069f8:	e002      	b.n	8006a00 <USBH_MSC_SCSI_Inquiry+0x104>
        inquiry->RemovableMedia = 0U;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	2200      	movs	r2, #0
 80069fe:	709a      	strb	r2, [r3, #2]
      USBH_memcpy (inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	1cd8      	adds	r0, r3, #3
 8006a04:	693b      	ldr	r3, [r7, #16]
 8006a06:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006a0a:	3308      	adds	r3, #8
 8006a0c:	2208      	movs	r2, #8
 8006a0e:	4619      	mov	r1, r3
 8006a10:	f004 f8d0 	bl	800abb4 <memcpy>
      USBH_memcpy (inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	f103 000c 	add.w	r0, r3, #12
 8006a1a:	693b      	ldr	r3, [r7, #16]
 8006a1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006a20:	3310      	adds	r3, #16
 8006a22:	2210      	movs	r2, #16
 8006a24:	4619      	mov	r1, r3
 8006a26:	f004 f8c5 	bl	800abb4 <memcpy>
      USBH_memcpy (inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	331d      	adds	r3, #29
 8006a2e:	693a      	ldr	r2, [r7, #16]
 8006a30:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 8006a34:	3220      	adds	r2, #32
 8006a36:	6812      	ldr	r2, [r2, #0]
 8006a38:	601a      	str	r2, [r3, #0]
    break;
 8006a3a:	bf00      	nop
  }

  return error;
 8006a3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a3e:	4618      	mov	r0, r3
 8006a40:	3718      	adds	r7, #24
 8006a42:	46bd      	mov	sp, r7
 8006a44:	bd80      	pop	{r7, pc}

08006a46 <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense (USBH_HandleTypeDef *phost,
                                               uint8_t lun,
                                               SCSI_SenseTypeDef *sense_data)
{
 8006a46:	b580      	push	{r7, lr}
 8006a48:	b086      	sub	sp, #24
 8006a4a:	af00      	add	r7, sp, #0
 8006a4c:	60f8      	str	r0, [r7, #12]
 8006a4e:	460b      	mov	r3, r1
 8006a50:	607a      	str	r2, [r7, #4]
 8006a52:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8006a54:	2302      	movs	r3, #2
 8006a56:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006a5e:	69db      	ldr	r3, [r3, #28]
 8006a60:	613b      	str	r3, [r7, #16]

  switch(MSC_Handle->hbot.cmd_state)
 8006a62:	693b      	ldr	r3, [r7, #16]
 8006a64:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8006a68:	2b01      	cmp	r3, #1
 8006a6a:	d002      	beq.n	8006a72 <USBH_MSC_SCSI_RequestSense+0x2c>
 8006a6c:	2b02      	cmp	r3, #2
 8006a6e:	d03d      	beq.n	8006aec <USBH_MSC_SCSI_RequestSense+0xa6>
      sense_data->ascq = MSC_Handle->hbot.pbuf[13];
    }
    break;

  default:
    break;
 8006a70:	e05d      	b.n	8006b2e <USBH_MSC_SCSI_RequestSense+0xe8>
    MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 8006a72:	693b      	ldr	r3, [r7, #16]
 8006a74:	220e      	movs	r2, #14
 8006a76:	65da      	str	r2, [r3, #92]	; 0x5c
    MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8006a78:	693b      	ldr	r3, [r7, #16]
 8006a7a:	2280      	movs	r2, #128	; 0x80
 8006a7c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8006a80:	693b      	ldr	r3, [r7, #16]
 8006a82:	220a      	movs	r2, #10
 8006a84:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
    USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8006a88:	693b      	ldr	r3, [r7, #16]
 8006a8a:	3363      	adds	r3, #99	; 0x63
 8006a8c:	2210      	movs	r2, #16
 8006a8e:	2100      	movs	r1, #0
 8006a90:	4618      	mov	r0, r3
 8006a92:	f004 f89a 	bl	800abca <memset>
    MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 8006a96:	693b      	ldr	r3, [r7, #16]
 8006a98:	2203      	movs	r2, #3
 8006a9a:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
    MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 8006a9e:	7afb      	ldrb	r3, [r7, #11]
 8006aa0:	015b      	lsls	r3, r3, #5
 8006aa2:	b2da      	uxtb	r2, r3
 8006aa4:	693b      	ldr	r3, [r7, #16]
 8006aa6:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
    MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 8006aaa:	693b      	ldr	r3, [r7, #16]
 8006aac:	2200      	movs	r2, #0
 8006aae:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
    MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 8006ab2:	693b      	ldr	r3, [r7, #16]
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
    MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 8006aba:	693b      	ldr	r3, [r7, #16]
 8006abc:	220e      	movs	r2, #14
 8006abe:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
    MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 8006ac2:	693b      	ldr	r3, [r7, #16]
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    MSC_Handle->hbot.state = BOT_SEND_CBW;
 8006aca:	693b      	ldr	r3, [r7, #16]
 8006acc:	2201      	movs	r2, #1
 8006ace:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8006ad2:	693b      	ldr	r3, [r7, #16]
 8006ad4:	2202      	movs	r2, #2
 8006ad6:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
    MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8006ada:	693b      	ldr	r3, [r7, #16]
 8006adc:	f103 0210 	add.w	r2, r3, #16
 8006ae0:	693b      	ldr	r3, [r7, #16]
 8006ae2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    error = USBH_BUSY;
 8006ae6:	2301      	movs	r3, #1
 8006ae8:	75fb      	strb	r3, [r7, #23]
    break;
 8006aea:	e020      	b.n	8006b2e <USBH_MSC_SCSI_RequestSense+0xe8>
    error = USBH_MSC_BOT_Process(phost, lun);
 8006aec:	7afb      	ldrb	r3, [r7, #11]
 8006aee:	4619      	mov	r1, r3
 8006af0:	68f8      	ldr	r0, [r7, #12]
 8006af2:	f7ff fc03 	bl	80062fc <USBH_MSC_BOT_Process>
 8006af6:	4603      	mov	r3, r0
 8006af8:	75fb      	strb	r3, [r7, #23]
    if(error == USBH_OK)
 8006afa:	7dfb      	ldrb	r3, [r7, #23]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d115      	bne.n	8006b2c <USBH_MSC_SCSI_RequestSense+0xe6>
      sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 8006b00:	693b      	ldr	r3, [r7, #16]
 8006b02:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b06:	3302      	adds	r3, #2
 8006b08:	781b      	ldrb	r3, [r3, #0]
 8006b0a:	f003 030f 	and.w	r3, r3, #15
 8006b0e:	b2da      	uxtb	r2, r3
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	701a      	strb	r2, [r3, #0]
      sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 8006b14:	693b      	ldr	r3, [r7, #16]
 8006b16:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b1a:	7b1a      	ldrb	r2, [r3, #12]
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	705a      	strb	r2, [r3, #1]
      sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 8006b20:	693b      	ldr	r3, [r7, #16]
 8006b22:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b26:	7b5a      	ldrb	r2, [r3, #13]
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	709a      	strb	r2, [r3, #2]
    break;
 8006b2c:	bf00      	nop
  }

  return error;
 8006b2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b30:	4618      	mov	r0, r3
 8006b32:	3718      	adds	r7, #24
 8006b34:	46bd      	mov	sp, r7
 8006b36:	bd80      	pop	{r7, pc}

08006b38 <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                     uint8_t lun,
                                     uint32_t address,
                                     uint8_t *pbuf,
                                     uint32_t length)
{
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b086      	sub	sp, #24
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	60f8      	str	r0, [r7, #12]
 8006b40:	607a      	str	r2, [r7, #4]
 8006b42:	603b      	str	r3, [r7, #0]
 8006b44:	460b      	mov	r3, r1
 8006b46:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8006b48:	2302      	movs	r3, #2
 8006b4a:	75fb      	strb	r3, [r7, #23]

  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006b52:	69db      	ldr	r3, [r3, #28]
 8006b54:	613b      	str	r3, [r7, #16]

  switch(MSC_Handle->hbot.cmd_state)
 8006b56:	693b      	ldr	r3, [r7, #16]
 8006b58:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8006b5c:	2b01      	cmp	r3, #1
 8006b5e:	d002      	beq.n	8006b66 <USBH_MSC_SCSI_Write+0x2e>
 8006b60:	2b02      	cmp	r3, #2
 8006b62:	d047      	beq.n	8006bf4 <USBH_MSC_SCSI_Write+0xbc>
  case BOT_CMD_WAIT:
    error = USBH_MSC_BOT_Process(phost, lun);
    break;

  default:
    break;
 8006b64:	e04e      	b.n	8006c04 <USBH_MSC_SCSI_Write+0xcc>
    MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 8006b66:	693b      	ldr	r3, [r7, #16]
 8006b68:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 8006b6c:	461a      	mov	r2, r3
 8006b6e:	6a3b      	ldr	r3, [r7, #32]
 8006b70:	fb03 f202 	mul.w	r2, r3, r2
 8006b74:	693b      	ldr	r3, [r7, #16]
 8006b76:	65da      	str	r2, [r3, #92]	; 0x5c
    MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 8006b78:	693b      	ldr	r3, [r7, #16]
 8006b7a:	2200      	movs	r2, #0
 8006b7c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8006b80:	693b      	ldr	r3, [r7, #16]
 8006b82:	220a      	movs	r2, #10
 8006b84:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
    USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8006b88:	693b      	ldr	r3, [r7, #16]
 8006b8a:	3363      	adds	r3, #99	; 0x63
 8006b8c:	2210      	movs	r2, #16
 8006b8e:	2100      	movs	r1, #0
 8006b90:	4618      	mov	r0, r3
 8006b92:	f004 f81a 	bl	800abca <memset>
    MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_WRITE10;
 8006b96:	693b      	ldr	r3, [r7, #16]
 8006b98:	222a      	movs	r2, #42	; 0x2a
 8006b9a:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
    MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t*)(void *)&address)[3]);
 8006b9e:	79fa      	ldrb	r2, [r7, #7]
 8006ba0:	693b      	ldr	r3, [r7, #16]
 8006ba2:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
    MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t*)(void *)&address)[2]);
 8006ba6:	79ba      	ldrb	r2, [r7, #6]
 8006ba8:	693b      	ldr	r3, [r7, #16]
 8006baa:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
    MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t*)(void *)&address)[1]);
 8006bae:	797a      	ldrb	r2, [r7, #5]
 8006bb0:	693b      	ldr	r3, [r7, #16]
 8006bb2:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
    MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t*)(void *)&address)[0]);
 8006bb6:	1d3b      	adds	r3, r7, #4
 8006bb8:	781a      	ldrb	r2, [r3, #0]
 8006bba:	693b      	ldr	r3, [r7, #16]
 8006bbc:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 8006bc0:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8006bc4:	693b      	ldr	r3, [r7, #16]
 8006bc6:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
    MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 8006bca:	f107 0320 	add.w	r3, r7, #32
 8006bce:	781a      	ldrb	r2, [r3, #0]
 8006bd0:	693b      	ldr	r3, [r7, #16]
 8006bd2:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
    MSC_Handle->hbot.state = BOT_SEND_CBW;
 8006bd6:	693b      	ldr	r3, [r7, #16]
 8006bd8:	2201      	movs	r2, #1
 8006bda:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8006bde:	693b      	ldr	r3, [r7, #16]
 8006be0:	2202      	movs	r2, #2
 8006be2:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
    MSC_Handle->hbot.pbuf = pbuf;
 8006be6:	693b      	ldr	r3, [r7, #16]
 8006be8:	683a      	ldr	r2, [r7, #0]
 8006bea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    error = USBH_BUSY;
 8006bee:	2301      	movs	r3, #1
 8006bf0:	75fb      	strb	r3, [r7, #23]
    break;
 8006bf2:	e007      	b.n	8006c04 <USBH_MSC_SCSI_Write+0xcc>
    error = USBH_MSC_BOT_Process(phost, lun);
 8006bf4:	7afb      	ldrb	r3, [r7, #11]
 8006bf6:	4619      	mov	r1, r3
 8006bf8:	68f8      	ldr	r0, [r7, #12]
 8006bfa:	f7ff fb7f 	bl	80062fc <USBH_MSC_BOT_Process>
 8006bfe:	4603      	mov	r3, r0
 8006c00:	75fb      	strb	r3, [r7, #23]
    break;
 8006c02:	bf00      	nop
  }

  return error;
 8006c04:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c06:	4618      	mov	r0, r3
 8006c08:	3718      	adds	r7, #24
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	bd80      	pop	{r7, pc}

08006c0e <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                     uint8_t lun,
                                     uint32_t address,
                                     uint8_t *pbuf,
                                     uint32_t length)
{
 8006c0e:	b580      	push	{r7, lr}
 8006c10:	b086      	sub	sp, #24
 8006c12:	af00      	add	r7, sp, #0
 8006c14:	60f8      	str	r0, [r7, #12]
 8006c16:	607a      	str	r2, [r7, #4]
 8006c18:	603b      	str	r3, [r7, #0]
 8006c1a:	460b      	mov	r3, r1
 8006c1c:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8006c1e:	2302      	movs	r3, #2
 8006c20:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006c28:	69db      	ldr	r3, [r3, #28]
 8006c2a:	613b      	str	r3, [r7, #16]

  switch(MSC_Handle->hbot.cmd_state)
 8006c2c:	693b      	ldr	r3, [r7, #16]
 8006c2e:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8006c32:	2b01      	cmp	r3, #1
 8006c34:	d002      	beq.n	8006c3c <USBH_MSC_SCSI_Read+0x2e>
 8006c36:	2b02      	cmp	r3, #2
 8006c38:	d047      	beq.n	8006cca <USBH_MSC_SCSI_Read+0xbc>
  case BOT_CMD_WAIT:
    error = USBH_MSC_BOT_Process(phost, lun);
    break;

  default:
    break;
 8006c3a:	e04e      	b.n	8006cda <USBH_MSC_SCSI_Read+0xcc>
    MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 8006c3c:	693b      	ldr	r3, [r7, #16]
 8006c3e:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 8006c42:	461a      	mov	r2, r3
 8006c44:	6a3b      	ldr	r3, [r7, #32]
 8006c46:	fb03 f202 	mul.w	r2, r3, r2
 8006c4a:	693b      	ldr	r3, [r7, #16]
 8006c4c:	65da      	str	r2, [r3, #92]	; 0x5c
    MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8006c4e:	693b      	ldr	r3, [r7, #16]
 8006c50:	2280      	movs	r2, #128	; 0x80
 8006c52:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8006c56:	693b      	ldr	r3, [r7, #16]
 8006c58:	220a      	movs	r2, #10
 8006c5a:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
    USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8006c5e:	693b      	ldr	r3, [r7, #16]
 8006c60:	3363      	adds	r3, #99	; 0x63
 8006c62:	2210      	movs	r2, #16
 8006c64:	2100      	movs	r1, #0
 8006c66:	4618      	mov	r0, r3
 8006c68:	f003 ffaf 	bl	800abca <memset>
    MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ10;
 8006c6c:	693b      	ldr	r3, [r7, #16]
 8006c6e:	2228      	movs	r2, #40	; 0x28
 8006c70:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
    MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t*)(void *)&address)[3]);
 8006c74:	79fa      	ldrb	r2, [r7, #7]
 8006c76:	693b      	ldr	r3, [r7, #16]
 8006c78:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
    MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t*)(void *)&address)[2]);
 8006c7c:	79ba      	ldrb	r2, [r7, #6]
 8006c7e:	693b      	ldr	r3, [r7, #16]
 8006c80:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
    MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t*)(void *)&address)[1]);
 8006c84:	797a      	ldrb	r2, [r7, #5]
 8006c86:	693b      	ldr	r3, [r7, #16]
 8006c88:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
    MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t*)(void *)&address)[0]);
 8006c8c:	1d3b      	adds	r3, r7, #4
 8006c8e:	781a      	ldrb	r2, [r3, #0]
 8006c90:	693b      	ldr	r3, [r7, #16]
 8006c92:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 8006c96:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8006c9a:	693b      	ldr	r3, [r7, #16]
 8006c9c:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
    MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 8006ca0:	f107 0320 	add.w	r3, r7, #32
 8006ca4:	781a      	ldrb	r2, [r3, #0]
 8006ca6:	693b      	ldr	r3, [r7, #16]
 8006ca8:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
    MSC_Handle->hbot.state = BOT_SEND_CBW;
 8006cac:	693b      	ldr	r3, [r7, #16]
 8006cae:	2201      	movs	r2, #1
 8006cb0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8006cb4:	693b      	ldr	r3, [r7, #16]
 8006cb6:	2202      	movs	r2, #2
 8006cb8:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
    MSC_Handle->hbot.pbuf = pbuf;
 8006cbc:	693b      	ldr	r3, [r7, #16]
 8006cbe:	683a      	ldr	r2, [r7, #0]
 8006cc0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    error = USBH_BUSY;
 8006cc4:	2301      	movs	r3, #1
 8006cc6:	75fb      	strb	r3, [r7, #23]
    break;
 8006cc8:	e007      	b.n	8006cda <USBH_MSC_SCSI_Read+0xcc>
    error = USBH_MSC_BOT_Process(phost, lun);
 8006cca:	7afb      	ldrb	r3, [r7, #11]
 8006ccc:	4619      	mov	r1, r3
 8006cce:	68f8      	ldr	r0, [r7, #12]
 8006cd0:	f7ff fb14 	bl	80062fc <USBH_MSC_BOT_Process>
 8006cd4:	4603      	mov	r3, r0
 8006cd6:	75fb      	strb	r3, [r7, #23]
    break;
 8006cd8:	bf00      	nop
  }

  return error;
 8006cda:	7dfb      	ldrb	r3, [r7, #23]
}
 8006cdc:	4618      	mov	r0, r3
 8006cde:	3718      	adds	r7, #24
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	bd80      	pop	{r7, pc}

08006ce4 <USBH_Init>:
  * @param  phost: Host Handle
  * @param  pUsrFunc: User Callback
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost, void (*pUsrFunc)(USBH_HandleTypeDef *phost, uint8_t id), uint8_t id)
{
 8006ce4:	b580      	push	{r7, lr}
 8006ce6:	b084      	sub	sp, #16
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	60f8      	str	r0, [r7, #12]
 8006cec:	60b9      	str	r1, [r7, #8]
 8006cee:	4613      	mov	r3, r2
 8006cf0:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(phost == NULL)
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d101      	bne.n	8006cfc <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8006cf8:	2302      	movs	r3, #2
 8006cfa:	e019      	b.n	8006d30 <USBH_Init+0x4c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	79fa      	ldrb	r2, [r7, #7]
 8006d00:	f883 23c0 	strb.w	r2, [r3, #960]	; 0x3c0

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	2200      	movs	r2, #0
 8006d08:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
  phost->ClassNumber = 0U;
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	2200      	movs	r2, #0
 8006d10:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8006d14:	68f8      	ldr	r0, [r7, #12]
 8006d16:	f000 f80f 	bl	8006d38 <DeInitStateMachine>

  /* Assign User process */
  if(pUsrFunc != NULL)
 8006d1a:	68bb      	ldr	r3, [r7, #8]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d003      	beq.n	8006d28 <USBH_Init+0x44>
  {
    phost->pUser = pUsrFunc;
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	68ba      	ldr	r2, [r7, #8]
 8006d24:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8006d28:	68f8      	ldr	r0, [r7, #12]
 8006d2a:	f003 fce1 	bl	800a6f0 <USBH_LL_Init>

  return USBH_OK;
 8006d2e:	2300      	movs	r3, #0
}
 8006d30:	4618      	mov	r0, r3
 8006d32:	3710      	adds	r7, #16
 8006d34:	46bd      	mov	sp, r7
 8006d36:	bd80      	pop	{r7, pc}

08006d38 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef  DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8006d38:	b480      	push	{r7}
 8006d3a:	b085      	sub	sp, #20
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8006d40:	2300      	movs	r3, #0
 8006d42:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 8006d44:	e008      	b.n	8006d58 <DeInitStateMachine+0x20>
  {
    phost->Pipes[i] = 0U;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	68fa      	ldr	r2, [r7, #12]
 8006d4a:	32e0      	adds	r2, #224	; 0xe0
 8006d4c:	2100      	movs	r1, #0
 8006d4e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	3301      	adds	r3, #1
 8006d56:	60fb      	str	r3, [r7, #12]
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	2b0e      	cmp	r3, #14
 8006d5c:	d9f3      	bls.n	8006d46 <DeInitStateMachine+0xe>
  }

  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 8006d5e:	2300      	movs	r3, #0
 8006d60:	60fb      	str	r3, [r7, #12]
 8006d62:	e009      	b.n	8006d78 <DeInitStateMachine+0x40>
  {
    phost->device.Data[i] = 0U;
 8006d64:	687a      	ldr	r2, [r7, #4]
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	4413      	add	r3, r2
 8006d6a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006d6e:	2200      	movs	r2, #0
 8006d70:	701a      	strb	r2, [r3, #0]
  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	3301      	adds	r3, #1
 8006d76:	60fb      	str	r3, [r7, #12]
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d7e:	d3f1      	bcc.n	8006d64 <DeInitStateMachine+0x2c>
  }

  phost->gState = HOST_IDLE;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2200      	movs	r2, #0
 8006d84:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	2200      	movs	r2, #0
 8006d8a:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	2201      	movs	r2, #1
 8006d90:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	2200      	movs	r2, #0
 8006d96:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc

  phost->Control.state = CTRL_SETUP;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	2201      	movs	r2, #1
 8006d9e:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2240      	movs	r2, #64	; 0x40
 8006da4:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	2200      	movs	r2, #0
 8006daa:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	2200      	movs	r2, #0
 8006db0:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed   = USBH_SPEED_FULL;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	2201      	movs	r2, #1
 8006db8:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

  return USBH_OK;
 8006dbc:	2300      	movs	r3, #0
}
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	3714      	adds	r7, #20
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc8:	4770      	bx	lr

08006dca <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8006dca:	b480      	push	{r7}
 8006dcc:	b085      	sub	sp, #20
 8006dce:	af00      	add	r7, sp, #0
 8006dd0:	6078      	str	r0, [r7, #4]
 8006dd2:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef   status = USBH_OK;
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	73fb      	strb	r3, [r7, #15]

  if(pclass != 0)
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d017      	beq.n	8006e0e <USBH_RegisterClass+0x44>
  {
    if(phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d10f      	bne.n	8006e08 <USBH_RegisterClass+0x3e>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006dee:	1c59      	adds	r1, r3, #1
 8006df0:	687a      	ldr	r2, [r7, #4]
 8006df2:	f8c2 137c 	str.w	r1, [r2, #892]	; 0x37c
 8006df6:	687a      	ldr	r2, [r7, #4]
 8006df8:	33dc      	adds	r3, #220	; 0xdc
 8006dfa:	009b      	lsls	r3, r3, #2
 8006dfc:	4413      	add	r3, r2
 8006dfe:	683a      	ldr	r2, [r7, #0]
 8006e00:	605a      	str	r2, [r3, #4]
      status = USBH_OK;
 8006e02:	2300      	movs	r3, #0
 8006e04:	73fb      	strb	r3, [r7, #15]
 8006e06:	e004      	b.n	8006e12 <USBH_RegisterClass+0x48>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8006e08:	2302      	movs	r3, #2
 8006e0a:	73fb      	strb	r3, [r7, #15]
 8006e0c:	e001      	b.n	8006e12 <USBH_RegisterClass+0x48>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8006e0e:	2302      	movs	r3, #2
 8006e10:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006e12:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e14:	4618      	mov	r0, r3
 8006e16:	3714      	adds	r7, #20
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1e:	4770      	bx	lr

08006e20 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8006e20:	b480      	push	{r7}
 8006e22:	b085      	sub	sp, #20
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
 8006e28:	460b      	mov	r3, r1
 8006e2a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_OK;
 8006e2c:	2300      	movs	r3, #0
 8006e2e:	73fb      	strb	r3, [r7, #15]

  if(interface < phost->device.CfgDesc.bNumInterfaces)
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	f893 3338 	ldrb.w	r3, [r3, #824]	; 0x338
 8006e36:	78fa      	ldrb	r2, [r7, #3]
 8006e38:	429a      	cmp	r2, r3
 8006e3a:	d204      	bcs.n	8006e46 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	78fa      	ldrb	r2, [r7, #3]
 8006e40:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
 8006e44:	e001      	b.n	8006e4a <USBH_SelectInterface+0x2a>
    USBH_UsrLog ("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol );
  }
  else
  {
    USBH_ErrLog ("Cannot Select This Interface.");
    status = USBH_FAIL;
 8006e46:	2302      	movs	r3, #2
 8006e48:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8006e4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	3714      	adds	r7, #20
 8006e50:	46bd      	mov	sp, r7
 8006e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e56:	4770      	bx	lr

08006e58 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8006e58:	b480      	push	{r7}
 8006e5a:	b087      	sub	sp, #28
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
 8006e60:	4608      	mov	r0, r1
 8006e62:	4611      	mov	r1, r2
 8006e64:	461a      	mov	r2, r3
 8006e66:	4603      	mov	r3, r0
 8006e68:	70fb      	strb	r3, [r7, #3]
 8006e6a:	460b      	mov	r3, r1
 8006e6c:	70bb      	strb	r3, [r7, #2]
 8006e6e:	4613      	mov	r3, r2
 8006e70:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_CfgDescTypeDef          *pcfg ;
  uint8_t                        if_ix = 0U;
 8006e72:	2300      	movs	r3, #0
 8006e74:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8006e76:	2300      	movs	r3, #0
 8006e78:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	f503 734d 	add.w	r3, r3, #820	; 0x334
 8006e80:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006e82:	e025      	b.n	8006ed0 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8006e84:	7dfb      	ldrb	r3, [r7, #23]
 8006e86:	221a      	movs	r2, #26
 8006e88:	fb02 f303 	mul.w	r3, r2, r3
 8006e8c:	3308      	adds	r3, #8
 8006e8e:	68fa      	ldr	r2, [r7, #12]
 8006e90:	4413      	add	r3, r2
 8006e92:	3302      	adds	r3, #2
 8006e94:	613b      	str	r3, [r7, #16]
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 8006e96:	693b      	ldr	r3, [r7, #16]
 8006e98:	795b      	ldrb	r3, [r3, #5]
 8006e9a:	78fa      	ldrb	r2, [r7, #3]
 8006e9c:	429a      	cmp	r2, r3
 8006e9e:	d002      	beq.n	8006ea6 <USBH_FindInterface+0x4e>
 8006ea0:	78fb      	ldrb	r3, [r7, #3]
 8006ea2:	2bff      	cmp	r3, #255	; 0xff
 8006ea4:	d111      	bne.n	8006eca <USBH_FindInterface+0x72>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 8006ea6:	693b      	ldr	r3, [r7, #16]
 8006ea8:	799b      	ldrb	r3, [r3, #6]
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 8006eaa:	78ba      	ldrb	r2, [r7, #2]
 8006eac:	429a      	cmp	r2, r3
 8006eae:	d002      	beq.n	8006eb6 <USBH_FindInterface+0x5e>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 8006eb0:	78bb      	ldrb	r3, [r7, #2]
 8006eb2:	2bff      	cmp	r3, #255	; 0xff
 8006eb4:	d109      	bne.n	8006eca <USBH_FindInterface+0x72>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006eb6:	693b      	ldr	r3, [r7, #16]
 8006eb8:	79db      	ldrb	r3, [r3, #7]
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 8006eba:	787a      	ldrb	r2, [r7, #1]
 8006ebc:	429a      	cmp	r2, r3
 8006ebe:	d002      	beq.n	8006ec6 <USBH_FindInterface+0x6e>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006ec0:	787b      	ldrb	r3, [r7, #1]
 8006ec2:	2bff      	cmp	r3, #255	; 0xff
 8006ec4:	d101      	bne.n	8006eca <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8006ec6:	7dfb      	ldrb	r3, [r7, #23]
 8006ec8:	e006      	b.n	8006ed8 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8006eca:	7dfb      	ldrb	r3, [r7, #23]
 8006ecc:	3301      	adds	r3, #1
 8006ece:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006ed0:	7dfb      	ldrb	r3, [r7, #23]
 8006ed2:	2b01      	cmp	r3, #1
 8006ed4:	d9d6      	bls.n	8006e84 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8006ed6:	23ff      	movs	r3, #255	; 0xff
}
 8006ed8:	4618      	mov	r0, r3
 8006eda:	371c      	adds	r7, #28
 8006edc:	46bd      	mov	sp, r7
 8006ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee2:	4770      	bx	lr

08006ee4 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start  (USBH_HandleTypeDef *phost)
{
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	b082      	sub	sp, #8
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8006eec:	6878      	ldr	r0, [r7, #4]
 8006eee:	f003 fc3b 	bl	800a768 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS (phost, TRUE);
 8006ef2:	2101      	movs	r1, #1
 8006ef4:	6878      	ldr	r0, [r7, #4]
 8006ef6:	f003 fd52 	bl	800a99e <USBH_LL_DriverVBUS>

  return USBH_OK;
 8006efa:	2300      	movs	r3, #0
}
 8006efc:	4618      	mov	r0, r3
 8006efe:	3708      	adds	r7, #8
 8006f00:	46bd      	mov	sp, r7
 8006f02:	bd80      	pop	{r7, pc}

08006f04 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8006f04:	b580      	push	{r7, lr}
 8006f06:	b088      	sub	sp, #32
 8006f08:	af04      	add	r7, sp, #16
 8006f0a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8006f0c:	2302      	movs	r3, #2
 8006f0e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8006f10:	2300      	movs	r3, #0
 8006f12:	73fb      	strb	r3, [r7, #15]

  /* check for Host port events */
  if (((USBH_IsPortEnabled(phost) == 0U)) && (phost->gState != HOST_IDLE))
 8006f14:	6878      	ldr	r0, [r7, #4]
 8006f16:	f000 faec 	bl	80074f2 <USBH_IsPortEnabled>
 8006f1a:	4603      	mov	r3, r0
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d10c      	bne.n	8006f3a <USBH_Process+0x36>
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	781b      	ldrb	r3, [r3, #0]
 8006f24:	b2db      	uxtb	r3, r3
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d007      	beq.n	8006f3a <USBH_Process+0x36>
  {
    if(phost->gState != HOST_DEV_DISCONNECTED)
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	781b      	ldrb	r3, [r3, #0]
 8006f2e:	b2db      	uxtb	r3, r3
 8006f30:	2b03      	cmp	r3, #3
 8006f32:	d002      	beq.n	8006f3a <USBH_Process+0x36>
    {
      phost->gState = HOST_DEV_DISCONNECTED;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	2203      	movs	r2, #3
 8006f38:	701a      	strb	r2, [r3, #0]
    }
  }

  switch (phost->gState)
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	781b      	ldrb	r3, [r3, #0]
 8006f3e:	b2db      	uxtb	r3, r3
 8006f40:	2b0b      	cmp	r3, #11
 8006f42:	f200 814c 	bhi.w	80071de <USBH_Process+0x2da>
 8006f46:	a201      	add	r2, pc, #4	; (adr r2, 8006f4c <USBH_Process+0x48>)
 8006f48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f4c:	08006f7d 	.word	0x08006f7d
 8006f50:	08006f9f 	.word	0x08006f9f
 8006f54:	08006fb3 	.word	0x08006fb3
 8006f58:	080071b9 	.word	0x080071b9
 8006f5c:	080071df 	.word	0x080071df
 8006f60:	08007041 	.word	0x08007041
 8006f64:	0800716f 	.word	0x0800716f
 8006f68:	08007071 	.word	0x08007071
 8006f6c:	08007091 	.word	0x08007091
 8006f70:	080070b1 	.word	0x080070b1
 8006f74:	080070df 	.word	0x080070df
 8006f78:	080071a1 	.word	0x080071a1
  {
  case HOST_IDLE :

    if (phost->device.is_connected)
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006f82:	b2db      	uxtb	r3, r3
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	f000 812c 	beq.w	80071e2 <USBH_Process+0x2de>
    {
      /* Wait for 200 ms after connection */
      phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	2201      	movs	r2, #1
 8006f8e:	701a      	strb	r2, [r3, #0]
      USBH_Delay(200U);
 8006f90:	20c8      	movs	r0, #200	; 0xc8
 8006f92:	f003 fd81 	bl	800aa98 <USBH_Delay>
      USBH_LL_ResetPort(phost);
 8006f96:	6878      	ldr	r0, [r7, #4]
 8006f98:	f003 fc41 	bl	800a81e <USBH_LL_ResetPort>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 8006f9c:	e121      	b.n	80071e2 <USBH_Process+0x2de>

  case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Eabled */

    if (phost->device.PortEnabled == 1U)
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006fa4:	2b01      	cmp	r3, #1
 8006fa6:	f040 811e 	bne.w	80071e6 <USBH_Process+0x2e2>
    {
      phost->gState = HOST_DEV_ATTACHED;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	2202      	movs	r2, #2
 8006fae:	701a      	strb	r2, [r3, #0]
    }
    break;
 8006fb0:	e119      	b.n	80071e6 <USBH_Process+0x2e2>
  case HOST_DEV_ATTACHED :

    USBH_UsrLog("USB Device Attached");

    /* Wait for 100 ms after Reset */
    USBH_Delay(100U);
 8006fb2:	2064      	movs	r0, #100	; 0x64
 8006fb4:	f003 fd70 	bl	800aa98 <USBH_Delay>

    phost->device.speed = USBH_LL_GetSpeed(phost);
 8006fb8:	6878      	ldr	r0, [r7, #4]
 8006fba:	f003 fc0b 	bl	800a7d4 <USBH_LL_GetSpeed>
 8006fbe:	4603      	mov	r3, r0
 8006fc0:	461a      	mov	r2, r3
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

    phost->gState = HOST_ENUMERATION;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	2205      	movs	r2, #5
 8006fcc:	701a      	strb	r2, [r3, #0]

    phost->Control.pipe_out = USBH_AllocPipe (phost, 0x00U);
 8006fce:	2100      	movs	r1, #0
 8006fd0:	6878      	ldr	r0, [r7, #4]
 8006fd2:	f001 f868 	bl	80080a6 <USBH_AllocPipe>
 8006fd6:	4603      	mov	r3, r0
 8006fd8:	461a      	mov	r2, r3
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	715a      	strb	r2, [r3, #5]
    phost->Control.pipe_in  = USBH_AllocPipe (phost, 0x80U);
 8006fde:	2180      	movs	r1, #128	; 0x80
 8006fe0:	6878      	ldr	r0, [r7, #4]
 8006fe2:	f001 f860 	bl	80080a6 <USBH_AllocPipe>
 8006fe6:	4603      	mov	r3, r0
 8006fe8:	461a      	mov	r2, r3
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	711a      	strb	r2, [r3, #4]


    /* Open Control pipes */
    USBH_OpenPipe (phost,
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	7919      	ldrb	r1, [r3, #4]
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                   phost->Control.pipe_in,
                   0x80U,
                   phost->device.address,
                   phost->device.speed,
                   USBH_EP_CONTROL,
                   (uint16_t)phost->Control.pipe_size);
 8006ffe:	687a      	ldr	r2, [r7, #4]
 8007000:	7992      	ldrb	r2, [r2, #6]
    USBH_OpenPipe (phost,
 8007002:	b292      	uxth	r2, r2
 8007004:	9202      	str	r2, [sp, #8]
 8007006:	2200      	movs	r2, #0
 8007008:	9201      	str	r2, [sp, #4]
 800700a:	9300      	str	r3, [sp, #0]
 800700c:	4603      	mov	r3, r0
 800700e:	2280      	movs	r2, #128	; 0x80
 8007010:	6878      	ldr	r0, [r7, #4]
 8007012:	f001 f819 	bl	8008048 <USBH_OpenPipe>

    /* Open Control pipes */
    USBH_OpenPipe (phost,
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	7959      	ldrb	r1, [r3, #5]
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                   phost->Control.pipe_out,
                   0x00U,
                   phost->device.address,
                   phost->device.speed,
                   USBH_EP_CONTROL,
                   (uint16_t)phost->Control.pipe_size);
 8007026:	687a      	ldr	r2, [r7, #4]
 8007028:	7992      	ldrb	r2, [r2, #6]
    USBH_OpenPipe (phost,
 800702a:	b292      	uxth	r2, r2
 800702c:	9202      	str	r2, [sp, #8]
 800702e:	2200      	movs	r2, #0
 8007030:	9201      	str	r2, [sp, #4]
 8007032:	9300      	str	r3, [sp, #0]
 8007034:	4603      	mov	r3, r0
 8007036:	2200      	movs	r2, #0
 8007038:	6878      	ldr	r0, [r7, #4]
 800703a:	f001 f805 	bl	8008048 <USBH_OpenPipe>
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 800703e:	e0e3      	b.n	8007208 <USBH_Process+0x304>

  case HOST_ENUMERATION:
    /* Check for enumeration status */
    if ( USBH_HandleEnum(phost) == USBH_OK)
 8007040:	6878      	ldr	r0, [r7, #4]
 8007042:	f000 f8e7 	bl	8007214 <USBH_HandleEnum>
 8007046:	4603      	mov	r3, r0
 8007048:	2b00      	cmp	r3, #0
 800704a:	f040 80ce 	bne.w	80071ea <USBH_Process+0x2e6>
    {
      /* The function shall return USBH_OK when full enumeration is complete */
      USBH_UsrLog ("Enumeration done.");
      phost->device.current_interface = 0U;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	2200      	movs	r2, #0
 8007052:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
      if(phost->device.DevDesc.bNumConfigurations == 1U)
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	f893 3333 	ldrb.w	r3, [r3, #819]	; 0x333
 800705c:	2b01      	cmp	r3, #1
 800705e:	d103      	bne.n	8007068 <USBH_Process+0x164>
      {
        USBH_UsrLog ("This device has only 1 configuration.");
        phost->gState  = HOST_SET_CONFIGURATION;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	2208      	movs	r2, #8
 8007064:	701a      	strb	r2, [r3, #0]
      {
        phost->gState  = HOST_INPUT;
      }

    }
    break;
 8007066:	e0c0      	b.n	80071ea <USBH_Process+0x2e6>
        phost->gState  = HOST_INPUT;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	2207      	movs	r2, #7
 800706c:	701a      	strb	r2, [r3, #0]
    break;
 800706e:	e0bc      	b.n	80071ea <USBH_Process+0x2e6>

  case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if(phost->pUser != NULL)
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007076:	2b00      	cmp	r3, #0
 8007078:	f000 80b9 	beq.w	80071ee <USBH_Process+0x2ea>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007082:	2101      	movs	r1, #1
 8007084:	6878      	ldr	r0, [r7, #4]
 8007086:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	2208      	movs	r2, #8
 800708c:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800708e:	e0ae      	b.n	80071ee <USBH_Process+0x2ea>

  case HOST_SET_CONFIGURATION:
    /* set configuration */
    if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	f893 3339 	ldrb.w	r3, [r3, #825]	; 0x339
 8007096:	b29b      	uxth	r3, r3
 8007098:	4619      	mov	r1, r3
 800709a:	6878      	ldr	r0, [r7, #4]
 800709c:	f000 fb59 	bl	8007752 <USBH_SetCfg>
 80070a0:	4603      	mov	r3, r0
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	f040 80a5 	bne.w	80071f2 <USBH_Process+0x2ee>
    {
      phost->gState  = HOST_SET_WAKEUP_FEATURE;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	2209      	movs	r2, #9
 80070ac:	701a      	strb	r2, [r3, #0]
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 80070ae:	e0a0      	b.n	80071f2 <USBH_Process+0x2ee>

  case  HOST_SET_WAKEUP_FEATURE:

    if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	f893 333b 	ldrb.w	r3, [r3, #827]	; 0x33b
 80070b6:	f003 0320 	and.w	r3, r3, #32
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d00b      	beq.n	80070d6 <USBH_Process+0x1d2>
    {
      if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 80070be:	2101      	movs	r1, #1
 80070c0:	6878      	ldr	r0, [r7, #4]
 80070c2:	f000 fb69 	bl	8007798 <USBH_SetFeature>
 80070c6:	4603      	mov	r3, r0
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	f040 8094 	bne.w	80071f6 <USBH_Process+0x2f2>
      {
        USBH_UsrLog ("Device remote wakeup enabled");
        phost->gState  = HOST_CHECK_CLASS;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	220a      	movs	r2, #10
 80070d2:	701a      	strb	r2, [r3, #0]
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 80070d4:	e08f      	b.n	80071f6 <USBH_Process+0x2f2>
      phost->gState  = HOST_CHECK_CLASS;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	220a      	movs	r2, #10
 80070da:	701a      	strb	r2, [r3, #0]
    break;
 80070dc:	e08b      	b.n	80071f6 <USBH_Process+0x2f2>

  case HOST_CHECK_CLASS:

    if(phost->ClassNumber == 0U)
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	f000 8088 	beq.w	80071fa <USBH_Process+0x2f6>
    {
      USBH_UsrLog ("No Class has been registered.");
    }
    else
    {
      phost->pActiveClass = NULL;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	2200      	movs	r2, #0
 80070ee:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378

      for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80070f2:	2300      	movs	r3, #0
 80070f4:	73fb      	strb	r3, [r7, #15]
 80070f6:	e017      	b.n	8007128 <USBH_Process+0x224>
      {
        if(phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 80070f8:	7bfb      	ldrb	r3, [r7, #15]
 80070fa:	687a      	ldr	r2, [r7, #4]
 80070fc:	33dc      	adds	r3, #220	; 0xdc
 80070fe:	009b      	lsls	r3, r3, #2
 8007100:	4413      	add	r3, r2
 8007102:	685b      	ldr	r3, [r3, #4]
 8007104:	791a      	ldrb	r2, [r3, #4]
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	f893 3343 	ldrb.w	r3, [r3, #835]	; 0x343
 800710c:	429a      	cmp	r2, r3
 800710e:	d108      	bne.n	8007122 <USBH_Process+0x21e>
        {
          phost->pActiveClass = phost->pClass[idx];
 8007110:	7bfb      	ldrb	r3, [r7, #15]
 8007112:	687a      	ldr	r2, [r7, #4]
 8007114:	33dc      	adds	r3, #220	; 0xdc
 8007116:	009b      	lsls	r3, r3, #2
 8007118:	4413      	add	r3, r2
 800711a:	685a      	ldr	r2, [r3, #4]
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
      for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007122:	7bfb      	ldrb	r3, [r7, #15]
 8007124:	3301      	adds	r3, #1
 8007126:	73fb      	strb	r3, [r7, #15]
 8007128:	7bfb      	ldrb	r3, [r7, #15]
 800712a:	2b00      	cmp	r3, #0
 800712c:	d0e4      	beq.n	80070f8 <USBH_Process+0x1f4>
        }
      }

      if(phost->pActiveClass != NULL)
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8007134:	2b00      	cmp	r3, #0
 8007136:	d016      	beq.n	8007166 <USBH_Process+0x262>
      {
        if(phost->pActiveClass->Init(phost)== USBH_OK)
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800713e:	689b      	ldr	r3, [r3, #8]
 8007140:	6878      	ldr	r0, [r7, #4]
 8007142:	4798      	blx	r3
 8007144:	4603      	mov	r3, r0
 8007146:	2b00      	cmp	r3, #0
 8007148:	d109      	bne.n	800715e <USBH_Process+0x25a>
        {
          phost->gState  = HOST_CLASS_REQUEST;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	2206      	movs	r2, #6
 800714e:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog ("%s class started.", phost->pActiveClass->Name);

          /* Inform user that a class has been activated */
          phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007156:	2103      	movs	r1, #3
 8007158:	6878      	ldr	r0, [r7, #4]
 800715a:	4798      	blx	r3
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 800715c:	e04d      	b.n	80071fa <USBH_Process+0x2f6>
          phost->gState  = HOST_ABORT_STATE;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	220d      	movs	r2, #13
 8007162:	701a      	strb	r2, [r3, #0]
    break;
 8007164:	e049      	b.n	80071fa <USBH_Process+0x2f6>
        phost->gState  = HOST_ABORT_STATE;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	220d      	movs	r2, #13
 800716a:	701a      	strb	r2, [r3, #0]
    break;
 800716c:	e045      	b.n	80071fa <USBH_Process+0x2f6>

  case HOST_CLASS_REQUEST:
    /* process class standard control requests state machine */
    if(phost->pActiveClass != NULL)
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8007174:	2b00      	cmp	r3, #0
 8007176:	d00f      	beq.n	8007198 <USBH_Process+0x294>
    {
      status = phost->pActiveClass->Requests(phost);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800717e:	691b      	ldr	r3, [r3, #16]
 8007180:	6878      	ldr	r0, [r7, #4]
 8007182:	4798      	blx	r3
 8007184:	4603      	mov	r3, r0
 8007186:	73bb      	strb	r3, [r7, #14]

      if(status == USBH_OK)
 8007188:	7bbb      	ldrb	r3, [r7, #14]
 800718a:	b2db      	uxtb	r3, r3
 800718c:	2b00      	cmp	r3, #0
 800718e:	d136      	bne.n	80071fe <USBH_Process+0x2fa>
      {
        phost->gState  = HOST_CLASS;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	220b      	movs	r2, #11
 8007194:	701a      	strb	r2, [r3, #0]
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }

    break;
 8007196:	e032      	b.n	80071fe <USBH_Process+0x2fa>
      phost->gState  = HOST_ABORT_STATE;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	220d      	movs	r2, #13
 800719c:	701a      	strb	r2, [r3, #0]
    break;
 800719e:	e02e      	b.n	80071fe <USBH_Process+0x2fa>
  case HOST_CLASS:
    /* process class state machine */
    if(phost->pActiveClass != NULL)
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d02b      	beq.n	8007202 <USBH_Process+0x2fe>
    {
      phost->pActiveClass->BgndProcess(phost);
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80071b0:	695b      	ldr	r3, [r3, #20]
 80071b2:	6878      	ldr	r0, [r7, #4]
 80071b4:	4798      	blx	r3
    }
    break;
 80071b6:	e024      	b.n	8007202 <USBH_Process+0x2fe>

  case HOST_DEV_DISCONNECTED :

    DeInitStateMachine(phost);
 80071b8:	6878      	ldr	r0, [r7, #4]
 80071ba:	f7ff fdbd 	bl	8006d38 <DeInitStateMachine>

    /* Re-Initilaize Host for new Enumeration */
    if(phost->pActiveClass != NULL)
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d01e      	beq.n	8007206 <USBH_Process+0x302>
    {
      phost->pActiveClass->DeInit(phost);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80071ce:	68db      	ldr	r3, [r3, #12]
 80071d0:	6878      	ldr	r0, [r7, #4]
 80071d2:	4798      	blx	r3
      phost->pActiveClass = NULL;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2200      	movs	r2, #0
 80071d8:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
    }
    break;
 80071dc:	e013      	b.n	8007206 <USBH_Process+0x302>

  case HOST_ABORT_STATE:
  default :
    break;
 80071de:	bf00      	nop
 80071e0:	e012      	b.n	8007208 <USBH_Process+0x304>
    break;
 80071e2:	bf00      	nop
 80071e4:	e010      	b.n	8007208 <USBH_Process+0x304>
    break;
 80071e6:	bf00      	nop
 80071e8:	e00e      	b.n	8007208 <USBH_Process+0x304>
    break;
 80071ea:	bf00      	nop
 80071ec:	e00c      	b.n	8007208 <USBH_Process+0x304>
    break;
 80071ee:	bf00      	nop
 80071f0:	e00a      	b.n	8007208 <USBH_Process+0x304>
    break;
 80071f2:	bf00      	nop
 80071f4:	e008      	b.n	8007208 <USBH_Process+0x304>
    break;
 80071f6:	bf00      	nop
 80071f8:	e006      	b.n	8007208 <USBH_Process+0x304>
    break;
 80071fa:	bf00      	nop
 80071fc:	e004      	b.n	8007208 <USBH_Process+0x304>
    break;
 80071fe:	bf00      	nop
 8007200:	e002      	b.n	8007208 <USBH_Process+0x304>
    break;
 8007202:	bf00      	nop
 8007204:	e000      	b.n	8007208 <USBH_Process+0x304>
    break;
 8007206:	bf00      	nop
  }
 return USBH_OK;
 8007208:	2300      	movs	r3, #0
}
 800720a:	4618      	mov	r0, r3
 800720c:	3710      	adds	r7, #16
 800720e:	46bd      	mov	sp, r7
 8007210:	bd80      	pop	{r7, pc}
 8007212:	bf00      	nop

08007214 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum (USBH_HandleTypeDef *phost)
{
 8007214:	b580      	push	{r7, lr}
 8007216:	b088      	sub	sp, #32
 8007218:	af04      	add	r7, sp, #16
 800721a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800721c:	2301      	movs	r3, #1
 800721e:	73fb      	strb	r3, [r7, #15]

  switch (phost->EnumState)
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	785b      	ldrb	r3, [r3, #1]
 8007224:	2b07      	cmp	r3, #7
 8007226:	f200 80f8 	bhi.w	800741a <USBH_HandleEnum+0x206>
 800722a:	a201      	add	r2, pc, #4	; (adr r2, 8007230 <USBH_HandleEnum+0x1c>)
 800722c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007230:	08007251 	.word	0x08007251
 8007234:	080072c3 	.word	0x080072c3
 8007238:	080072db 	.word	0x080072db
 800723c:	08007351 	.word	0x08007351
 8007240:	08007367 	.word	0x08007367
 8007244:	08007383 	.word	0x08007383
 8007248:	080073b7 	.word	0x080073b7
 800724c:	080073eb 	.word	0x080073eb
  {
  case ENUM_IDLE:
    /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
    if ( USBH_Get_DevDesc(phost, 8U) == USBH_OK)
 8007250:	2108      	movs	r1, #8
 8007252:	6878      	ldr	r0, [r7, #4]
 8007254:	f000 f9ad 	bl	80075b2 <USBH_Get_DevDesc>
 8007258:	4603      	mov	r3, r0
 800725a:	2b00      	cmp	r3, #0
 800725c:	f040 80df 	bne.w	800741e <USBH_HandleEnum+0x20a>
    {
      phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	f893 2329 	ldrb.w	r2, [r3, #809]	; 0x329
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	719a      	strb	r2, [r3, #6]

      phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	2201      	movs	r2, #1
 800726e:	705a      	strb	r2, [r3, #1]

      /* modify control channels configuration for MaxPacket size */
      USBH_OpenPipe (phost,
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	7919      	ldrb	r1, [r3, #4]
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_in,
                           0x80U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 8007280:	687a      	ldr	r2, [r7, #4]
 8007282:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 8007284:	b292      	uxth	r2, r2
 8007286:	9202      	str	r2, [sp, #8]
 8007288:	2200      	movs	r2, #0
 800728a:	9201      	str	r2, [sp, #4]
 800728c:	9300      	str	r3, [sp, #0]
 800728e:	4603      	mov	r3, r0
 8007290:	2280      	movs	r2, #128	; 0x80
 8007292:	6878      	ldr	r0, [r7, #4]
 8007294:	f000 fed8 	bl	8008048 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe (phost,
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	7959      	ldrb	r1, [r3, #5]
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_out,
                           0x00U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 80072a8:	687a      	ldr	r2, [r7, #4]
 80072aa:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 80072ac:	b292      	uxth	r2, r2
 80072ae:	9202      	str	r2, [sp, #8]
 80072b0:	2200      	movs	r2, #0
 80072b2:	9201      	str	r2, [sp, #4]
 80072b4:	9300      	str	r3, [sp, #0]
 80072b6:	4603      	mov	r3, r0
 80072b8:	2200      	movs	r2, #0
 80072ba:	6878      	ldr	r0, [r7, #4]
 80072bc:	f000 fec4 	bl	8008048 <USBH_OpenPipe>

    }
    break;
 80072c0:	e0ad      	b.n	800741e <USBH_HandleEnum+0x20a>

  case ENUM_GET_FULL_DEV_DESC:
    /* Get FULL Device Desc  */
    if ( USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE)== USBH_OK)
 80072c2:	2112      	movs	r1, #18
 80072c4:	6878      	ldr	r0, [r7, #4]
 80072c6:	f000 f974 	bl	80075b2 <USBH_Get_DevDesc>
 80072ca:	4603      	mov	r3, r0
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	f040 80a8 	bne.w	8007422 <USBH_HandleEnum+0x20e>
    {
      USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct );
      USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor );

      phost->EnumState = ENUM_SET_ADDR;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	2202      	movs	r2, #2
 80072d6:	705a      	strb	r2, [r3, #1]

    }
    break;
 80072d8:	e0a3      	b.n	8007422 <USBH_HandleEnum+0x20e>

  case ENUM_SET_ADDR:
    /* set address */
    if ( USBH_SetAddress(phost, USBH_DEVICE_ADDRESS) == USBH_OK)
 80072da:	2101      	movs	r1, #1
 80072dc:	6878      	ldr	r0, [r7, #4]
 80072de:	f000 fa14 	bl	800770a <USBH_SetAddress>
 80072e2:	4603      	mov	r3, r0
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	f040 809e 	bne.w	8007426 <USBH_HandleEnum+0x212>
    {
      USBH_Delay(2U);
 80072ea:	2002      	movs	r0, #2
 80072ec:	f003 fbd4 	bl	800aa98 <USBH_Delay>
      phost->device.address = USBH_DEVICE_ADDRESS;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	2201      	movs	r2, #1
 80072f4:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

      /* user callback for device address assigned */
      USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
      phost->EnumState = ENUM_GET_CFG_DESC;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	2203      	movs	r2, #3
 80072fc:	705a      	strb	r2, [r3, #1]

      /* modify control channels to update device address */
      USBH_OpenPipe (phost,
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	7919      	ldrb	r1, [r3, #4]
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_in,
                           0x80U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 800730e:	687a      	ldr	r2, [r7, #4]
 8007310:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 8007312:	b292      	uxth	r2, r2
 8007314:	9202      	str	r2, [sp, #8]
 8007316:	2200      	movs	r2, #0
 8007318:	9201      	str	r2, [sp, #4]
 800731a:	9300      	str	r3, [sp, #0]
 800731c:	4603      	mov	r3, r0
 800731e:	2280      	movs	r2, #128	; 0x80
 8007320:	6878      	ldr	r0, [r7, #4]
 8007322:	f000 fe91 	bl	8008048 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe (phost,
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	7959      	ldrb	r1, [r3, #5]
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_out,
                           0x00U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 8007336:	687a      	ldr	r2, [r7, #4]
 8007338:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 800733a:	b292      	uxth	r2, r2
 800733c:	9202      	str	r2, [sp, #8]
 800733e:	2200      	movs	r2, #0
 8007340:	9201      	str	r2, [sp, #4]
 8007342:	9300      	str	r3, [sp, #0]
 8007344:	4603      	mov	r3, r0
 8007346:	2200      	movs	r2, #0
 8007348:	6878      	ldr	r0, [r7, #4]
 800734a:	f000 fe7d 	bl	8008048 <USBH_OpenPipe>
    }
    break;
 800734e:	e06a      	b.n	8007426 <USBH_HandleEnum+0x212>

  case ENUM_GET_CFG_DESC:
    /* get standard configuration descriptor */
    if ( USBH_Get_CfgDesc(phost,
 8007350:	2109      	movs	r1, #9
 8007352:	6878      	ldr	r0, [r7, #4]
 8007354:	f000 f955 	bl	8007602 <USBH_Get_CfgDesc>
 8007358:	4603      	mov	r3, r0
 800735a:	2b00      	cmp	r3, #0
 800735c:	d165      	bne.n	800742a <USBH_HandleEnum+0x216>
                          USB_CONFIGURATION_DESC_SIZE) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	2204      	movs	r2, #4
 8007362:	705a      	strb	r2, [r3, #1]
    }
    break;
 8007364:	e061      	b.n	800742a <USBH_HandleEnum+0x216>

  case ENUM_GET_FULL_CFG_DESC:
    /* get FULL config descriptor (config, interface, endpoints) */
    if (USBH_Get_CfgDesc(phost,
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	f8b3 3336 	ldrh.w	r3, [r3, #822]	; 0x336
 800736c:	4619      	mov	r1, r3
 800736e:	6878      	ldr	r0, [r7, #4]
 8007370:	f000 f947 	bl	8007602 <USBH_Get_CfgDesc>
 8007374:	4603      	mov	r3, r0
 8007376:	2b00      	cmp	r3, #0
 8007378:	d159      	bne.n	800742e <USBH_HandleEnum+0x21a>
                         phost->device.CfgDesc.wTotalLength) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	2205      	movs	r2, #5
 800737e:	705a      	strb	r2, [r3, #1]
    }
    break;
 8007380:	e055      	b.n	800742e <USBH_HandleEnum+0x21a>

  case ENUM_GET_MFC_STRING_DESC:
    if (phost->device.DevDesc.iManufacturer != 0U)
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	f893 3330 	ldrb.w	r3, [r3, #816]	; 0x330
 8007388:	2b00      	cmp	r3, #0
 800738a:	d010      	beq.n	80073ae <USBH_HandleEnum+0x19a>
    { /* Check that Manufacturer String is available */

      if ( USBH_Get_StringDesc(phost,
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	f893 1330 	ldrb.w	r1, [r3, #816]	; 0x330
                               phost->device.DevDesc.iManufacturer,
                               phost->device.Data,
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 8007398:	23ff      	movs	r3, #255	; 0xff
 800739a:	6878      	ldr	r0, [r7, #4]
 800739c:	f000 f955 	bl	800764a <USBH_Get_StringDesc>
 80073a0:	4603      	mov	r3, r0
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d145      	bne.n	8007432 <USBH_HandleEnum+0x21e>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Manufacturing string */
        USBH_UsrLog("Manufacturer : %s",  (char *)(void*)phost->device.Data);
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	2206      	movs	r2, #6
 80073aa:	705a      	strb	r2, [r3, #1]
#else
     (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 80073ac:	e041      	b.n	8007432 <USBH_HandleEnum+0x21e>
     phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	2206      	movs	r2, #6
 80073b2:	705a      	strb	r2, [r3, #1]
    break;
 80073b4:	e03d      	b.n	8007432 <USBH_HandleEnum+0x21e>

  case ENUM_GET_PRODUCT_STRING_DESC:
    if (phost->device.DevDesc.iProduct != 0U)
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	f893 3331 	ldrb.w	r3, [r3, #817]	; 0x331
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d010      	beq.n	80073e2 <USBH_HandleEnum+0x1ce>
    { /* Check that Product string is available */
      if ( USBH_Get_StringDesc(phost,
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	f893 1331 	ldrb.w	r1, [r3, #817]	; 0x331
                               phost->device.DevDesc.iProduct,
                               phost->device.Data,
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 80073cc:	23ff      	movs	r3, #255	; 0xff
 80073ce:	6878      	ldr	r0, [r7, #4]
 80073d0:	f000 f93b 	bl	800764a <USBH_Get_StringDesc>
 80073d4:	4603      	mov	r3, r0
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d12d      	bne.n	8007436 <USBH_HandleEnum+0x222>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Product string */
        USBH_UsrLog("Product : %s",  (char *)(void *)phost->device.Data);
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	2207      	movs	r2, #7
 80073de:	705a      	strb	r2, [r3, #1]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 80073e0:	e029      	b.n	8007436 <USBH_HandleEnum+0x222>
      phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	2207      	movs	r2, #7
 80073e6:	705a      	strb	r2, [r3, #1]
    break;
 80073e8:	e025      	b.n	8007436 <USBH_HandleEnum+0x222>

  case ENUM_GET_SERIALNUM_STRING_DESC:
    if (phost->device.DevDesc.iSerialNumber != 0U)
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	f893 3332 	ldrb.w	r3, [r3, #818]	; 0x332
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d00f      	beq.n	8007414 <USBH_HandleEnum+0x200>
    { /* Check that Serial number string is available */
      if ( USBH_Get_StringDesc(phost,
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	f893 1332 	ldrb.w	r1, [r3, #818]	; 0x332
                               phost->device.DevDesc.iSerialNumber,
                               phost->device.Data,
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 8007400:	23ff      	movs	r3, #255	; 0xff
 8007402:	6878      	ldr	r0, [r7, #4]
 8007404:	f000 f921 	bl	800764a <USBH_Get_StringDesc>
 8007408:	4603      	mov	r3, r0
 800740a:	2b00      	cmp	r3, #0
 800740c:	d115      	bne.n	800743a <USBH_HandleEnum+0x226>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Serial number string */
         USBH_UsrLog("Serial Number : %s",  (char *)(void*)phost->device.Data);
        Status = USBH_OK;
 800740e:	2300      	movs	r3, #0
 8007410:	73fb      	strb	r3, [r7, #15]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 8007412:	e012      	b.n	800743a <USBH_HandleEnum+0x226>
      Status = USBH_OK;
 8007414:	2300      	movs	r3, #0
 8007416:	73fb      	strb	r3, [r7, #15]
    break;
 8007418:	e00f      	b.n	800743a <USBH_HandleEnum+0x226>

  default:
    break;
 800741a:	bf00      	nop
 800741c:	e00e      	b.n	800743c <USBH_HandleEnum+0x228>
    break;
 800741e:	bf00      	nop
 8007420:	e00c      	b.n	800743c <USBH_HandleEnum+0x228>
    break;
 8007422:	bf00      	nop
 8007424:	e00a      	b.n	800743c <USBH_HandleEnum+0x228>
    break;
 8007426:	bf00      	nop
 8007428:	e008      	b.n	800743c <USBH_HandleEnum+0x228>
    break;
 800742a:	bf00      	nop
 800742c:	e006      	b.n	800743c <USBH_HandleEnum+0x228>
    break;
 800742e:	bf00      	nop
 8007430:	e004      	b.n	800743c <USBH_HandleEnum+0x228>
    break;
 8007432:	bf00      	nop
 8007434:	e002      	b.n	800743c <USBH_HandleEnum+0x228>
    break;
 8007436:	bf00      	nop
 8007438:	e000      	b.n	800743c <USBH_HandleEnum+0x228>
    break;
 800743a:	bf00      	nop
  }
  return Status;
 800743c:	7bfb      	ldrb	r3, [r7, #15]
}
 800743e:	4618      	mov	r0, r3
 8007440:	3710      	adds	r7, #16
 8007442:	46bd      	mov	sp, r7
 8007444:	bd80      	pop	{r7, pc}
 8007446:	bf00      	nop

08007448 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer  (USBH_HandleTypeDef *phost, uint32_t time)
{
 8007448:	b480      	push	{r7}
 800744a:	b083      	sub	sp, #12
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
 8007450:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	683a      	ldr	r2, [r7, #0]
 8007456:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
}
 800745a:	bf00      	nop
 800745c:	370c      	adds	r7, #12
 800745e:	46bd      	mov	sp, r7
 8007460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007464:	4770      	bx	lr

08007466 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer  (USBH_HandleTypeDef *phost)
{
 8007466:	b580      	push	{r7, lr}
 8007468:	b082      	sub	sp, #8
 800746a:	af00      	add	r7, sp, #0
 800746c:	6078      	str	r0, [r7, #4]
  phost->Timer ++;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8007474:	1c5a      	adds	r2, r3, #1
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
  USBH_HandleSof(phost);
 800747c:	6878      	ldr	r0, [r7, #4]
 800747e:	f000 f804 	bl	800748a <USBH_HandleSof>
}
 8007482:	bf00      	nop
 8007484:	3708      	adds	r7, #8
 8007486:	46bd      	mov	sp, r7
 8007488:	bd80      	pop	{r7, pc}

0800748a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof  (USBH_HandleTypeDef *phost)
{
 800748a:	b580      	push	{r7, lr}
 800748c:	b082      	sub	sp, #8
 800748e:	af00      	add	r7, sp, #0
 8007490:	6078      	str	r0, [r7, #4]
  if((phost->gState == HOST_CLASS)&&(phost->pActiveClass != NULL))
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	781b      	ldrb	r3, [r3, #0]
 8007496:	b2db      	uxtb	r3, r3
 8007498:	2b0b      	cmp	r3, #11
 800749a:	d10a      	bne.n	80074b2 <USBH_HandleSof+0x28>
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d005      	beq.n	80074b2 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80074ac:	699b      	ldr	r3, [r3, #24]
 80074ae:	6878      	ldr	r0, [r7, #4]
 80074b0:	4798      	blx	r3
  }
}
 80074b2:	bf00      	nop
 80074b4:	3708      	adds	r7, #8
 80074b6:	46bd      	mov	sp, r7
 80074b8:	bd80      	pop	{r7, pc}

080074ba <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled (USBH_HandleTypeDef *phost)
{
 80074ba:	b480      	push	{r7}
 80074bc:	b083      	sub	sp, #12
 80074be:	af00      	add	r7, sp, #0
 80074c0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	2201      	movs	r2, #1
 80074c6:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 80074ca:	bf00      	nop
}
 80074cc:	370c      	adds	r7, #12
 80074ce:	46bd      	mov	sp, r7
 80074d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d4:	4770      	bx	lr

080074d6 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled (USBH_HandleTypeDef *phost)
{
 80074d6:	b480      	push	{r7}
 80074d8:	b083      	sub	sp, #12
 80074da:	af00      	add	r7, sp, #0
 80074dc:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	2200      	movs	r2, #0
 80074e2:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 80074e6:	bf00      	nop
}
 80074e8:	370c      	adds	r7, #12
 80074ea:	46bd      	mov	sp, r7
 80074ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f0:	4770      	bx	lr

080074f2 <USBH_IsPortEnabled>:
  *         Is Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
uint8_t USBH_IsPortEnabled(USBH_HandleTypeDef *phost)
{
 80074f2:	b480      	push	{r7}
 80074f4:	b083      	sub	sp, #12
 80074f6:	af00      	add	r7, sp, #0
 80074f8:	6078      	str	r0, [r7, #4]
  return(phost->device.PortEnabled);
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
}
 8007500:	4618      	mov	r0, r3
 8007502:	370c      	adds	r7, #12
 8007504:	46bd      	mov	sp, r7
 8007506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750a:	4770      	bx	lr

0800750c <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect (USBH_HandleTypeDef *phost)
{
 800750c:	b580      	push	{r7, lr}
 800750e:	b082      	sub	sp, #8
 8007510:	af00      	add	r7, sp, #0
 8007512:	6078      	str	r0, [r7, #4]
  if(phost->gState == HOST_IDLE )
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	781b      	ldrb	r3, [r3, #0]
 8007518:	b2db      	uxtb	r3, r3
 800751a:	2b00      	cmp	r3, #0
 800751c:	d10f      	bne.n	800753e <USBH_LL_Connect+0x32>
  {
    phost->device.is_connected = 1U;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	2201      	movs	r2, #1
 8007522:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

    if(phost->pUser != NULL)
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800752c:	2b00      	cmp	r3, #0
 800752e:	d00e      	beq.n	800754e <USBH_LL_Connect+0x42>
    {
      phost->pUser(phost, HOST_USER_CONNECTION);
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007536:	2104      	movs	r1, #4
 8007538:	6878      	ldr	r0, [r7, #4]
 800753a:	4798      	blx	r3
 800753c:	e007      	b.n	800754e <USBH_LL_Connect+0x42>
    }
  }
  else
  {
    if (phost->device.PortEnabled == 1U)
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007544:	2b01      	cmp	r3, #1
 8007546:	d102      	bne.n	800754e <USBH_LL_Connect+0x42>
    {
      phost->gState = HOST_DEV_ATTACHED;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	2202      	movs	r2, #2
 800754c:	701a      	strb	r2, [r3, #0]
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800754e:	2300      	movs	r3, #0
}
 8007550:	4618      	mov	r0, r3
 8007552:	3708      	adds	r7, #8
 8007554:	46bd      	mov	sp, r7
 8007556:	bd80      	pop	{r7, pc}

08007558 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect  (USBH_HandleTypeDef *phost)
{
 8007558:	b580      	push	{r7, lr}
 800755a:	b082      	sub	sp, #8
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]
  /*Stop Host */
  USBH_LL_Stop(phost);
 8007560:	6878      	ldr	r0, [r7, #4]
 8007562:	f003 f91c 	bl	800a79e <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe  (phost, phost->Control.pipe_in);
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	791b      	ldrb	r3, [r3, #4]
 800756a:	4619      	mov	r1, r3
 800756c:	6878      	ldr	r0, [r7, #4]
 800756e:	f000 fdb8 	bl	80080e2 <USBH_FreePipe>
  USBH_FreePipe  (phost, phost->Control.pipe_out);
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	795b      	ldrb	r3, [r3, #5]
 8007576:	4619      	mov	r1, r3
 8007578:	6878      	ldr	r0, [r7, #4]
 800757a:	f000 fdb2 	bl	80080e2 <USBH_FreePipe>

  phost->device.is_connected = 0U;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	2200      	movs	r2, #0
 8007582:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  if(phost->pUser != NULL)
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800758c:	2b00      	cmp	r3, #0
 800758e:	d005      	beq.n	800759c <USBH_LL_Disconnect+0x44>
  {
    phost->pUser(phost, HOST_USER_DISCONNECTION);
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007596:	2105      	movs	r1, #5
 8007598:	6878      	ldr	r0, [r7, #4]
 800759a:	4798      	blx	r3
  }
  USBH_UsrLog("USB Device disconnected");

  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800759c:	6878      	ldr	r0, [r7, #4]
 800759e:	f003 f8e3 	bl	800a768 <USBH_LL_Start>

  phost->gState = HOST_DEV_DISCONNECTED;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	2203      	movs	r2, #3
 80075a6:	701a      	strb	r2, [r3, #0]
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 80075a8:	2300      	movs	r3, #0
}
 80075aa:	4618      	mov	r0, r3
 80075ac:	3708      	adds	r7, #8
 80075ae:	46bd      	mov	sp, r7
 80075b0:	bd80      	pop	{r7, pc}

080075b2 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 80075b2:	b580      	push	{r7, lr}
 80075b4:	b086      	sub	sp, #24
 80075b6:	af02      	add	r7, sp, #8
 80075b8:	6078      	str	r0, [r7, #4]
 80075ba:	460b      	mov	r3, r1
 80075bc:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if((status = USBH_GetDescriptor(phost,
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                  USB_DESC_DEVICE,
                                  phost->device.Data,
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if((status = USBH_GetDescriptor(phost,
 80075c4:	78fb      	ldrb	r3, [r7, #3]
 80075c6:	b29b      	uxth	r3, r3
 80075c8:	9300      	str	r3, [sp, #0]
 80075ca:	4613      	mov	r3, r2
 80075cc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80075d0:	2100      	movs	r1, #0
 80075d2:	6878      	ldr	r0, [r7, #4]
 80075d4:	f000 f864 	bl	80076a0 <USBH_GetDescriptor>
 80075d8:	4603      	mov	r3, r0
 80075da:	73fb      	strb	r3, [r7, #15]
 80075dc:	7bfb      	ldrb	r3, [r7, #15]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d10a      	bne.n	80075f8 <USBH_Get_DevDesc+0x46>
                                  (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	f203 3022 	addw	r0, r3, #802	; 0x322
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80075ee:	78fa      	ldrb	r2, [r7, #3]
 80075f0:	b292      	uxth	r2, r2
 80075f2:	4619      	mov	r1, r3
 80075f4:	f000 f918 	bl	8007828 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }
  return status;
 80075f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80075fa:	4618      	mov	r0, r3
 80075fc:	3710      	adds	r7, #16
 80075fe:	46bd      	mov	sp, r7
 8007600:	bd80      	pop	{r7, pc}

08007602 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                             uint16_t length)

{
 8007602:	b580      	push	{r7, lr}
 8007604:	b086      	sub	sp, #24
 8007606:	af02      	add	r7, sp, #8
 8007608:	6078      	str	r0, [r7, #4]
 800760a:	460b      	mov	r3, r1
 800760c:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData;
#if (USBH_KEEP_CFG_DESCRIPTOR == 1U)
  pData = phost->device.CfgDesc_Raw;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	331c      	adds	r3, #28
 8007612:	60fb      	str	r3, [r7, #12]
#else
  pData = phost->device.Data;
#endif
  if((status = USBH_GetDescriptor(phost,
 8007614:	887b      	ldrh	r3, [r7, #2]
 8007616:	9300      	str	r3, [sp, #0]
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800761e:	2100      	movs	r1, #0
 8007620:	6878      	ldr	r0, [r7, #4]
 8007622:	f000 f83d 	bl	80076a0 <USBH_GetDescriptor>
 8007626:	4603      	mov	r3, r0
 8007628:	72fb      	strb	r3, [r7, #11]
 800762a:	7afb      	ldrb	r3, [r7, #11]
 800762c:	2b00      	cmp	r3, #0
 800762e:	d107      	bne.n	8007640 <USBH_Get_CfgDesc+0x3e>
                                  pData,
                                  length)) == USBH_OK)
  {

    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc (&phost->device.CfgDesc,
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	f503 734d 	add.w	r3, r3, #820	; 0x334
 8007636:	887a      	ldrh	r2, [r7, #2]
 8007638:	68f9      	ldr	r1, [r7, #12]
 800763a:	4618      	mov	r0, r3
 800763c:	f000 f964 	bl	8007908 <USBH_ParseCfgDesc>
                       pData,
                       length);

  }
  return status;
 8007640:	7afb      	ldrb	r3, [r7, #11]
}
 8007642:	4618      	mov	r0, r3
 8007644:	3710      	adds	r7, #16
 8007646:	46bd      	mov	sp, r7
 8007648:	bd80      	pop	{r7, pc}

0800764a <USBH_Get_StringDesc>:
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                uint8_t string_index,
                                uint8_t *buff,
                                uint16_t length)
{
 800764a:	b580      	push	{r7, lr}
 800764c:	b088      	sub	sp, #32
 800764e:	af02      	add	r7, sp, #8
 8007650:	60f8      	str	r0, [r7, #12]
 8007652:	607a      	str	r2, [r7, #4]
 8007654:	461a      	mov	r2, r3
 8007656:	460b      	mov	r3, r1
 8007658:	72fb      	strb	r3, [r7, #11]
 800765a:	4613      	mov	r3, r2
 800765c:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;
  if((status = USBH_GetDescriptor(phost,
 800765e:	7afb      	ldrb	r3, [r7, #11]
 8007660:	b29b      	uxth	r3, r3
 8007662:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8007666:	b29a      	uxth	r2, r3
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                  USB_DESC_STRING | string_index,
                                  phost->device.Data,
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if((status = USBH_GetDescriptor(phost,
 800766e:	893b      	ldrh	r3, [r7, #8]
 8007670:	9300      	str	r3, [sp, #0]
 8007672:	460b      	mov	r3, r1
 8007674:	2100      	movs	r1, #0
 8007676:	68f8      	ldr	r0, [r7, #12]
 8007678:	f000 f812 	bl	80076a0 <USBH_GetDescriptor>
 800767c:	4603      	mov	r3, r0
 800767e:	75fb      	strb	r3, [r7, #23]
 8007680:	7dfb      	ldrb	r3, [r7, #23]
 8007682:	2b00      	cmp	r3, #0
 8007684:	d107      	bne.n	8007696 <USBH_Get_StringDesc+0x4c>
                                  length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data,buff, length);
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800768c:	893a      	ldrh	r2, [r7, #8]
 800768e:	6879      	ldr	r1, [r7, #4]
 8007690:	4618      	mov	r0, r3
 8007692:	f000 fa37 	bl	8007b04 <USBH_ParseStringDesc>
  }
  return status;
 8007696:	7dfb      	ldrb	r3, [r7, #23]
}
 8007698:	4618      	mov	r0, r3
 800769a:	3718      	adds	r7, #24
 800769c:	46bd      	mov	sp, r7
 800769e:	bd80      	pop	{r7, pc}

080076a0 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                               uint8_t  req_type,
                               uint16_t value_idx,
                               uint8_t* buff,
                               uint16_t length)
{
 80076a0:	b580      	push	{r7, lr}
 80076a2:	b084      	sub	sp, #16
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	60f8      	str	r0, [r7, #12]
 80076a8:	607b      	str	r3, [r7, #4]
 80076aa:	460b      	mov	r3, r1
 80076ac:	72fb      	strb	r3, [r7, #11]
 80076ae:	4613      	mov	r3, r2
 80076b0:	813b      	strh	r3, [r7, #8]
  if(phost->RequestState == CMD_SEND)
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	789b      	ldrb	r3, [r3, #2]
 80076b6:	2b01      	cmp	r3, #1
 80076b8:	d11c      	bne.n	80076f4 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80076ba:	7afb      	ldrb	r3, [r7, #11]
 80076bc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80076c0:	b2da      	uxtb	r2, r3
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	2206      	movs	r2, #6
 80076ca:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	893a      	ldrh	r2, [r7, #8]
 80076d0:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 80076d2:	893b      	ldrh	r3, [r7, #8]
 80076d4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80076d8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80076dc:	d104      	bne.n	80076e8 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	f240 4209 	movw	r2, #1033	; 0x409
 80076e4:	829a      	strh	r2, [r3, #20]
 80076e6:	e002      	b.n	80076ee <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	2200      	movs	r2, #0
 80076ec:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	8b3a      	ldrh	r2, [r7, #24]
 80076f2:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, buff, length);
 80076f4:	8b3b      	ldrh	r3, [r7, #24]
 80076f6:	461a      	mov	r2, r3
 80076f8:	6879      	ldr	r1, [r7, #4]
 80076fa:	68f8      	ldr	r0, [r7, #12]
 80076fc:	f000 fa50 	bl	8007ba0 <USBH_CtlReq>
 8007700:	4603      	mov	r3, r0
}
 8007702:	4618      	mov	r0, r3
 8007704:	3710      	adds	r7, #16
 8007706:	46bd      	mov	sp, r7
 8007708:	bd80      	pop	{r7, pc}

0800770a <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800770a:	b580      	push	{r7, lr}
 800770c:	b082      	sub	sp, #8
 800770e:	af00      	add	r7, sp, #0
 8007710:	6078      	str	r0, [r7, #4]
 8007712:	460b      	mov	r3, r1
 8007714:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	789b      	ldrb	r3, [r3, #2]
 800771a:	2b01      	cmp	r3, #1
 800771c:	d10f      	bne.n	800773e <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	2200      	movs	r2, #0
 8007722:	741a      	strb	r2, [r3, #16]
      USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	2205      	movs	r2, #5
 8007728:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800772a:	78fb      	ldrb	r3, [r7, #3]
 800772c:	b29a      	uxth	r2, r3
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	2200      	movs	r2, #0
 8007736:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	2200      	movs	r2, #0
 800773c:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800773e:	2200      	movs	r2, #0
 8007740:	2100      	movs	r1, #0
 8007742:	6878      	ldr	r0, [r7, #4]
 8007744:	f000 fa2c 	bl	8007ba0 <USBH_CtlReq>
 8007748:	4603      	mov	r3, r0
}
 800774a:	4618      	mov	r0, r3
 800774c:	3708      	adds	r7, #8
 800774e:	46bd      	mov	sp, r7
 8007750:	bd80      	pop	{r7, pc}

08007752 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8007752:	b580      	push	{r7, lr}
 8007754:	b082      	sub	sp, #8
 8007756:	af00      	add	r7, sp, #0
 8007758:	6078      	str	r0, [r7, #4]
 800775a:	460b      	mov	r3, r1
 800775c:	807b      	strh	r3, [r7, #2]
  if(phost->RequestState == CMD_SEND)
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	789b      	ldrb	r3, [r3, #2]
 8007762:	2b01      	cmp	r3, #1
 8007764:	d10e      	bne.n	8007784 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	2200      	movs	r2, #0
 800776a:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	2209      	movs	r2, #9
 8007770:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	887a      	ldrh	r2, [r7, #2]
 8007776:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	2200      	movs	r2, #0
 800777c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	2200      	movs	r2, #0
 8007782:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U , 0U);
 8007784:	2200      	movs	r2, #0
 8007786:	2100      	movs	r1, #0
 8007788:	6878      	ldr	r0, [r7, #4]
 800778a:	f000 fa09 	bl	8007ba0 <USBH_CtlReq>
 800778e:	4603      	mov	r3, r0
}
 8007790:	4618      	mov	r0, r3
 8007792:	3708      	adds	r7, #8
 8007794:	46bd      	mov	sp, r7
 8007796:	bd80      	pop	{r7, pc}

08007798 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8007798:	b580      	push	{r7, lr}
 800779a:	b082      	sub	sp, #8
 800779c:	af00      	add	r7, sp, #0
 800779e:	6078      	str	r0, [r7, #4]
 80077a0:	460b      	mov	r3, r1
 80077a2:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	789b      	ldrb	r3, [r3, #2]
 80077a8:	2b01      	cmp	r3, #1
 80077aa:	d10f      	bne.n	80077cc <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	2200      	movs	r2, #0
 80077b0:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	2203      	movs	r2, #3
 80077b6:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 80077b8:	78fb      	ldrb	r3, [r7, #3]
 80077ba:	b29a      	uxth	r2, r3
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	2200      	movs	r2, #0
 80077c4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	2200      	movs	r2, #0
 80077ca:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 80077cc:	2200      	movs	r2, #0
 80077ce:	2100      	movs	r1, #0
 80077d0:	6878      	ldr	r0, [r7, #4]
 80077d2:	f000 f9e5 	bl	8007ba0 <USBH_CtlReq>
 80077d6:	4603      	mov	r3, r0
}
 80077d8:	4618      	mov	r0, r3
 80077da:	3708      	adds	r7, #8
 80077dc:	46bd      	mov	sp, r7
 80077de:	bd80      	pop	{r7, pc}

080077e0 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80077e0:	b580      	push	{r7, lr}
 80077e2:	b082      	sub	sp, #8
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	6078      	str	r0, [r7, #4]
 80077e8:	460b      	mov	r3, r1
 80077ea:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	789b      	ldrb	r3, [r3, #2]
 80077f0:	2b01      	cmp	r3, #1
 80077f2:	d10f      	bne.n	8007814 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	2202      	movs	r2, #2
 80077f8:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	2201      	movs	r2, #1
 80077fe:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	2200      	movs	r2, #0
 8007804:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8007806:	78fb      	ldrb	r3, [r7, #3]
 8007808:	b29a      	uxth	r2, r3
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	2200      	movs	r2, #0
 8007812:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U , 0U);
 8007814:	2200      	movs	r2, #0
 8007816:	2100      	movs	r1, #0
 8007818:	6878      	ldr	r0, [r7, #4]
 800781a:	f000 f9c1 	bl	8007ba0 <USBH_CtlReq>
 800781e:	4603      	mov	r3, r0
}
 8007820:	4618      	mov	r0, r3
 8007822:	3708      	adds	r7, #8
 8007824:	46bd      	mov	sp, r7
 8007826:	bd80      	pop	{r7, pc}

08007828 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc (USBH_DevDescTypeDef* dev_desc, uint8_t *buf,
                                uint16_t length)
{
 8007828:	b480      	push	{r7}
 800782a:	b085      	sub	sp, #20
 800782c:	af00      	add	r7, sp, #0
 800782e:	60f8      	str	r0, [r7, #12]
 8007830:	60b9      	str	r1, [r7, #8]
 8007832:	4613      	mov	r3, r2
 8007834:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t  *) (buf +  0);
 8007836:	68bb      	ldr	r3, [r7, #8]
 8007838:	781a      	ldrb	r2, [r3, #0]
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t  *) (buf +  1);
 800783e:	68bb      	ldr	r3, [r7, #8]
 8007840:	785a      	ldrb	r2, [r3, #1]
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16 (buf +  2);
 8007846:	68bb      	ldr	r3, [r7, #8]
 8007848:	3302      	adds	r3, #2
 800784a:	781b      	ldrb	r3, [r3, #0]
 800784c:	b29a      	uxth	r2, r3
 800784e:	68bb      	ldr	r3, [r7, #8]
 8007850:	3303      	adds	r3, #3
 8007852:	781b      	ldrb	r3, [r3, #0]
 8007854:	b29b      	uxth	r3, r3
 8007856:	021b      	lsls	r3, r3, #8
 8007858:	b29b      	uxth	r3, r3
 800785a:	4313      	orrs	r3, r2
 800785c:	b29a      	uxth	r2, r3
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t  *) (buf +  4);
 8007862:	68bb      	ldr	r3, [r7, #8]
 8007864:	791a      	ldrb	r2, [r3, #4]
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t  *) (buf +  5);
 800786a:	68bb      	ldr	r3, [r7, #8]
 800786c:	795a      	ldrb	r2, [r3, #5]
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t  *) (buf +  6);
 8007872:	68bb      	ldr	r3, [r7, #8]
 8007874:	799a      	ldrb	r2, [r3, #6]
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t  *) (buf +  7);
 800787a:	68bb      	ldr	r3, [r7, #8]
 800787c:	79da      	ldrb	r2, [r3, #7]
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8007882:	88fb      	ldrh	r3, [r7, #6]
 8007884:	2b08      	cmp	r3, #8
 8007886:	d939      	bls.n	80078fc <USBH_ParseDevDesc+0xd4>
  { /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16 (buf +  8);
 8007888:	68bb      	ldr	r3, [r7, #8]
 800788a:	3308      	adds	r3, #8
 800788c:	781b      	ldrb	r3, [r3, #0]
 800788e:	b29a      	uxth	r2, r3
 8007890:	68bb      	ldr	r3, [r7, #8]
 8007892:	3309      	adds	r3, #9
 8007894:	781b      	ldrb	r3, [r3, #0]
 8007896:	b29b      	uxth	r3, r3
 8007898:	021b      	lsls	r3, r3, #8
 800789a:	b29b      	uxth	r3, r3
 800789c:	4313      	orrs	r3, r2
 800789e:	b29a      	uxth	r2, r3
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16 (buf + 10);
 80078a4:	68bb      	ldr	r3, [r7, #8]
 80078a6:	330a      	adds	r3, #10
 80078a8:	781b      	ldrb	r3, [r3, #0]
 80078aa:	b29a      	uxth	r2, r3
 80078ac:	68bb      	ldr	r3, [r7, #8]
 80078ae:	330b      	adds	r3, #11
 80078b0:	781b      	ldrb	r3, [r3, #0]
 80078b2:	b29b      	uxth	r3, r3
 80078b4:	021b      	lsls	r3, r3, #8
 80078b6:	b29b      	uxth	r3, r3
 80078b8:	4313      	orrs	r3, r2
 80078ba:	b29a      	uxth	r2, r3
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16 (buf + 12);
 80078c0:	68bb      	ldr	r3, [r7, #8]
 80078c2:	330c      	adds	r3, #12
 80078c4:	781b      	ldrb	r3, [r3, #0]
 80078c6:	b29a      	uxth	r2, r3
 80078c8:	68bb      	ldr	r3, [r7, #8]
 80078ca:	330d      	adds	r3, #13
 80078cc:	781b      	ldrb	r3, [r3, #0]
 80078ce:	b29b      	uxth	r3, r3
 80078d0:	021b      	lsls	r3, r3, #8
 80078d2:	b29b      	uxth	r3, r3
 80078d4:	4313      	orrs	r3, r2
 80078d6:	b29a      	uxth	r2, r3
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t  *) (buf + 14);
 80078dc:	68bb      	ldr	r3, [r7, #8]
 80078de:	7b9a      	ldrb	r2, [r3, #14]
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t  *) (buf + 15);
 80078e4:	68bb      	ldr	r3, [r7, #8]
 80078e6:	7bda      	ldrb	r2, [r3, #15]
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t  *) (buf + 16);
 80078ec:	68bb      	ldr	r3, [r7, #8]
 80078ee:	7c1a      	ldrb	r2, [r3, #16]
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t  *) (buf + 17);
 80078f4:	68bb      	ldr	r3, [r7, #8]
 80078f6:	7c5a      	ldrb	r2, [r3, #17]
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	745a      	strb	r2, [r3, #17]
  }
}
 80078fc:	bf00      	nop
 80078fe:	3714      	adds	r7, #20
 8007900:	46bd      	mov	sp, r7
 8007902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007906:	4770      	bx	lr

08007908 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc (USBH_CfgDescTypeDef* cfg_desc, uint8_t *buf,
                               uint16_t length)
{
 8007908:	b580      	push	{r7, lr}
 800790a:	b08a      	sub	sp, #40	; 0x28
 800790c:	af00      	add	r7, sp, #0
 800790e:	60f8      	str	r0, [r7, #12]
 8007910:	60b9      	str	r1, [r7, #8]
 8007912:	4613      	mov	r3, r2
 8007914:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8007916:	68bb      	ldr	r3, [r7, #8]
 8007918:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800791a:	2300      	movs	r3, #0
 800791c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 8007920:	2300      	movs	r3, #0
 8007922:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8007926:	68bb      	ldr	r3, [r7, #8]
 8007928:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t  *) (buf + 0);
 800792a:	68bb      	ldr	r3, [r7, #8]
 800792c:	781a      	ldrb	r2, [r3, #0]
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t  *) (buf + 1);
 8007932:	68bb      	ldr	r3, [r7, #8]
 8007934:	785a      	ldrb	r2, [r3, #1]
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16 (buf + 2);
 800793a:	68bb      	ldr	r3, [r7, #8]
 800793c:	3302      	adds	r3, #2
 800793e:	781b      	ldrb	r3, [r3, #0]
 8007940:	b29a      	uxth	r2, r3
 8007942:	68bb      	ldr	r3, [r7, #8]
 8007944:	3303      	adds	r3, #3
 8007946:	781b      	ldrb	r3, [r3, #0]
 8007948:	b29b      	uxth	r3, r3
 800794a:	021b      	lsls	r3, r3, #8
 800794c:	b29b      	uxth	r3, r3
 800794e:	4313      	orrs	r3, r2
 8007950:	b29a      	uxth	r2, r3
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t  *) (buf + 4);
 8007956:	68bb      	ldr	r3, [r7, #8]
 8007958:	791a      	ldrb	r2, [r3, #4]
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t  *) (buf + 5);
 800795e:	68bb      	ldr	r3, [r7, #8]
 8007960:	795a      	ldrb	r2, [r3, #5]
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t  *) (buf + 6);
 8007966:	68bb      	ldr	r3, [r7, #8]
 8007968:	799a      	ldrb	r2, [r3, #6]
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t  *) (buf + 7);
 800796e:	68bb      	ldr	r3, [r7, #8]
 8007970:	79da      	ldrb	r2, [r3, #7]
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t  *) (buf + 8);
 8007976:	68bb      	ldr	r3, [r7, #8]
 8007978:	7a1a      	ldrb	r2, [r3, #8]
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	721a      	strb	r2, [r3, #8]


  if (length > USB_CONFIGURATION_DESC_SIZE)
 800797e:	88fb      	ldrh	r3, [r7, #6]
 8007980:	2b09      	cmp	r3, #9
 8007982:	d95f      	bls.n	8007a44 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 8007984:	2309      	movs	r3, #9
 8007986:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8007988:	2300      	movs	r3, #0
 800798a:	61fb      	str	r3, [r7, #28]


    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800798c:	e051      	b.n	8007a32 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800798e:	f107 0316 	add.w	r3, r7, #22
 8007992:	4619      	mov	r1, r3
 8007994:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007996:	f000 f8e8 	bl	8007b6a <USBH_GetNextDesc>
 800799a:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800799c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800799e:	785b      	ldrb	r3, [r3, #1]
 80079a0:	2b04      	cmp	r3, #4
 80079a2:	d146      	bne.n	8007a32 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 80079a4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80079a8:	221a      	movs	r2, #26
 80079aa:	fb02 f303 	mul.w	r3, r2, r3
 80079ae:	3308      	adds	r3, #8
 80079b0:	68fa      	ldr	r2, [r7, #12]
 80079b2:	4413      	add	r3, r2
 80079b4:	3302      	adds	r3, #2
 80079b6:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc (pif, (uint8_t *)(void *)pdesc);
 80079b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80079ba:	69f8      	ldr	r0, [r7, #28]
 80079bc:	f000 f846 	bl	8007a4c <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 80079c0:	2300      	movs	r3, #0
 80079c2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 80079c6:	2300      	movs	r3, #0
 80079c8:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80079ca:	e022      	b.n	8007a12 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t*)(void *)pdesc, &ptr);
 80079cc:	f107 0316 	add.w	r3, r7, #22
 80079d0:	4619      	mov	r1, r3
 80079d2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80079d4:	f000 f8c9 	bl	8007b6a <USBH_GetNextDesc>
 80079d8:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 80079da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079dc:	785b      	ldrb	r3, [r3, #1]
 80079de:	2b05      	cmp	r3, #5
 80079e0:	d117      	bne.n	8007a12 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 80079e2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80079e6:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80079ea:	3201      	adds	r2, #1
 80079ec:	00d2      	lsls	r2, r2, #3
 80079ee:	211a      	movs	r1, #26
 80079f0:	fb01 f303 	mul.w	r3, r1, r3
 80079f4:	4413      	add	r3, r2
 80079f6:	3308      	adds	r3, #8
 80079f8:	68fa      	ldr	r2, [r7, #12]
 80079fa:	4413      	add	r3, r2
 80079fc:	3304      	adds	r3, #4
 80079fe:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc (pep, (uint8_t *)(void *)pdesc);
 8007a00:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007a02:	69b8      	ldr	r0, [r7, #24]
 8007a04:	f000 f851 	bl	8007aaa <USBH_ParseEPDesc>
            ep_ix++;
 8007a08:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8007a0c:	3301      	adds	r3, #1
 8007a0e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007a12:	69fb      	ldr	r3, [r7, #28]
 8007a14:	791b      	ldrb	r3, [r3, #4]
 8007a16:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8007a1a:	429a      	cmp	r2, r3
 8007a1c:	d204      	bcs.n	8007a28 <USBH_ParseCfgDesc+0x120>
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	885a      	ldrh	r2, [r3, #2]
 8007a22:	8afb      	ldrh	r3, [r7, #22]
 8007a24:	429a      	cmp	r2, r3
 8007a26:	d8d1      	bhi.n	80079cc <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 8007a28:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007a2c:	3301      	adds	r3, #1
 8007a2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007a32:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007a36:	2b01      	cmp	r3, #1
 8007a38:	d804      	bhi.n	8007a44 <USBH_ParseCfgDesc+0x13c>
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	885a      	ldrh	r2, [r3, #2]
 8007a3e:	8afb      	ldrh	r3, [r7, #22]
 8007a40:	429a      	cmp	r2, r3
 8007a42:	d8a4      	bhi.n	800798e <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 8007a44:	bf00      	nop
 8007a46:	3728      	adds	r7, #40	; 0x28
 8007a48:	46bd      	mov	sp, r7
 8007a4a:	bd80      	pop	{r7, pc}

08007a4c <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc (USBH_InterfaceDescTypeDef *if_descriptor,
                                      uint8_t *buf)
{
 8007a4c:	b480      	push	{r7}
 8007a4e:	b083      	sub	sp, #12
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	6078      	str	r0, [r7, #4]
 8007a54:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t  *) (buf + 0);
 8007a56:	683b      	ldr	r3, [r7, #0]
 8007a58:	781a      	ldrb	r2, [r3, #0]
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t  *) (buf + 1);
 8007a5e:	683b      	ldr	r3, [r7, #0]
 8007a60:	785a      	ldrb	r2, [r3, #1]
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t  *) (buf + 2);
 8007a66:	683b      	ldr	r3, [r7, #0]
 8007a68:	789a      	ldrb	r2, [r3, #2]
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t  *) (buf + 3);
 8007a6e:	683b      	ldr	r3, [r7, #0]
 8007a70:	78da      	ldrb	r2, [r3, #3]
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t  *) (buf + 4);
 8007a76:	683b      	ldr	r3, [r7, #0]
 8007a78:	791a      	ldrb	r2, [r3, #4]
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t  *) (buf + 5);
 8007a7e:	683b      	ldr	r3, [r7, #0]
 8007a80:	795a      	ldrb	r2, [r3, #5]
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t  *) (buf + 6);
 8007a86:	683b      	ldr	r3, [r7, #0]
 8007a88:	799a      	ldrb	r2, [r3, #6]
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t  *) (buf + 7);
 8007a8e:	683b      	ldr	r3, [r7, #0]
 8007a90:	79da      	ldrb	r2, [r3, #7]
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t  *) (buf + 8);
 8007a96:	683b      	ldr	r3, [r7, #0]
 8007a98:	7a1a      	ldrb	r2, [r3, #8]
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	721a      	strb	r2, [r3, #8]
}
 8007a9e:	bf00      	nop
 8007aa0:	370c      	adds	r7, #12
 8007aa2:	46bd      	mov	sp, r7
 8007aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa8:	4770      	bx	lr

08007aaa <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc (USBH_EpDescTypeDef  *ep_descriptor,
                               uint8_t *buf)
{
 8007aaa:	b480      	push	{r7}
 8007aac:	b083      	sub	sp, #12
 8007aae:	af00      	add	r7, sp, #0
 8007ab0:	6078      	str	r0, [r7, #4]
 8007ab2:	6039      	str	r1, [r7, #0]

  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 8007ab4:	683b      	ldr	r3, [r7, #0]
 8007ab6:	781a      	ldrb	r2, [r3, #0]
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t  *) (buf + 1);
 8007abc:	683b      	ldr	r3, [r7, #0]
 8007abe:	785a      	ldrb	r2, [r3, #1]
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t  *) (buf + 2);
 8007ac4:	683b      	ldr	r3, [r7, #0]
 8007ac6:	789a      	ldrb	r2, [r3, #2]
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t  *) (buf + 3);
 8007acc:	683b      	ldr	r3, [r7, #0]
 8007ace:	78da      	ldrb	r2, [r3, #3]
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16 (buf + 4);
 8007ad4:	683b      	ldr	r3, [r7, #0]
 8007ad6:	3304      	adds	r3, #4
 8007ad8:	781b      	ldrb	r3, [r3, #0]
 8007ada:	b29a      	uxth	r2, r3
 8007adc:	683b      	ldr	r3, [r7, #0]
 8007ade:	3305      	adds	r3, #5
 8007ae0:	781b      	ldrb	r3, [r3, #0]
 8007ae2:	b29b      	uxth	r3, r3
 8007ae4:	021b      	lsls	r3, r3, #8
 8007ae6:	b29b      	uxth	r3, r3
 8007ae8:	4313      	orrs	r3, r2
 8007aea:	b29a      	uxth	r2, r3
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t  *) (buf + 6);
 8007af0:	683b      	ldr	r3, [r7, #0]
 8007af2:	799a      	ldrb	r2, [r3, #6]
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	719a      	strb	r2, [r3, #6]
}
 8007af8:	bf00      	nop
 8007afa:	370c      	adds	r7, #12
 8007afc:	46bd      	mov	sp, r7
 8007afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b02:	4770      	bx	lr

08007b04 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc (uint8_t* psrc, uint8_t* pdest, uint16_t length)
{
 8007b04:	b480      	push	{r7}
 8007b06:	b087      	sub	sp, #28
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	60f8      	str	r0, [r7, #12]
 8007b0c:	60b9      	str	r1, [r7, #8]
 8007b0e:	4613      	mov	r3, r2
 8007b10:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	3301      	adds	r3, #1
 8007b16:	781b      	ldrb	r3, [r3, #0]
 8007b18:	2b03      	cmp	r3, #3
 8007b1a:	d120      	bne.n	8007b5e <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	781b      	ldrb	r3, [r3, #0]
 8007b20:	1e9a      	subs	r2, r3, #2
 8007b22:	88fb      	ldrh	r3, [r7, #6]
 8007b24:	4293      	cmp	r3, r2
 8007b26:	bf28      	it	cs
 8007b28:	4613      	movcs	r3, r2
 8007b2a:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	3302      	adds	r3, #2
 8007b30:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8007b32:	2300      	movs	r3, #0
 8007b34:	82fb      	strh	r3, [r7, #22]
 8007b36:	e00b      	b.n	8007b50 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8007b38:	8afb      	ldrh	r3, [r7, #22]
 8007b3a:	68fa      	ldr	r2, [r7, #12]
 8007b3c:	4413      	add	r3, r2
 8007b3e:	781a      	ldrb	r2, [r3, #0]
 8007b40:	68bb      	ldr	r3, [r7, #8]
 8007b42:	701a      	strb	r2, [r3, #0]
      pdest++;
 8007b44:	68bb      	ldr	r3, [r7, #8]
 8007b46:	3301      	adds	r3, #1
 8007b48:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8007b4a:	8afb      	ldrh	r3, [r7, #22]
 8007b4c:	3302      	adds	r3, #2
 8007b4e:	82fb      	strh	r3, [r7, #22]
 8007b50:	8afa      	ldrh	r2, [r7, #22]
 8007b52:	8abb      	ldrh	r3, [r7, #20]
 8007b54:	429a      	cmp	r2, r3
 8007b56:	d3ef      	bcc.n	8007b38 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8007b58:	68bb      	ldr	r3, [r7, #8]
 8007b5a:	2200      	movs	r2, #0
 8007b5c:	701a      	strb	r2, [r3, #0]
  }
}
 8007b5e:	bf00      	nop
 8007b60:	371c      	adds	r7, #28
 8007b62:	46bd      	mov	sp, r7
 8007b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b68:	4770      	bx	lr

08007b6a <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc (uint8_t   *pbuf, uint16_t  *ptr)
{
 8007b6a:	b480      	push	{r7}
 8007b6c:	b085      	sub	sp, #20
 8007b6e:	af00      	add	r7, sp, #0
 8007b70:	6078      	str	r0, [r7, #4]
 8007b72:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8007b74:	683b      	ldr	r3, [r7, #0]
 8007b76:	881a      	ldrh	r2, [r3, #0]
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	781b      	ldrb	r3, [r3, #0]
 8007b7c:	b29b      	uxth	r3, r3
 8007b7e:	4413      	add	r3, r2
 8007b80:	b29a      	uxth	r2, r3
 8007b82:	683b      	ldr	r3, [r7, #0]
 8007b84:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
         ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	781b      	ldrb	r3, [r3, #0]
 8007b8a:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	4413      	add	r3, r2
 8007b90:	60fb      	str	r3, [r7, #12]

  return(pnext);
 8007b92:	68fb      	ldr	r3, [r7, #12]
}
 8007b94:	4618      	mov	r0, r3
 8007b96:	3714      	adds	r7, #20
 8007b98:	46bd      	mov	sp, r7
 8007b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b9e:	4770      	bx	lr

08007ba0 <USBH_CtlReq>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq     (USBH_HandleTypeDef *phost,
                             uint8_t             *buff,
                             uint16_t            length)
{
 8007ba0:	b580      	push	{r7, lr}
 8007ba2:	b086      	sub	sp, #24
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	60f8      	str	r0, [r7, #12]
 8007ba8:	60b9      	str	r1, [r7, #8]
 8007baa:	4613      	mov	r3, r2
 8007bac:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8007bae:	2301      	movs	r3, #1
 8007bb0:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	789b      	ldrb	r3, [r3, #2]
 8007bb6:	2b01      	cmp	r3, #1
 8007bb8:	d002      	beq.n	8007bc0 <USBH_CtlReq+0x20>
 8007bba:	2b02      	cmp	r3, #2
 8007bbc:	d00f      	beq.n	8007bde <USBH_CtlReq+0x3e>
      }
    }
    break;

  default:
    break;
 8007bbe:	e034      	b.n	8007c2a <USBH_CtlReq+0x8a>
    phost->Control.buff = buff;
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	68ba      	ldr	r2, [r7, #8]
 8007bc4:	609a      	str	r2, [r3, #8]
    phost->Control.length = length;
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	88fa      	ldrh	r2, [r7, #6]
 8007bca:	819a      	strh	r2, [r3, #12]
    phost->Control.state = CTRL_SETUP;
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	2201      	movs	r2, #1
 8007bd0:	761a      	strb	r2, [r3, #24]
    phost->RequestState = CMD_WAIT;
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	2202      	movs	r2, #2
 8007bd6:	709a      	strb	r2, [r3, #2]
    status = USBH_BUSY;
 8007bd8:	2301      	movs	r3, #1
 8007bda:	75fb      	strb	r3, [r7, #23]
    break;
 8007bdc:	e025      	b.n	8007c2a <USBH_CtlReq+0x8a>
    status = USBH_HandleControl(phost);
 8007bde:	68f8      	ldr	r0, [r7, #12]
 8007be0:	f000 f828 	bl	8007c34 <USBH_HandleControl>
 8007be4:	4603      	mov	r3, r0
 8007be6:	75fb      	strb	r3, [r7, #23]
    if (status == USBH_OK)
 8007be8:	7dfb      	ldrb	r3, [r7, #23]
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d108      	bne.n	8007c00 <USBH_CtlReq+0x60>
      phost->RequestState = CMD_SEND;
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	2201      	movs	r2, #1
 8007bf2:	709a      	strb	r2, [r3, #2]
      phost->Control.state =CTRL_IDLE;
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	2200      	movs	r2, #0
 8007bf8:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	75fb      	strb	r3, [r7, #23]
    break;
 8007bfe:	e013      	b.n	8007c28 <USBH_CtlReq+0x88>
    else if (status == USBH_NOT_SUPPORTED)
 8007c00:	7dfb      	ldrb	r3, [r7, #23]
 8007c02:	2b03      	cmp	r3, #3
 8007c04:	d108      	bne.n	8007c18 <USBH_CtlReq+0x78>
      phost->RequestState = CMD_SEND;
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	2201      	movs	r2, #1
 8007c0a:	709a      	strb	r2, [r3, #2]
      phost->Control.state = CTRL_IDLE;
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	2200      	movs	r2, #0
 8007c10:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 8007c12:	2303      	movs	r3, #3
 8007c14:	75fb      	strb	r3, [r7, #23]
    break;
 8007c16:	e007      	b.n	8007c28 <USBH_CtlReq+0x88>
      if (status == USBH_FAIL)
 8007c18:	7dfb      	ldrb	r3, [r7, #23]
 8007c1a:	2b02      	cmp	r3, #2
 8007c1c:	d104      	bne.n	8007c28 <USBH_CtlReq+0x88>
        phost->RequestState = CMD_SEND;
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	2201      	movs	r2, #1
 8007c22:	709a      	strb	r2, [r3, #2]
        status = USBH_FAIL;
 8007c24:	2302      	movs	r3, #2
 8007c26:	75fb      	strb	r3, [r7, #23]
    break;
 8007c28:	bf00      	nop
  }
  return status;
 8007c2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c2c:	4618      	mov	r0, r3
 8007c2e:	3718      	adds	r7, #24
 8007c30:	46bd      	mov	sp, r7
 8007c32:	bd80      	pop	{r7, pc}

08007c34 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl (USBH_HandleTypeDef *phost)
{
 8007c34:	b580      	push	{r7, lr}
 8007c36:	b086      	sub	sp, #24
 8007c38:	af02      	add	r7, sp, #8
 8007c3a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8007c3c:	2301      	movs	r3, #1
 8007c3e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007c40:	2300      	movs	r3, #0
 8007c42:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	7e1b      	ldrb	r3, [r3, #24]
 8007c48:	3b01      	subs	r3, #1
 8007c4a:	2b0a      	cmp	r3, #10
 8007c4c:	f200 814c 	bhi.w	8007ee8 <USBH_HandleControl+0x2b4>
 8007c50:	a201      	add	r2, pc, #4	; (adr r2, 8007c58 <USBH_HandleControl+0x24>)
 8007c52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c56:	bf00      	nop
 8007c58:	08007c85 	.word	0x08007c85
 8007c5c:	08007c9f 	.word	0x08007c9f
 8007c60:	08007d09 	.word	0x08007d09
 8007c64:	08007d2f 	.word	0x08007d2f
 8007c68:	08007d67 	.word	0x08007d67
 8007c6c:	08007d93 	.word	0x08007d93
 8007c70:	08007de5 	.word	0x08007de5
 8007c74:	08007e07 	.word	0x08007e07
 8007c78:	08007e43 	.word	0x08007e43
 8007c7c:	08007e6b 	.word	0x08007e6b
 8007c80:	08007ea9 	.word	0x08007ea9
  {
  case CTRL_SETUP:
    /* send a SETUP packet */
    USBH_CtlSendSetup (phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	f103 0110 	add.w	r1, r3, #16
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	795b      	ldrb	r3, [r3, #5]
 8007c8e:	461a      	mov	r2, r3
 8007c90:	6878      	ldr	r0, [r7, #4]
 8007c92:	f000 f939 	bl	8007f08 <USBH_CtlSendSetup>
	                     phost->Control.pipe_out);

    phost->Control.state = CTRL_SETUP_WAIT;
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	2202      	movs	r2, #2
 8007c9a:	761a      	strb	r2, [r3, #24]
    break;
 8007c9c:	e12f      	b.n	8007efe <USBH_HandleControl+0x2ca>

  case CTRL_SETUP_WAIT:

    URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	795b      	ldrb	r3, [r3, #5]
 8007ca2:	4619      	mov	r1, r3
 8007ca4:	6878      	ldr	r0, [r7, #4]
 8007ca6:	f002 fe67 	bl	800a978 <USBH_LL_GetURBState>
 8007caa:	4603      	mov	r3, r0
 8007cac:	73bb      	strb	r3, [r7, #14]
    /* case SETUP packet sent successfully */
    if(URB_Status == USBH_URB_DONE)
 8007cae:	7bbb      	ldrb	r3, [r7, #14]
 8007cb0:	2b01      	cmp	r3, #1
 8007cb2:	d11e      	bne.n	8007cf2 <USBH_HandleControl+0xbe>
    {
      direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	7c1b      	ldrb	r3, [r3, #16]
 8007cb8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007cbc:	737b      	strb	r3, [r7, #13]

      /* check if there is a data stage */
      if (phost->Control.setup.b.wLength.w != 0U)
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	8adb      	ldrh	r3, [r3, #22]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d00a      	beq.n	8007cdc <USBH_HandleControl+0xa8>
      {
        if (direction == USB_D2H)
 8007cc6:	7b7b      	ldrb	r3, [r7, #13]
 8007cc8:	2b80      	cmp	r3, #128	; 0x80
 8007cca:	d103      	bne.n	8007cd4 <USBH_HandleControl+0xa0>
        {
          /* Data Direction is IN */
          phost->Control.state = CTRL_DATA_IN;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	2203      	movs	r2, #3
 8007cd0:	761a      	strb	r2, [r3, #24]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8007cd2:	e10b      	b.n	8007eec <USBH_HandleControl+0x2b8>
          phost->Control.state = CTRL_DATA_OUT;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	2205      	movs	r2, #5
 8007cd8:	761a      	strb	r2, [r3, #24]
    break;
 8007cda:	e107      	b.n	8007eec <USBH_HandleControl+0x2b8>
        if (direction == USB_D2H)
 8007cdc:	7b7b      	ldrb	r3, [r7, #13]
 8007cde:	2b80      	cmp	r3, #128	; 0x80
 8007ce0:	d103      	bne.n	8007cea <USBH_HandleControl+0xb6>
          phost->Control.state = CTRL_STATUS_OUT;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	2209      	movs	r2, #9
 8007ce6:	761a      	strb	r2, [r3, #24]
    break;
 8007ce8:	e100      	b.n	8007eec <USBH_HandleControl+0x2b8>
          phost->Control.state = CTRL_STATUS_IN;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	2207      	movs	r2, #7
 8007cee:	761a      	strb	r2, [r3, #24]
    break;
 8007cf0:	e0fc      	b.n	8007eec <USBH_HandleControl+0x2b8>
      if((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8007cf2:	7bbb      	ldrb	r3, [r7, #14]
 8007cf4:	2b04      	cmp	r3, #4
 8007cf6:	d003      	beq.n	8007d00 <USBH_HandleControl+0xcc>
 8007cf8:	7bbb      	ldrb	r3, [r7, #14]
 8007cfa:	2b02      	cmp	r3, #2
 8007cfc:	f040 80f6 	bne.w	8007eec <USBH_HandleControl+0x2b8>
        phost->Control.state = CTRL_ERROR;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	220b      	movs	r2, #11
 8007d04:	761a      	strb	r2, [r3, #24]
    break;
 8007d06:	e0f1      	b.n	8007eec <USBH_HandleControl+0x2b8>

  case CTRL_DATA_IN:
    /* Issue an IN token */
    phost->Control.timer = (uint16_t)phost->Timer;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8007d0e:	b29a      	uxth	r2, r3
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	81da      	strh	r2, [r3, #14]
    USBH_CtlReceiveData(phost,
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	6899      	ldr	r1, [r3, #8]
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	899a      	ldrh	r2, [r3, #12]
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	791b      	ldrb	r3, [r3, #4]
 8007d20:	6878      	ldr	r0, [r7, #4]
 8007d22:	f000 f930 	bl	8007f86 <USBH_CtlReceiveData>
                        phost->Control.buff,
                        phost->Control.length,
                        phost->Control.pipe_in);

    phost->Control.state = CTRL_DATA_IN_WAIT;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	2204      	movs	r2, #4
 8007d2a:	761a      	strb	r2, [r3, #24]
    break;
 8007d2c:	e0e7      	b.n	8007efe <USBH_HandleControl+0x2ca>

  case CTRL_DATA_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	791b      	ldrb	r3, [r3, #4]
 8007d32:	4619      	mov	r1, r3
 8007d34:	6878      	ldr	r0, [r7, #4]
 8007d36:	f002 fe1f 	bl	800a978 <USBH_LL_GetURBState>
 8007d3a:	4603      	mov	r3, r0
 8007d3c:	73bb      	strb	r3, [r7, #14]

    /* check is DATA packet transferred successfully */
    if  (URB_Status == USBH_URB_DONE)
 8007d3e:	7bbb      	ldrb	r3, [r7, #14]
 8007d40:	2b01      	cmp	r3, #1
 8007d42:	d102      	bne.n	8007d4a <USBH_HandleControl+0x116>
    {
      phost->Control.state = CTRL_STATUS_OUT;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	2209      	movs	r2, #9
 8007d48:	761a      	strb	r2, [r3, #24]
#endif
#endif
    }

    /* manage error cases*/
    if  (URB_Status == USBH_URB_STALL)
 8007d4a:	7bbb      	ldrb	r3, [r7, #14]
 8007d4c:	2b05      	cmp	r3, #5
 8007d4e:	d102      	bne.n	8007d56 <USBH_HandleControl+0x122>
    {
      /* In stall case, return to previous machine state*/
      status = USBH_NOT_SUPPORTED;
 8007d50:	2303      	movs	r3, #3
 8007d52:	73fb      	strb	r3, [r7, #15]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8007d54:	e0cc      	b.n	8007ef0 <USBH_HandleControl+0x2bc>
      if (URB_Status == USBH_URB_ERROR)
 8007d56:	7bbb      	ldrb	r3, [r7, #14]
 8007d58:	2b04      	cmp	r3, #4
 8007d5a:	f040 80c9 	bne.w	8007ef0 <USBH_HandleControl+0x2bc>
        phost->Control.state = CTRL_ERROR;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	220b      	movs	r2, #11
 8007d62:	761a      	strb	r2, [r3, #24]
    break;
 8007d64:	e0c4      	b.n	8007ef0 <USBH_HandleControl+0x2bc>

  case CTRL_DATA_OUT:

    USBH_CtlSendData (phost,
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	6899      	ldr	r1, [r3, #8]
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	899a      	ldrh	r2, [r3, #12]
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	7958      	ldrb	r0, [r3, #5]
 8007d72:	2301      	movs	r3, #1
 8007d74:	9300      	str	r3, [sp, #0]
 8007d76:	4603      	mov	r3, r0
 8007d78:	6878      	ldr	r0, [r7, #4]
 8007d7a:	f000 f8df 	bl	8007f3c <USBH_CtlSendData>
                      phost->Control.buff,
                      phost->Control.length ,
                      phost->Control.pipe_out,
                      1U);
     phost->Control.timer = (uint16_t)phost->Timer;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8007d84:	b29a      	uxth	r2, r3
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_DATA_OUT_WAIT;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	2206      	movs	r2, #6
 8007d8e:	761a      	strb	r2, [r3, #24]
    break;
 8007d90:	e0b5      	b.n	8007efe <USBH_HandleControl+0x2ca>

  case CTRL_DATA_OUT_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	795b      	ldrb	r3, [r3, #5]
 8007d96:	4619      	mov	r1, r3
 8007d98:	6878      	ldr	r0, [r7, #4]
 8007d9a:	f002 fded 	bl	800a978 <USBH_LL_GetURBState>
 8007d9e:	4603      	mov	r3, r0
 8007da0:	73bb      	strb	r3, [r7, #14]

    if  (URB_Status == USBH_URB_DONE)
 8007da2:	7bbb      	ldrb	r3, [r7, #14]
 8007da4:	2b01      	cmp	r3, #1
 8007da6:	d103      	bne.n	8007db0 <USBH_HandleControl+0x17c>
    { /* If the Setup Pkt is sent successful, then change the state */
      phost->Control.state = CTRL_STATUS_IN;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	2207      	movs	r2, #7
 8007dac:	761a      	strb	r2, [r3, #24]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8007dae:	e0a1      	b.n	8007ef4 <USBH_HandleControl+0x2c0>
    else if  (URB_Status == USBH_URB_STALL)
 8007db0:	7bbb      	ldrb	r3, [r7, #14]
 8007db2:	2b05      	cmp	r3, #5
 8007db4:	d105      	bne.n	8007dc2 <USBH_HandleControl+0x18e>
      phost->Control.state = CTRL_STALLED;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	220c      	movs	r2, #12
 8007dba:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 8007dbc:	2303      	movs	r3, #3
 8007dbe:	73fb      	strb	r3, [r7, #15]
    break;
 8007dc0:	e098      	b.n	8007ef4 <USBH_HandleControl+0x2c0>
    else if  (URB_Status == USBH_URB_NOTREADY)
 8007dc2:	7bbb      	ldrb	r3, [r7, #14]
 8007dc4:	2b02      	cmp	r3, #2
 8007dc6:	d103      	bne.n	8007dd0 <USBH_HandleControl+0x19c>
      phost->Control.state = CTRL_DATA_OUT;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	2205      	movs	r2, #5
 8007dcc:	761a      	strb	r2, [r3, #24]
    break;
 8007dce:	e091      	b.n	8007ef4 <USBH_HandleControl+0x2c0>
      if (URB_Status == USBH_URB_ERROR)
 8007dd0:	7bbb      	ldrb	r3, [r7, #14]
 8007dd2:	2b04      	cmp	r3, #4
 8007dd4:	f040 808e 	bne.w	8007ef4 <USBH_HandleControl+0x2c0>
        phost->Control.state = CTRL_ERROR;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	220b      	movs	r2, #11
 8007ddc:	761a      	strb	r2, [r3, #24]
        status = USBH_FAIL;
 8007dde:	2302      	movs	r3, #2
 8007de0:	73fb      	strb	r3, [r7, #15]
    break;
 8007de2:	e087      	b.n	8007ef4 <USBH_HandleControl+0x2c0>


  case CTRL_STATUS_IN:
    /* Send 0 bytes out packet */
    USBH_CtlReceiveData (phost,
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	791b      	ldrb	r3, [r3, #4]
 8007de8:	2200      	movs	r2, #0
 8007dea:	2100      	movs	r1, #0
 8007dec:	6878      	ldr	r0, [r7, #4]
 8007dee:	f000 f8ca 	bl	8007f86 <USBH_CtlReceiveData>
                         0U,
                         0U,
                         phost->Control.pipe_in);
    phost->Control.timer = (uint16_t)phost->Timer;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8007df8:	b29a      	uxth	r2, r3
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_IN_WAIT;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	2208      	movs	r2, #8
 8007e02:	761a      	strb	r2, [r3, #24]

    break;
 8007e04:	e07b      	b.n	8007efe <USBH_HandleControl+0x2ca>

  case CTRL_STATUS_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	791b      	ldrb	r3, [r3, #4]
 8007e0a:	4619      	mov	r1, r3
 8007e0c:	6878      	ldr	r0, [r7, #4]
 8007e0e:	f002 fdb3 	bl	800a978 <USBH_LL_GetURBState>
 8007e12:	4603      	mov	r3, r0
 8007e14:	73bb      	strb	r3, [r7, #14]

    if  ( URB_Status == USBH_URB_DONE)
 8007e16:	7bbb      	ldrb	r3, [r7, #14]
 8007e18:	2b01      	cmp	r3, #1
 8007e1a:	d105      	bne.n	8007e28 <USBH_HandleControl+0x1f4>
    { /* Control transfers completed, Exit the State Machine */
      phost->Control.state = CTRL_COMPLETE;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	220d      	movs	r2, #13
 8007e20:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 8007e22:	2300      	movs	r3, #0
 8007e24:	73fb      	strb	r3, [r7, #15]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8007e26:	e067      	b.n	8007ef8 <USBH_HandleControl+0x2c4>
    else if (URB_Status == USBH_URB_ERROR)
 8007e28:	7bbb      	ldrb	r3, [r7, #14]
 8007e2a:	2b04      	cmp	r3, #4
 8007e2c:	d103      	bne.n	8007e36 <USBH_HandleControl+0x202>
      phost->Control.state = CTRL_ERROR;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	220b      	movs	r2, #11
 8007e32:	761a      	strb	r2, [r3, #24]
    break;
 8007e34:	e060      	b.n	8007ef8 <USBH_HandleControl+0x2c4>
      if(URB_Status == USBH_URB_STALL)
 8007e36:	7bbb      	ldrb	r3, [r7, #14]
 8007e38:	2b05      	cmp	r3, #5
 8007e3a:	d15d      	bne.n	8007ef8 <USBH_HandleControl+0x2c4>
        status = USBH_NOT_SUPPORTED;
 8007e3c:	2303      	movs	r3, #3
 8007e3e:	73fb      	strb	r3, [r7, #15]
    break;
 8007e40:	e05a      	b.n	8007ef8 <USBH_HandleControl+0x2c4>

  case CTRL_STATUS_OUT:
    USBH_CtlSendData (phost,
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	795a      	ldrb	r2, [r3, #5]
 8007e46:	2301      	movs	r3, #1
 8007e48:	9300      	str	r3, [sp, #0]
 8007e4a:	4613      	mov	r3, r2
 8007e4c:	2200      	movs	r2, #0
 8007e4e:	2100      	movs	r1, #0
 8007e50:	6878      	ldr	r0, [r7, #4]
 8007e52:	f000 f873 	bl	8007f3c <USBH_CtlSendData>
                      0U,
                      0U,
                      phost->Control.pipe_out,
                      1U);
     phost->Control.timer = (uint16_t)phost->Timer;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8007e5c:	b29a      	uxth	r2, r3
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	220a      	movs	r2, #10
 8007e66:	761a      	strb	r2, [r3, #24]
    break;
 8007e68:	e049      	b.n	8007efe <USBH_HandleControl+0x2ca>

  case CTRL_STATUS_OUT_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	795b      	ldrb	r3, [r3, #5]
 8007e6e:	4619      	mov	r1, r3
 8007e70:	6878      	ldr	r0, [r7, #4]
 8007e72:	f002 fd81 	bl	800a978 <USBH_LL_GetURBState>
 8007e76:	4603      	mov	r3, r0
 8007e78:	73bb      	strb	r3, [r7, #14]
    if  (URB_Status == USBH_URB_DONE)
 8007e7a:	7bbb      	ldrb	r3, [r7, #14]
 8007e7c:	2b01      	cmp	r3, #1
 8007e7e:	d105      	bne.n	8007e8c <USBH_HandleControl+0x258>
    {
      status = USBH_OK;
 8007e80:	2300      	movs	r3, #0
 8007e82:	73fb      	strb	r3, [r7, #15]
      phost->Control.state = CTRL_COMPLETE;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	220d      	movs	r2, #13
 8007e88:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

    }
    break;
 8007e8a:	e037      	b.n	8007efc <USBH_HandleControl+0x2c8>
    else if  (URB_Status == USBH_URB_NOTREADY)
 8007e8c:	7bbb      	ldrb	r3, [r7, #14]
 8007e8e:	2b02      	cmp	r3, #2
 8007e90:	d103      	bne.n	8007e9a <USBH_HandleControl+0x266>
      phost->Control.state = CTRL_STATUS_OUT;
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	2209      	movs	r2, #9
 8007e96:	761a      	strb	r2, [r3, #24]
    break;
 8007e98:	e030      	b.n	8007efc <USBH_HandleControl+0x2c8>
      if (URB_Status == USBH_URB_ERROR)
 8007e9a:	7bbb      	ldrb	r3, [r7, #14]
 8007e9c:	2b04      	cmp	r3, #4
 8007e9e:	d12d      	bne.n	8007efc <USBH_HandleControl+0x2c8>
        phost->Control.state = CTRL_ERROR;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	220b      	movs	r2, #11
 8007ea4:	761a      	strb	r2, [r3, #24]
    break;
 8007ea6:	e029      	b.n	8007efc <USBH_HandleControl+0x2c8>
    PID; i.e., recovery actions via some other pipe are not required for control
    endpoints. For the Default Control Pipe, a device reset will ultimately be
    required to clear the halt or error condition if the next Setup PID is not
    accepted.
    */
    if (++ phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	7e5b      	ldrb	r3, [r3, #25]
 8007eac:	3301      	adds	r3, #1
 8007eae:	b2da      	uxtb	r2, r3
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	765a      	strb	r2, [r3, #25]
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	7e5b      	ldrb	r3, [r3, #25]
 8007eb8:	2b02      	cmp	r3, #2
 8007eba:	d809      	bhi.n	8007ed0 <USBH_HandleControl+0x29c>
    {
      /* try to recover control */
      USBH_LL_Stop(phost);
 8007ebc:	6878      	ldr	r0, [r7, #4]
 8007ebe:	f002 fc6e 	bl	800a79e <USBH_LL_Stop>

      /* Do the transmission again, starting from SETUP Packet */
      phost->Control.state = CTRL_SETUP;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	2201      	movs	r2, #1
 8007ec6:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_SEND;
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	2201      	movs	r2, #1
 8007ecc:	709a      	strb	r2, [r3, #2]
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
      phost->Control.errorcount = 0U;
      USBH_ErrLog("Control error");
      status = USBH_FAIL;
    }
    break;
 8007ece:	e016      	b.n	8007efe <USBH_HandleControl+0x2ca>
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007ed6:	2106      	movs	r1, #6
 8007ed8:	6878      	ldr	r0, [r7, #4]
 8007eda:	4798      	blx	r3
      phost->Control.errorcount = 0U;
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	2200      	movs	r2, #0
 8007ee0:	765a      	strb	r2, [r3, #25]
      status = USBH_FAIL;
 8007ee2:	2302      	movs	r3, #2
 8007ee4:	73fb      	strb	r3, [r7, #15]
    break;
 8007ee6:	e00a      	b.n	8007efe <USBH_HandleControl+0x2ca>

  default:
    break;
 8007ee8:	bf00      	nop
 8007eea:	e008      	b.n	8007efe <USBH_HandleControl+0x2ca>
    break;
 8007eec:	bf00      	nop
 8007eee:	e006      	b.n	8007efe <USBH_HandleControl+0x2ca>
    break;
 8007ef0:	bf00      	nop
 8007ef2:	e004      	b.n	8007efe <USBH_HandleControl+0x2ca>
    break;
 8007ef4:	bf00      	nop
 8007ef6:	e002      	b.n	8007efe <USBH_HandleControl+0x2ca>
    break;
 8007ef8:	bf00      	nop
 8007efa:	e000      	b.n	8007efe <USBH_HandleControl+0x2ca>
    break;
 8007efc:	bf00      	nop
  }
  return status;
 8007efe:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f00:	4618      	mov	r0, r3
 8007f02:	3710      	adds	r7, #16
 8007f04:	46bd      	mov	sp, r7
 8007f06:	bd80      	pop	{r7, pc}

08007f08 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint8_t pipe_num)
{
 8007f08:	b580      	push	{r7, lr}
 8007f0a:	b088      	sub	sp, #32
 8007f0c:	af04      	add	r7, sp, #16
 8007f0e:	60f8      	str	r0, [r7, #12]
 8007f10:	60b9      	str	r1, [r7, #8]
 8007f12:	4613      	mov	r3, r2
 8007f14:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8007f16:	79f9      	ldrb	r1, [r7, #7]
 8007f18:	2300      	movs	r3, #0
 8007f1a:	9303      	str	r3, [sp, #12]
 8007f1c:	2308      	movs	r3, #8
 8007f1e:	9302      	str	r3, [sp, #8]
 8007f20:	68bb      	ldr	r3, [r7, #8]
 8007f22:	9301      	str	r3, [sp, #4]
 8007f24:	2300      	movs	r3, #0
 8007f26:	9300      	str	r3, [sp, #0]
 8007f28:	2300      	movs	r3, #0
 8007f2a:	2200      	movs	r2, #0
 8007f2c:	68f8      	ldr	r0, [r7, #12]
 8007f2e:	f002 fcf2 	bl	800a916 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8007f32:	2300      	movs	r3, #0
}
 8007f34:	4618      	mov	r0, r3
 8007f36:	3710      	adds	r7, #16
 8007f38:	46bd      	mov	sp, r7
 8007f3a:	bd80      	pop	{r7, pc}

08007f3c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping )
{
 8007f3c:	b580      	push	{r7, lr}
 8007f3e:	b088      	sub	sp, #32
 8007f40:	af04      	add	r7, sp, #16
 8007f42:	60f8      	str	r0, [r7, #12]
 8007f44:	60b9      	str	r1, [r7, #8]
 8007f46:	4611      	mov	r1, r2
 8007f48:	461a      	mov	r2, r3
 8007f4a:	460b      	mov	r3, r1
 8007f4c:	80fb      	strh	r3, [r7, #6]
 8007f4e:	4613      	mov	r3, r2
 8007f50:	717b      	strb	r3, [r7, #5]
  if(phost->device.speed != USBH_SPEED_HIGH)
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d001      	beq.n	8007f60 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8007f5c:	2300      	movs	r3, #0
 8007f5e:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8007f60:	7979      	ldrb	r1, [r7, #5]
 8007f62:	7e3b      	ldrb	r3, [r7, #24]
 8007f64:	9303      	str	r3, [sp, #12]
 8007f66:	88fb      	ldrh	r3, [r7, #6]
 8007f68:	9302      	str	r3, [sp, #8]
 8007f6a:	68bb      	ldr	r3, [r7, #8]
 8007f6c:	9301      	str	r3, [sp, #4]
 8007f6e:	2301      	movs	r3, #1
 8007f70:	9300      	str	r3, [sp, #0]
 8007f72:	2300      	movs	r3, #0
 8007f74:	2200      	movs	r2, #0
 8007f76:	68f8      	ldr	r0, [r7, #12]
 8007f78:	f002 fccd 	bl	800a916 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8007f7c:	2300      	movs	r3, #0
}
 8007f7e:	4618      	mov	r0, r3
 8007f80:	3710      	adds	r7, #16
 8007f82:	46bd      	mov	sp, r7
 8007f84:	bd80      	pop	{r7, pc}

08007f86 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t* buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 8007f86:	b580      	push	{r7, lr}
 8007f88:	b088      	sub	sp, #32
 8007f8a:	af04      	add	r7, sp, #16
 8007f8c:	60f8      	str	r0, [r7, #12]
 8007f8e:	60b9      	str	r1, [r7, #8]
 8007f90:	4611      	mov	r1, r2
 8007f92:	461a      	mov	r2, r3
 8007f94:	460b      	mov	r3, r1
 8007f96:	80fb      	strh	r3, [r7, #6]
 8007f98:	4613      	mov	r3, r2
 8007f9a:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8007f9c:	7979      	ldrb	r1, [r7, #5]
 8007f9e:	2300      	movs	r3, #0
 8007fa0:	9303      	str	r3, [sp, #12]
 8007fa2:	88fb      	ldrh	r3, [r7, #6]
 8007fa4:	9302      	str	r3, [sp, #8]
 8007fa6:	68bb      	ldr	r3, [r7, #8]
 8007fa8:	9301      	str	r3, [sp, #4]
 8007faa:	2301      	movs	r3, #1
 8007fac:	9300      	str	r3, [sp, #0]
 8007fae:	2300      	movs	r3, #0
 8007fb0:	2201      	movs	r2, #1
 8007fb2:	68f8      	ldr	r0, [r7, #12]
 8007fb4:	f002 fcaf 	bl	800a916 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8007fb8:	2300      	movs	r3, #0

}
 8007fba:	4618      	mov	r0, r3
 8007fbc:	3710      	adds	r7, #16
 8007fbe:	46bd      	mov	sp, r7
 8007fc0:	bd80      	pop	{r7, pc}

08007fc2 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping)
{
 8007fc2:	b580      	push	{r7, lr}
 8007fc4:	b088      	sub	sp, #32
 8007fc6:	af04      	add	r7, sp, #16
 8007fc8:	60f8      	str	r0, [r7, #12]
 8007fca:	60b9      	str	r1, [r7, #8]
 8007fcc:	4611      	mov	r1, r2
 8007fce:	461a      	mov	r2, r3
 8007fd0:	460b      	mov	r3, r1
 8007fd2:	80fb      	strh	r3, [r7, #6]
 8007fd4:	4613      	mov	r3, r2
 8007fd6:	717b      	strb	r3, [r7, #5]
  if(phost->device.speed != USBH_SPEED_HIGH)
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d001      	beq.n	8007fe6 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8007fe2:	2300      	movs	r3, #0
 8007fe4:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8007fe6:	7979      	ldrb	r1, [r7, #5]
 8007fe8:	7e3b      	ldrb	r3, [r7, #24]
 8007fea:	9303      	str	r3, [sp, #12]
 8007fec:	88fb      	ldrh	r3, [r7, #6]
 8007fee:	9302      	str	r3, [sp, #8]
 8007ff0:	68bb      	ldr	r3, [r7, #8]
 8007ff2:	9301      	str	r3, [sp, #4]
 8007ff4:	2301      	movs	r3, #1
 8007ff6:	9300      	str	r3, [sp, #0]
 8007ff8:	2302      	movs	r3, #2
 8007ffa:	2200      	movs	r2, #0
 8007ffc:	68f8      	ldr	r0, [r7, #12]
 8007ffe:	f002 fc8a 	bl	800a916 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8008002:	2300      	movs	r3, #0
}
 8008004:	4618      	mov	r0, r3
 8008006:	3710      	adds	r7, #16
 8008008:	46bd      	mov	sp, r7
 800800a:	bd80      	pop	{r7, pc}

0800800c <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 800800c:	b580      	push	{r7, lr}
 800800e:	b088      	sub	sp, #32
 8008010:	af04      	add	r7, sp, #16
 8008012:	60f8      	str	r0, [r7, #12]
 8008014:	60b9      	str	r1, [r7, #8]
 8008016:	4611      	mov	r1, r2
 8008018:	461a      	mov	r2, r3
 800801a:	460b      	mov	r3, r1
 800801c:	80fb      	strh	r3, [r7, #6]
 800801e:	4613      	mov	r3, r2
 8008020:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8008022:	7979      	ldrb	r1, [r7, #5]
 8008024:	2300      	movs	r3, #0
 8008026:	9303      	str	r3, [sp, #12]
 8008028:	88fb      	ldrh	r3, [r7, #6]
 800802a:	9302      	str	r3, [sp, #8]
 800802c:	68bb      	ldr	r3, [r7, #8]
 800802e:	9301      	str	r3, [sp, #4]
 8008030:	2301      	movs	r3, #1
 8008032:	9300      	str	r3, [sp, #0]
 8008034:	2302      	movs	r3, #2
 8008036:	2201      	movs	r2, #1
 8008038:	68f8      	ldr	r0, [r7, #12]
 800803a:	f002 fc6c 	bl	800a916 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800803e:	2300      	movs	r3, #0
}
 8008040:	4618      	mov	r0, r3
 8008042:	3710      	adds	r7, #16
 8008044:	46bd      	mov	sp, r7
 8008046:	bd80      	pop	{r7, pc}

08008048 <USBH_OpenPipe>:
                            uint8_t epnum,
                            uint8_t dev_address,
                            uint8_t speed,
                            uint8_t ep_type,
                            uint16_t mps)
{
 8008048:	b580      	push	{r7, lr}
 800804a:	b086      	sub	sp, #24
 800804c:	af04      	add	r7, sp, #16
 800804e:	6078      	str	r0, [r7, #4]
 8008050:	4608      	mov	r0, r1
 8008052:	4611      	mov	r1, r2
 8008054:	461a      	mov	r2, r3
 8008056:	4603      	mov	r3, r0
 8008058:	70fb      	strb	r3, [r7, #3]
 800805a:	460b      	mov	r3, r1
 800805c:	70bb      	strb	r3, [r7, #2]
 800805e:	4613      	mov	r3, r2
 8008060:	707b      	strb	r3, [r7, #1]

  USBH_LL_OpenPipe(phost,
 8008062:	7878      	ldrb	r0, [r7, #1]
 8008064:	78ba      	ldrb	r2, [r7, #2]
 8008066:	78f9      	ldrb	r1, [r7, #3]
 8008068:	8b3b      	ldrh	r3, [r7, #24]
 800806a:	9302      	str	r3, [sp, #8]
 800806c:	7d3b      	ldrb	r3, [r7, #20]
 800806e:	9301      	str	r3, [sp, #4]
 8008070:	7c3b      	ldrb	r3, [r7, #16]
 8008072:	9300      	str	r3, [sp, #0]
 8008074:	4603      	mov	r3, r0
 8008076:	6878      	ldr	r0, [r7, #4]
 8008078:	f002 fbff 	bl	800a87a <USBH_LL_OpenPipe>
                        dev_address,
                        speed,
                        ep_type,
                        mps);

  return USBH_OK;
 800807c:	2300      	movs	r3, #0

}
 800807e:	4618      	mov	r0, r3
 8008080:	3708      	adds	r7, #8
 8008082:	46bd      	mov	sp, r7
 8008084:	bd80      	pop	{r7, pc}

08008086 <USBH_ClosePipe>:
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe  (USBH_HandleTypeDef *phost,
                            uint8_t pipe_num)
{
 8008086:	b580      	push	{r7, lr}
 8008088:	b082      	sub	sp, #8
 800808a:	af00      	add	r7, sp, #0
 800808c:	6078      	str	r0, [r7, #4]
 800808e:	460b      	mov	r3, r1
 8008090:	70fb      	strb	r3, [r7, #3]

  USBH_LL_ClosePipe(phost, pipe_num);
 8008092:	78fb      	ldrb	r3, [r7, #3]
 8008094:	4619      	mov	r1, r3
 8008096:	6878      	ldr	r0, [r7, #4]
 8008098:	f002 fc1e 	bl	800a8d8 <USBH_LL_ClosePipe>

  return USBH_OK;
 800809c:	2300      	movs	r3, #0

}
 800809e:	4618      	mov	r0, r3
 80080a0:	3708      	adds	r7, #8
 80080a2:	46bd      	mov	sp, r7
 80080a4:	bd80      	pop	{r7, pc}

080080a6 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe  (USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 80080a6:	b580      	push	{r7, lr}
 80080a8:	b084      	sub	sp, #16
 80080aa:	af00      	add	r7, sp, #0
 80080ac:	6078      	str	r0, [r7, #4]
 80080ae:	460b      	mov	r3, r1
 80080b0:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 80080b2:	6878      	ldr	r0, [r7, #4]
 80080b4:	f000 f831 	bl	800811a <USBH_GetFreePipe>
 80080b8:	4603      	mov	r3, r0
 80080ba:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 80080bc:	89fb      	ldrh	r3, [r7, #14]
 80080be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80080c2:	4293      	cmp	r3, r2
 80080c4:	d007      	beq.n	80080d6 <USBH_AllocPipe+0x30>
  {
	phost->Pipes[pipe] = 0x8000U | ep_addr;
 80080c6:	78fb      	ldrb	r3, [r7, #3]
 80080c8:	89fa      	ldrh	r2, [r7, #14]
 80080ca:	f443 4100 	orr.w	r1, r3, #32768	; 0x8000
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	32e0      	adds	r2, #224	; 0xe0
 80080d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }
  return (uint8_t)pipe;
 80080d6:	89fb      	ldrh	r3, [r7, #14]
 80080d8:	b2db      	uxtb	r3, r3
}
 80080da:	4618      	mov	r0, r3
 80080dc:	3710      	adds	r7, #16
 80080de:	46bd      	mov	sp, r7
 80080e0:	bd80      	pop	{r7, pc}

080080e2 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe  (USBH_HandleTypeDef *phost, uint8_t idx)
{
 80080e2:	b480      	push	{r7}
 80080e4:	b083      	sub	sp, #12
 80080e6:	af00      	add	r7, sp, #0
 80080e8:	6078      	str	r0, [r7, #4]
 80080ea:	460b      	mov	r3, r1
 80080ec:	70fb      	strb	r3, [r7, #3]
   if(idx < 11U)
 80080ee:	78fb      	ldrb	r3, [r7, #3]
 80080f0:	2b0a      	cmp	r3, #10
 80080f2:	d80b      	bhi.n	800810c <USBH_FreePipe+0x2a>
   {
	 phost->Pipes[idx] &= 0x7FFFU;
 80080f4:	78fa      	ldrb	r2, [r7, #3]
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	32e0      	adds	r2, #224	; 0xe0
 80080fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080fe:	78fa      	ldrb	r2, [r7, #3]
 8008100:	f3c3 010e 	ubfx	r1, r3, #0, #15
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	32e0      	adds	r2, #224	; 0xe0
 8008108:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   }
   return USBH_OK;
 800810c:	2300      	movs	r3, #0
}
 800810e:	4618      	mov	r0, r3
 8008110:	370c      	adds	r7, #12
 8008112:	46bd      	mov	sp, r7
 8008114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008118:	4770      	bx	lr

0800811a <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe (USBH_HandleTypeDef *phost)
{
 800811a:	b480      	push	{r7}
 800811c:	b085      	sub	sp, #20
 800811e:	af00      	add	r7, sp, #0
 8008120:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8008122:	2300      	movs	r3, #0
 8008124:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8008126:	2300      	movs	r3, #0
 8008128:	73fb      	strb	r3, [r7, #15]
 800812a:	e00e      	b.n	800814a <USBH_GetFreePipe+0x30>
  {
	if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800812c:	7bfa      	ldrb	r2, [r7, #15]
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	32e0      	adds	r2, #224	; 0xe0
 8008132:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008136:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800813a:	2b00      	cmp	r3, #0
 800813c:	d102      	bne.n	8008144 <USBH_GetFreePipe+0x2a>
	{
	   return (uint16_t)idx;
 800813e:	7bfb      	ldrb	r3, [r7, #15]
 8008140:	b29b      	uxth	r3, r3
 8008142:	e007      	b.n	8008154 <USBH_GetFreePipe+0x3a>
  for (idx = 0U ; idx < 11U ; idx++)
 8008144:	7bfb      	ldrb	r3, [r7, #15]
 8008146:	3301      	adds	r3, #1
 8008148:	73fb      	strb	r3, [r7, #15]
 800814a:	7bfb      	ldrb	r3, [r7, #15]
 800814c:	2b0a      	cmp	r3, #10
 800814e:	d9ed      	bls.n	800812c <USBH_GetFreePipe+0x12>
	}
  }
  return 0xFFFFU;
 8008150:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8008154:	4618      	mov	r0, r3
 8008156:	3714      	adds	r7, #20
 8008158:	46bd      	mov	sp, r7
 800815a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800815e:	4770      	bx	lr

08008160 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8008160:	b580      	push	{r7, lr}
 8008162:	b084      	sub	sp, #16
 8008164:	af00      	add	r7, sp, #0
 8008166:	4603      	mov	r3, r0
 8008168:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800816a:	79fb      	ldrb	r3, [r7, #7]
 800816c:	4a08      	ldr	r2, [pc, #32]	; (8008190 <disk_status+0x30>)
 800816e:	009b      	lsls	r3, r3, #2
 8008170:	4413      	add	r3, r2
 8008172:	685b      	ldr	r3, [r3, #4]
 8008174:	685b      	ldr	r3, [r3, #4]
 8008176:	79fa      	ldrb	r2, [r7, #7]
 8008178:	4905      	ldr	r1, [pc, #20]	; (8008190 <disk_status+0x30>)
 800817a:	440a      	add	r2, r1
 800817c:	7a12      	ldrb	r2, [r2, #8]
 800817e:	4610      	mov	r0, r2
 8008180:	4798      	blx	r3
 8008182:	4603      	mov	r3, r0
 8008184:	73fb      	strb	r3, [r7, #15]
  return stat;
 8008186:	7bfb      	ldrb	r3, [r7, #15]
}
 8008188:	4618      	mov	r0, r3
 800818a:	3710      	adds	r7, #16
 800818c:	46bd      	mov	sp, r7
 800818e:	bd80      	pop	{r7, pc}
 8008190:	200000dc 	.word	0x200000dc

08008194 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8008194:	b580      	push	{r7, lr}
 8008196:	b084      	sub	sp, #16
 8008198:	af00      	add	r7, sp, #0
 800819a:	4603      	mov	r3, r0
 800819c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800819e:	2300      	movs	r3, #0
 80081a0:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80081a2:	79fb      	ldrb	r3, [r7, #7]
 80081a4:	4a0d      	ldr	r2, [pc, #52]	; (80081dc <disk_initialize+0x48>)
 80081a6:	5cd3      	ldrb	r3, [r2, r3]
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d111      	bne.n	80081d0 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80081ac:	79fb      	ldrb	r3, [r7, #7]
 80081ae:	4a0b      	ldr	r2, [pc, #44]	; (80081dc <disk_initialize+0x48>)
 80081b0:	2101      	movs	r1, #1
 80081b2:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80081b4:	79fb      	ldrb	r3, [r7, #7]
 80081b6:	4a09      	ldr	r2, [pc, #36]	; (80081dc <disk_initialize+0x48>)
 80081b8:	009b      	lsls	r3, r3, #2
 80081ba:	4413      	add	r3, r2
 80081bc:	685b      	ldr	r3, [r3, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	79fa      	ldrb	r2, [r7, #7]
 80081c2:	4906      	ldr	r1, [pc, #24]	; (80081dc <disk_initialize+0x48>)
 80081c4:	440a      	add	r2, r1
 80081c6:	7a12      	ldrb	r2, [r2, #8]
 80081c8:	4610      	mov	r0, r2
 80081ca:	4798      	blx	r3
 80081cc:	4603      	mov	r3, r0
 80081ce:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80081d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80081d2:	4618      	mov	r0, r3
 80081d4:	3710      	adds	r7, #16
 80081d6:	46bd      	mov	sp, r7
 80081d8:	bd80      	pop	{r7, pc}
 80081da:	bf00      	nop
 80081dc:	200000dc 	.word	0x200000dc

080081e0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80081e0:	b590      	push	{r4, r7, lr}
 80081e2:	b087      	sub	sp, #28
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	60b9      	str	r1, [r7, #8]
 80081e8:	607a      	str	r2, [r7, #4]
 80081ea:	603b      	str	r3, [r7, #0]
 80081ec:	4603      	mov	r3, r0
 80081ee:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80081f0:	7bfb      	ldrb	r3, [r7, #15]
 80081f2:	4a0a      	ldr	r2, [pc, #40]	; (800821c <disk_read+0x3c>)
 80081f4:	009b      	lsls	r3, r3, #2
 80081f6:	4413      	add	r3, r2
 80081f8:	685b      	ldr	r3, [r3, #4]
 80081fa:	689c      	ldr	r4, [r3, #8]
 80081fc:	7bfb      	ldrb	r3, [r7, #15]
 80081fe:	4a07      	ldr	r2, [pc, #28]	; (800821c <disk_read+0x3c>)
 8008200:	4413      	add	r3, r2
 8008202:	7a18      	ldrb	r0, [r3, #8]
 8008204:	683b      	ldr	r3, [r7, #0]
 8008206:	687a      	ldr	r2, [r7, #4]
 8008208:	68b9      	ldr	r1, [r7, #8]
 800820a:	47a0      	blx	r4
 800820c:	4603      	mov	r3, r0
 800820e:	75fb      	strb	r3, [r7, #23]
  return res;
 8008210:	7dfb      	ldrb	r3, [r7, #23]
}
 8008212:	4618      	mov	r0, r3
 8008214:	371c      	adds	r7, #28
 8008216:	46bd      	mov	sp, r7
 8008218:	bd90      	pop	{r4, r7, pc}
 800821a:	bf00      	nop
 800821c:	200000dc 	.word	0x200000dc

08008220 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8008220:	b590      	push	{r4, r7, lr}
 8008222:	b087      	sub	sp, #28
 8008224:	af00      	add	r7, sp, #0
 8008226:	60b9      	str	r1, [r7, #8]
 8008228:	607a      	str	r2, [r7, #4]
 800822a:	603b      	str	r3, [r7, #0]
 800822c:	4603      	mov	r3, r0
 800822e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8008230:	7bfb      	ldrb	r3, [r7, #15]
 8008232:	4a0a      	ldr	r2, [pc, #40]	; (800825c <disk_write+0x3c>)
 8008234:	009b      	lsls	r3, r3, #2
 8008236:	4413      	add	r3, r2
 8008238:	685b      	ldr	r3, [r3, #4]
 800823a:	68dc      	ldr	r4, [r3, #12]
 800823c:	7bfb      	ldrb	r3, [r7, #15]
 800823e:	4a07      	ldr	r2, [pc, #28]	; (800825c <disk_write+0x3c>)
 8008240:	4413      	add	r3, r2
 8008242:	7a18      	ldrb	r0, [r3, #8]
 8008244:	683b      	ldr	r3, [r7, #0]
 8008246:	687a      	ldr	r2, [r7, #4]
 8008248:	68b9      	ldr	r1, [r7, #8]
 800824a:	47a0      	blx	r4
 800824c:	4603      	mov	r3, r0
 800824e:	75fb      	strb	r3, [r7, #23]
  return res;
 8008250:	7dfb      	ldrb	r3, [r7, #23]
}
 8008252:	4618      	mov	r0, r3
 8008254:	371c      	adds	r7, #28
 8008256:	46bd      	mov	sp, r7
 8008258:	bd90      	pop	{r4, r7, pc}
 800825a:	bf00      	nop
 800825c:	200000dc 	.word	0x200000dc

08008260 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8008260:	b580      	push	{r7, lr}
 8008262:	b084      	sub	sp, #16
 8008264:	af00      	add	r7, sp, #0
 8008266:	4603      	mov	r3, r0
 8008268:	603a      	str	r2, [r7, #0]
 800826a:	71fb      	strb	r3, [r7, #7]
 800826c:	460b      	mov	r3, r1
 800826e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8008270:	79fb      	ldrb	r3, [r7, #7]
 8008272:	4a09      	ldr	r2, [pc, #36]	; (8008298 <disk_ioctl+0x38>)
 8008274:	009b      	lsls	r3, r3, #2
 8008276:	4413      	add	r3, r2
 8008278:	685b      	ldr	r3, [r3, #4]
 800827a:	691b      	ldr	r3, [r3, #16]
 800827c:	79fa      	ldrb	r2, [r7, #7]
 800827e:	4906      	ldr	r1, [pc, #24]	; (8008298 <disk_ioctl+0x38>)
 8008280:	440a      	add	r2, r1
 8008282:	7a10      	ldrb	r0, [r2, #8]
 8008284:	79b9      	ldrb	r1, [r7, #6]
 8008286:	683a      	ldr	r2, [r7, #0]
 8008288:	4798      	blx	r3
 800828a:	4603      	mov	r3, r0
 800828c:	73fb      	strb	r3, [r7, #15]
  return res;
 800828e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008290:	4618      	mov	r0, r3
 8008292:	3710      	adds	r7, #16
 8008294:	46bd      	mov	sp, r7
 8008296:	bd80      	pop	{r7, pc}
 8008298:	200000dc 	.word	0x200000dc

0800829c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800829c:	b480      	push	{r7}
 800829e:	b085      	sub	sp, #20
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	3301      	adds	r3, #1
 80082a8:	781b      	ldrb	r3, [r3, #0]
 80082aa:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80082ac:	89fb      	ldrh	r3, [r7, #14]
 80082ae:	021b      	lsls	r3, r3, #8
 80082b0:	b21a      	sxth	r2, r3
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	781b      	ldrb	r3, [r3, #0]
 80082b6:	b21b      	sxth	r3, r3
 80082b8:	4313      	orrs	r3, r2
 80082ba:	b21b      	sxth	r3, r3
 80082bc:	81fb      	strh	r3, [r7, #14]
	return rv;
 80082be:	89fb      	ldrh	r3, [r7, #14]
}
 80082c0:	4618      	mov	r0, r3
 80082c2:	3714      	adds	r7, #20
 80082c4:	46bd      	mov	sp, r7
 80082c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ca:	4770      	bx	lr

080082cc <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80082cc:	b480      	push	{r7}
 80082ce:	b085      	sub	sp, #20
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	3303      	adds	r3, #3
 80082d8:	781b      	ldrb	r3, [r3, #0]
 80082da:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	021b      	lsls	r3, r3, #8
 80082e0:	687a      	ldr	r2, [r7, #4]
 80082e2:	3202      	adds	r2, #2
 80082e4:	7812      	ldrb	r2, [r2, #0]
 80082e6:	4313      	orrs	r3, r2
 80082e8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	021b      	lsls	r3, r3, #8
 80082ee:	687a      	ldr	r2, [r7, #4]
 80082f0:	3201      	adds	r2, #1
 80082f2:	7812      	ldrb	r2, [r2, #0]
 80082f4:	4313      	orrs	r3, r2
 80082f6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	021b      	lsls	r3, r3, #8
 80082fc:	687a      	ldr	r2, [r7, #4]
 80082fe:	7812      	ldrb	r2, [r2, #0]
 8008300:	4313      	orrs	r3, r2
 8008302:	60fb      	str	r3, [r7, #12]
	return rv;
 8008304:	68fb      	ldr	r3, [r7, #12]
}
 8008306:	4618      	mov	r0, r3
 8008308:	3714      	adds	r7, #20
 800830a:	46bd      	mov	sp, r7
 800830c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008310:	4770      	bx	lr

08008312 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8008312:	b480      	push	{r7}
 8008314:	b083      	sub	sp, #12
 8008316:	af00      	add	r7, sp, #0
 8008318:	6078      	str	r0, [r7, #4]
 800831a:	460b      	mov	r3, r1
 800831c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	1c5a      	adds	r2, r3, #1
 8008322:	607a      	str	r2, [r7, #4]
 8008324:	887a      	ldrh	r2, [r7, #2]
 8008326:	b2d2      	uxtb	r2, r2
 8008328:	701a      	strb	r2, [r3, #0]
 800832a:	887b      	ldrh	r3, [r7, #2]
 800832c:	0a1b      	lsrs	r3, r3, #8
 800832e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	1c5a      	adds	r2, r3, #1
 8008334:	607a      	str	r2, [r7, #4]
 8008336:	887a      	ldrh	r2, [r7, #2]
 8008338:	b2d2      	uxtb	r2, r2
 800833a:	701a      	strb	r2, [r3, #0]
}
 800833c:	bf00      	nop
 800833e:	370c      	adds	r7, #12
 8008340:	46bd      	mov	sp, r7
 8008342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008346:	4770      	bx	lr

08008348 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8008348:	b480      	push	{r7}
 800834a:	b083      	sub	sp, #12
 800834c:	af00      	add	r7, sp, #0
 800834e:	6078      	str	r0, [r7, #4]
 8008350:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	1c5a      	adds	r2, r3, #1
 8008356:	607a      	str	r2, [r7, #4]
 8008358:	683a      	ldr	r2, [r7, #0]
 800835a:	b2d2      	uxtb	r2, r2
 800835c:	701a      	strb	r2, [r3, #0]
 800835e:	683b      	ldr	r3, [r7, #0]
 8008360:	0a1b      	lsrs	r3, r3, #8
 8008362:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	1c5a      	adds	r2, r3, #1
 8008368:	607a      	str	r2, [r7, #4]
 800836a:	683a      	ldr	r2, [r7, #0]
 800836c:	b2d2      	uxtb	r2, r2
 800836e:	701a      	strb	r2, [r3, #0]
 8008370:	683b      	ldr	r3, [r7, #0]
 8008372:	0a1b      	lsrs	r3, r3, #8
 8008374:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	1c5a      	adds	r2, r3, #1
 800837a:	607a      	str	r2, [r7, #4]
 800837c:	683a      	ldr	r2, [r7, #0]
 800837e:	b2d2      	uxtb	r2, r2
 8008380:	701a      	strb	r2, [r3, #0]
 8008382:	683b      	ldr	r3, [r7, #0]
 8008384:	0a1b      	lsrs	r3, r3, #8
 8008386:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	1c5a      	adds	r2, r3, #1
 800838c:	607a      	str	r2, [r7, #4]
 800838e:	683a      	ldr	r2, [r7, #0]
 8008390:	b2d2      	uxtb	r2, r2
 8008392:	701a      	strb	r2, [r3, #0]
}
 8008394:	bf00      	nop
 8008396:	370c      	adds	r7, #12
 8008398:	46bd      	mov	sp, r7
 800839a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800839e:	4770      	bx	lr

080083a0 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80083a0:	b480      	push	{r7}
 80083a2:	b087      	sub	sp, #28
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	60f8      	str	r0, [r7, #12]
 80083a8:	60b9      	str	r1, [r7, #8]
 80083aa:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80083b0:	68bb      	ldr	r3, [r7, #8]
 80083b2:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d00d      	beq.n	80083d6 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80083ba:	693a      	ldr	r2, [r7, #16]
 80083bc:	1c53      	adds	r3, r2, #1
 80083be:	613b      	str	r3, [r7, #16]
 80083c0:	697b      	ldr	r3, [r7, #20]
 80083c2:	1c59      	adds	r1, r3, #1
 80083c4:	6179      	str	r1, [r7, #20]
 80083c6:	7812      	ldrb	r2, [r2, #0]
 80083c8:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	3b01      	subs	r3, #1
 80083ce:	607b      	str	r3, [r7, #4]
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d1f1      	bne.n	80083ba <mem_cpy+0x1a>
	}
}
 80083d6:	bf00      	nop
 80083d8:	371c      	adds	r7, #28
 80083da:	46bd      	mov	sp, r7
 80083dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e0:	4770      	bx	lr

080083e2 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80083e2:	b480      	push	{r7}
 80083e4:	b087      	sub	sp, #28
 80083e6:	af00      	add	r7, sp, #0
 80083e8:	60f8      	str	r0, [r7, #12]
 80083ea:	60b9      	str	r1, [r7, #8]
 80083ec:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80083f2:	697b      	ldr	r3, [r7, #20]
 80083f4:	1c5a      	adds	r2, r3, #1
 80083f6:	617a      	str	r2, [r7, #20]
 80083f8:	68ba      	ldr	r2, [r7, #8]
 80083fa:	b2d2      	uxtb	r2, r2
 80083fc:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	3b01      	subs	r3, #1
 8008402:	607b      	str	r3, [r7, #4]
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	2b00      	cmp	r3, #0
 8008408:	d1f3      	bne.n	80083f2 <mem_set+0x10>
}
 800840a:	bf00      	nop
 800840c:	371c      	adds	r7, #28
 800840e:	46bd      	mov	sp, r7
 8008410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008414:	4770      	bx	lr

08008416 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8008416:	b480      	push	{r7}
 8008418:	b089      	sub	sp, #36	; 0x24
 800841a:	af00      	add	r7, sp, #0
 800841c:	60f8      	str	r0, [r7, #12]
 800841e:	60b9      	str	r1, [r7, #8]
 8008420:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	61fb      	str	r3, [r7, #28]
 8008426:	68bb      	ldr	r3, [r7, #8]
 8008428:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800842a:	2300      	movs	r3, #0
 800842c:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800842e:	69fb      	ldr	r3, [r7, #28]
 8008430:	1c5a      	adds	r2, r3, #1
 8008432:	61fa      	str	r2, [r7, #28]
 8008434:	781b      	ldrb	r3, [r3, #0]
 8008436:	4619      	mov	r1, r3
 8008438:	69bb      	ldr	r3, [r7, #24]
 800843a:	1c5a      	adds	r2, r3, #1
 800843c:	61ba      	str	r2, [r7, #24]
 800843e:	781b      	ldrb	r3, [r3, #0]
 8008440:	1acb      	subs	r3, r1, r3
 8008442:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	3b01      	subs	r3, #1
 8008448:	607b      	str	r3, [r7, #4]
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	2b00      	cmp	r3, #0
 800844e:	d002      	beq.n	8008456 <mem_cmp+0x40>
 8008450:	697b      	ldr	r3, [r7, #20]
 8008452:	2b00      	cmp	r3, #0
 8008454:	d0eb      	beq.n	800842e <mem_cmp+0x18>

	return r;
 8008456:	697b      	ldr	r3, [r7, #20]
}
 8008458:	4618      	mov	r0, r3
 800845a:	3724      	adds	r7, #36	; 0x24
 800845c:	46bd      	mov	sp, r7
 800845e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008462:	4770      	bx	lr

08008464 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8008464:	b480      	push	{r7}
 8008466:	b083      	sub	sp, #12
 8008468:	af00      	add	r7, sp, #0
 800846a:	6078      	str	r0, [r7, #4]
 800846c:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800846e:	e002      	b.n	8008476 <chk_chr+0x12>
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	3301      	adds	r3, #1
 8008474:	607b      	str	r3, [r7, #4]
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	781b      	ldrb	r3, [r3, #0]
 800847a:	2b00      	cmp	r3, #0
 800847c:	d005      	beq.n	800848a <chk_chr+0x26>
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	781b      	ldrb	r3, [r3, #0]
 8008482:	461a      	mov	r2, r3
 8008484:	683b      	ldr	r3, [r7, #0]
 8008486:	4293      	cmp	r3, r2
 8008488:	d1f2      	bne.n	8008470 <chk_chr+0xc>
	return *str;
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	781b      	ldrb	r3, [r3, #0]
}
 800848e:	4618      	mov	r0, r3
 8008490:	370c      	adds	r7, #12
 8008492:	46bd      	mov	sp, r7
 8008494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008498:	4770      	bx	lr
	...

0800849c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800849c:	b480      	push	{r7}
 800849e:	b085      	sub	sp, #20
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	6078      	str	r0, [r7, #4]
 80084a4:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80084a6:	2300      	movs	r3, #0
 80084a8:	60bb      	str	r3, [r7, #8]
 80084aa:	68bb      	ldr	r3, [r7, #8]
 80084ac:	60fb      	str	r3, [r7, #12]
 80084ae:	e029      	b.n	8008504 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80084b0:	4a27      	ldr	r2, [pc, #156]	; (8008550 <chk_lock+0xb4>)
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	011b      	lsls	r3, r3, #4
 80084b6:	4413      	add	r3, r2
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d01d      	beq.n	80084fa <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80084be:	4a24      	ldr	r2, [pc, #144]	; (8008550 <chk_lock+0xb4>)
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	011b      	lsls	r3, r3, #4
 80084c4:	4413      	add	r3, r2
 80084c6:	681a      	ldr	r2, [r3, #0]
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	429a      	cmp	r2, r3
 80084ce:	d116      	bne.n	80084fe <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80084d0:	4a1f      	ldr	r2, [pc, #124]	; (8008550 <chk_lock+0xb4>)
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	011b      	lsls	r3, r3, #4
 80084d6:	4413      	add	r3, r2
 80084d8:	3304      	adds	r3, #4
 80084da:	681a      	ldr	r2, [r3, #0]
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80084e0:	429a      	cmp	r2, r3
 80084e2:	d10c      	bne.n	80084fe <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80084e4:	4a1a      	ldr	r2, [pc, #104]	; (8008550 <chk_lock+0xb4>)
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	011b      	lsls	r3, r3, #4
 80084ea:	4413      	add	r3, r2
 80084ec:	3308      	adds	r3, #8
 80084ee:	681a      	ldr	r2, [r3, #0]
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80084f4:	429a      	cmp	r2, r3
 80084f6:	d102      	bne.n	80084fe <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80084f8:	e007      	b.n	800850a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80084fa:	2301      	movs	r3, #1
 80084fc:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	3301      	adds	r3, #1
 8008502:	60fb      	str	r3, [r7, #12]
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	2b01      	cmp	r3, #1
 8008508:	d9d2      	bls.n	80084b0 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	2b02      	cmp	r3, #2
 800850e:	d109      	bne.n	8008524 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8008510:	68bb      	ldr	r3, [r7, #8]
 8008512:	2b00      	cmp	r3, #0
 8008514:	d102      	bne.n	800851c <chk_lock+0x80>
 8008516:	683b      	ldr	r3, [r7, #0]
 8008518:	2b02      	cmp	r3, #2
 800851a:	d101      	bne.n	8008520 <chk_lock+0x84>
 800851c:	2300      	movs	r3, #0
 800851e:	e010      	b.n	8008542 <chk_lock+0xa6>
 8008520:	2312      	movs	r3, #18
 8008522:	e00e      	b.n	8008542 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8008524:	683b      	ldr	r3, [r7, #0]
 8008526:	2b00      	cmp	r3, #0
 8008528:	d108      	bne.n	800853c <chk_lock+0xa0>
 800852a:	4a09      	ldr	r2, [pc, #36]	; (8008550 <chk_lock+0xb4>)
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	011b      	lsls	r3, r3, #4
 8008530:	4413      	add	r3, r2
 8008532:	330c      	adds	r3, #12
 8008534:	881b      	ldrh	r3, [r3, #0]
 8008536:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800853a:	d101      	bne.n	8008540 <chk_lock+0xa4>
 800853c:	2310      	movs	r3, #16
 800853e:	e000      	b.n	8008542 <chk_lock+0xa6>
 8008540:	2300      	movs	r3, #0
}
 8008542:	4618      	mov	r0, r3
 8008544:	3714      	adds	r7, #20
 8008546:	46bd      	mov	sp, r7
 8008548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800854c:	4770      	bx	lr
 800854e:	bf00      	nop
 8008550:	200000bc 	.word	0x200000bc

08008554 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8008554:	b480      	push	{r7}
 8008556:	b083      	sub	sp, #12
 8008558:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800855a:	2300      	movs	r3, #0
 800855c:	607b      	str	r3, [r7, #4]
 800855e:	e002      	b.n	8008566 <enq_lock+0x12>
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	3301      	adds	r3, #1
 8008564:	607b      	str	r3, [r7, #4]
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	2b01      	cmp	r3, #1
 800856a:	d806      	bhi.n	800857a <enq_lock+0x26>
 800856c:	4a09      	ldr	r2, [pc, #36]	; (8008594 <enq_lock+0x40>)
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	011b      	lsls	r3, r3, #4
 8008572:	4413      	add	r3, r2
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	2b00      	cmp	r3, #0
 8008578:	d1f2      	bne.n	8008560 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	2b02      	cmp	r3, #2
 800857e:	bf14      	ite	ne
 8008580:	2301      	movne	r3, #1
 8008582:	2300      	moveq	r3, #0
 8008584:	b2db      	uxtb	r3, r3
}
 8008586:	4618      	mov	r0, r3
 8008588:	370c      	adds	r7, #12
 800858a:	46bd      	mov	sp, r7
 800858c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008590:	4770      	bx	lr
 8008592:	bf00      	nop
 8008594:	200000bc 	.word	0x200000bc

08008598 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008598:	b480      	push	{r7}
 800859a:	b085      	sub	sp, #20
 800859c:	af00      	add	r7, sp, #0
 800859e:	6078      	str	r0, [r7, #4]
 80085a0:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80085a2:	2300      	movs	r3, #0
 80085a4:	60fb      	str	r3, [r7, #12]
 80085a6:	e01f      	b.n	80085e8 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80085a8:	4a41      	ldr	r2, [pc, #260]	; (80086b0 <inc_lock+0x118>)
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	011b      	lsls	r3, r3, #4
 80085ae:	4413      	add	r3, r2
 80085b0:	681a      	ldr	r2, [r3, #0]
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	429a      	cmp	r2, r3
 80085b8:	d113      	bne.n	80085e2 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80085ba:	4a3d      	ldr	r2, [pc, #244]	; (80086b0 <inc_lock+0x118>)
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	011b      	lsls	r3, r3, #4
 80085c0:	4413      	add	r3, r2
 80085c2:	3304      	adds	r3, #4
 80085c4:	681a      	ldr	r2, [r3, #0]
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80085ca:	429a      	cmp	r2, r3
 80085cc:	d109      	bne.n	80085e2 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80085ce:	4a38      	ldr	r2, [pc, #224]	; (80086b0 <inc_lock+0x118>)
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	011b      	lsls	r3, r3, #4
 80085d4:	4413      	add	r3, r2
 80085d6:	3308      	adds	r3, #8
 80085d8:	681a      	ldr	r2, [r3, #0]
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80085de:	429a      	cmp	r2, r3
 80085e0:	d006      	beq.n	80085f0 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	3301      	adds	r3, #1
 80085e6:	60fb      	str	r3, [r7, #12]
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	2b01      	cmp	r3, #1
 80085ec:	d9dc      	bls.n	80085a8 <inc_lock+0x10>
 80085ee:	e000      	b.n	80085f2 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80085f0:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	2b02      	cmp	r3, #2
 80085f6:	d132      	bne.n	800865e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80085f8:	2300      	movs	r3, #0
 80085fa:	60fb      	str	r3, [r7, #12]
 80085fc:	e002      	b.n	8008604 <inc_lock+0x6c>
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	3301      	adds	r3, #1
 8008602:	60fb      	str	r3, [r7, #12]
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	2b01      	cmp	r3, #1
 8008608:	d806      	bhi.n	8008618 <inc_lock+0x80>
 800860a:	4a29      	ldr	r2, [pc, #164]	; (80086b0 <inc_lock+0x118>)
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	011b      	lsls	r3, r3, #4
 8008610:	4413      	add	r3, r2
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	2b00      	cmp	r3, #0
 8008616:	d1f2      	bne.n	80085fe <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	2b02      	cmp	r3, #2
 800861c:	d101      	bne.n	8008622 <inc_lock+0x8a>
 800861e:	2300      	movs	r3, #0
 8008620:	e040      	b.n	80086a4 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681a      	ldr	r2, [r3, #0]
 8008626:	4922      	ldr	r1, [pc, #136]	; (80086b0 <inc_lock+0x118>)
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	011b      	lsls	r3, r3, #4
 800862c:	440b      	add	r3, r1
 800862e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	689a      	ldr	r2, [r3, #8]
 8008634:	491e      	ldr	r1, [pc, #120]	; (80086b0 <inc_lock+0x118>)
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	011b      	lsls	r3, r3, #4
 800863a:	440b      	add	r3, r1
 800863c:	3304      	adds	r3, #4
 800863e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	695a      	ldr	r2, [r3, #20]
 8008644:	491a      	ldr	r1, [pc, #104]	; (80086b0 <inc_lock+0x118>)
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	011b      	lsls	r3, r3, #4
 800864a:	440b      	add	r3, r1
 800864c:	3308      	adds	r3, #8
 800864e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8008650:	4a17      	ldr	r2, [pc, #92]	; (80086b0 <inc_lock+0x118>)
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	011b      	lsls	r3, r3, #4
 8008656:	4413      	add	r3, r2
 8008658:	330c      	adds	r3, #12
 800865a:	2200      	movs	r2, #0
 800865c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800865e:	683b      	ldr	r3, [r7, #0]
 8008660:	2b00      	cmp	r3, #0
 8008662:	d009      	beq.n	8008678 <inc_lock+0xe0>
 8008664:	4a12      	ldr	r2, [pc, #72]	; (80086b0 <inc_lock+0x118>)
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	011b      	lsls	r3, r3, #4
 800866a:	4413      	add	r3, r2
 800866c:	330c      	adds	r3, #12
 800866e:	881b      	ldrh	r3, [r3, #0]
 8008670:	2b00      	cmp	r3, #0
 8008672:	d001      	beq.n	8008678 <inc_lock+0xe0>
 8008674:	2300      	movs	r3, #0
 8008676:	e015      	b.n	80086a4 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8008678:	683b      	ldr	r3, [r7, #0]
 800867a:	2b00      	cmp	r3, #0
 800867c:	d108      	bne.n	8008690 <inc_lock+0xf8>
 800867e:	4a0c      	ldr	r2, [pc, #48]	; (80086b0 <inc_lock+0x118>)
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	011b      	lsls	r3, r3, #4
 8008684:	4413      	add	r3, r2
 8008686:	330c      	adds	r3, #12
 8008688:	881b      	ldrh	r3, [r3, #0]
 800868a:	3301      	adds	r3, #1
 800868c:	b29a      	uxth	r2, r3
 800868e:	e001      	b.n	8008694 <inc_lock+0xfc>
 8008690:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008694:	4906      	ldr	r1, [pc, #24]	; (80086b0 <inc_lock+0x118>)
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	011b      	lsls	r3, r3, #4
 800869a:	440b      	add	r3, r1
 800869c:	330c      	adds	r3, #12
 800869e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	3301      	adds	r3, #1
}
 80086a4:	4618      	mov	r0, r3
 80086a6:	3714      	adds	r7, #20
 80086a8:	46bd      	mov	sp, r7
 80086aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ae:	4770      	bx	lr
 80086b0:	200000bc 	.word	0x200000bc

080086b4 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80086b4:	b480      	push	{r7}
 80086b6:	b085      	sub	sp, #20
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	3b01      	subs	r3, #1
 80086c0:	607b      	str	r3, [r7, #4]
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	2b01      	cmp	r3, #1
 80086c6:	d825      	bhi.n	8008714 <dec_lock+0x60>
		n = Files[i].ctr;
 80086c8:	4a17      	ldr	r2, [pc, #92]	; (8008728 <dec_lock+0x74>)
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	011b      	lsls	r3, r3, #4
 80086ce:	4413      	add	r3, r2
 80086d0:	330c      	adds	r3, #12
 80086d2:	881b      	ldrh	r3, [r3, #0]
 80086d4:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80086d6:	89fb      	ldrh	r3, [r7, #14]
 80086d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80086dc:	d101      	bne.n	80086e2 <dec_lock+0x2e>
 80086de:	2300      	movs	r3, #0
 80086e0:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80086e2:	89fb      	ldrh	r3, [r7, #14]
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d002      	beq.n	80086ee <dec_lock+0x3a>
 80086e8:	89fb      	ldrh	r3, [r7, #14]
 80086ea:	3b01      	subs	r3, #1
 80086ec:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80086ee:	4a0e      	ldr	r2, [pc, #56]	; (8008728 <dec_lock+0x74>)
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	011b      	lsls	r3, r3, #4
 80086f4:	4413      	add	r3, r2
 80086f6:	330c      	adds	r3, #12
 80086f8:	89fa      	ldrh	r2, [r7, #14]
 80086fa:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80086fc:	89fb      	ldrh	r3, [r7, #14]
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d105      	bne.n	800870e <dec_lock+0x5a>
 8008702:	4a09      	ldr	r2, [pc, #36]	; (8008728 <dec_lock+0x74>)
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	011b      	lsls	r3, r3, #4
 8008708:	4413      	add	r3, r2
 800870a:	2200      	movs	r2, #0
 800870c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800870e:	2300      	movs	r3, #0
 8008710:	737b      	strb	r3, [r7, #13]
 8008712:	e001      	b.n	8008718 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8008714:	2302      	movs	r3, #2
 8008716:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8008718:	7b7b      	ldrb	r3, [r7, #13]
}
 800871a:	4618      	mov	r0, r3
 800871c:	3714      	adds	r7, #20
 800871e:	46bd      	mov	sp, r7
 8008720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008724:	4770      	bx	lr
 8008726:	bf00      	nop
 8008728:	200000bc 	.word	0x200000bc

0800872c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800872c:	b480      	push	{r7}
 800872e:	b085      	sub	sp, #20
 8008730:	af00      	add	r7, sp, #0
 8008732:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8008734:	2300      	movs	r3, #0
 8008736:	60fb      	str	r3, [r7, #12]
 8008738:	e010      	b.n	800875c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800873a:	4a0d      	ldr	r2, [pc, #52]	; (8008770 <clear_lock+0x44>)
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	011b      	lsls	r3, r3, #4
 8008740:	4413      	add	r3, r2
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	687a      	ldr	r2, [r7, #4]
 8008746:	429a      	cmp	r2, r3
 8008748:	d105      	bne.n	8008756 <clear_lock+0x2a>
 800874a:	4a09      	ldr	r2, [pc, #36]	; (8008770 <clear_lock+0x44>)
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	011b      	lsls	r3, r3, #4
 8008750:	4413      	add	r3, r2
 8008752:	2200      	movs	r2, #0
 8008754:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	3301      	adds	r3, #1
 800875a:	60fb      	str	r3, [r7, #12]
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	2b01      	cmp	r3, #1
 8008760:	d9eb      	bls.n	800873a <clear_lock+0xe>
	}
}
 8008762:	bf00      	nop
 8008764:	3714      	adds	r7, #20
 8008766:	46bd      	mov	sp, r7
 8008768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800876c:	4770      	bx	lr
 800876e:	bf00      	nop
 8008770:	200000bc 	.word	0x200000bc

08008774 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8008774:	b580      	push	{r7, lr}
 8008776:	b086      	sub	sp, #24
 8008778:	af00      	add	r7, sp, #0
 800877a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800877c:	2300      	movs	r3, #0
 800877e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	78db      	ldrb	r3, [r3, #3]
 8008784:	2b00      	cmp	r3, #0
 8008786:	d034      	beq.n	80087f2 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800878c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	7858      	ldrb	r0, [r3, #1]
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008798:	2301      	movs	r3, #1
 800879a:	697a      	ldr	r2, [r7, #20]
 800879c:	f7ff fd40 	bl	8008220 <disk_write>
 80087a0:	4603      	mov	r3, r0
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d002      	beq.n	80087ac <sync_window+0x38>
			res = FR_DISK_ERR;
 80087a6:	2301      	movs	r3, #1
 80087a8:	73fb      	strb	r3, [r7, #15]
 80087aa:	e022      	b.n	80087f2 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	2200      	movs	r2, #0
 80087b0:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	6a1b      	ldr	r3, [r3, #32]
 80087b6:	697a      	ldr	r2, [r7, #20]
 80087b8:	1ad2      	subs	r2, r2, r3
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	699b      	ldr	r3, [r3, #24]
 80087be:	429a      	cmp	r2, r3
 80087c0:	d217      	bcs.n	80087f2 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	789b      	ldrb	r3, [r3, #2]
 80087c6:	613b      	str	r3, [r7, #16]
 80087c8:	e010      	b.n	80087ec <sync_window+0x78>
					wsect += fs->fsize;
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	699b      	ldr	r3, [r3, #24]
 80087ce:	697a      	ldr	r2, [r7, #20]
 80087d0:	4413      	add	r3, r2
 80087d2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	7858      	ldrb	r0, [r3, #1]
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80087de:	2301      	movs	r3, #1
 80087e0:	697a      	ldr	r2, [r7, #20]
 80087e2:	f7ff fd1d 	bl	8008220 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80087e6:	693b      	ldr	r3, [r7, #16]
 80087e8:	3b01      	subs	r3, #1
 80087ea:	613b      	str	r3, [r7, #16]
 80087ec:	693b      	ldr	r3, [r7, #16]
 80087ee:	2b01      	cmp	r3, #1
 80087f0:	d8eb      	bhi.n	80087ca <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80087f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80087f4:	4618      	mov	r0, r3
 80087f6:	3718      	adds	r7, #24
 80087f8:	46bd      	mov	sp, r7
 80087fa:	bd80      	pop	{r7, pc}

080087fc <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80087fc:	b580      	push	{r7, lr}
 80087fe:	b084      	sub	sp, #16
 8008800:	af00      	add	r7, sp, #0
 8008802:	6078      	str	r0, [r7, #4]
 8008804:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8008806:	2300      	movs	r3, #0
 8008808:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800880e:	683a      	ldr	r2, [r7, #0]
 8008810:	429a      	cmp	r2, r3
 8008812:	d01b      	beq.n	800884c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8008814:	6878      	ldr	r0, [r7, #4]
 8008816:	f7ff ffad 	bl	8008774 <sync_window>
 800881a:	4603      	mov	r3, r0
 800881c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800881e:	7bfb      	ldrb	r3, [r7, #15]
 8008820:	2b00      	cmp	r3, #0
 8008822:	d113      	bne.n	800884c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	7858      	ldrb	r0, [r3, #1]
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800882e:	2301      	movs	r3, #1
 8008830:	683a      	ldr	r2, [r7, #0]
 8008832:	f7ff fcd5 	bl	80081e0 <disk_read>
 8008836:	4603      	mov	r3, r0
 8008838:	2b00      	cmp	r3, #0
 800883a:	d004      	beq.n	8008846 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800883c:	f04f 33ff 	mov.w	r3, #4294967295
 8008840:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8008842:	2301      	movs	r3, #1
 8008844:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	683a      	ldr	r2, [r7, #0]
 800884a:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 800884c:	7bfb      	ldrb	r3, [r7, #15]
}
 800884e:	4618      	mov	r0, r3
 8008850:	3710      	adds	r7, #16
 8008852:	46bd      	mov	sp, r7
 8008854:	bd80      	pop	{r7, pc}
	...

08008858 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8008858:	b580      	push	{r7, lr}
 800885a:	b084      	sub	sp, #16
 800885c:	af00      	add	r7, sp, #0
 800885e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8008860:	6878      	ldr	r0, [r7, #4]
 8008862:	f7ff ff87 	bl	8008774 <sync_window>
 8008866:	4603      	mov	r3, r0
 8008868:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800886a:	7bfb      	ldrb	r3, [r7, #15]
 800886c:	2b00      	cmp	r3, #0
 800886e:	d158      	bne.n	8008922 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	781b      	ldrb	r3, [r3, #0]
 8008874:	2b03      	cmp	r3, #3
 8008876:	d148      	bne.n	800890a <sync_fs+0xb2>
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	791b      	ldrb	r3, [r3, #4]
 800887c:	2b01      	cmp	r3, #1
 800887e:	d144      	bne.n	800890a <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	3330      	adds	r3, #48	; 0x30
 8008884:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008888:	2100      	movs	r1, #0
 800888a:	4618      	mov	r0, r3
 800888c:	f7ff fda9 	bl	80083e2 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	3330      	adds	r3, #48	; 0x30
 8008894:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008898:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800889c:	4618      	mov	r0, r3
 800889e:	f7ff fd38 	bl	8008312 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	3330      	adds	r3, #48	; 0x30
 80088a6:	4921      	ldr	r1, [pc, #132]	; (800892c <sync_fs+0xd4>)
 80088a8:	4618      	mov	r0, r3
 80088aa:	f7ff fd4d 	bl	8008348 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	3330      	adds	r3, #48	; 0x30
 80088b2:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80088b6:	491e      	ldr	r1, [pc, #120]	; (8008930 <sync_fs+0xd8>)
 80088b8:	4618      	mov	r0, r3
 80088ba:	f7ff fd45 	bl	8008348 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	3330      	adds	r3, #48	; 0x30
 80088c2:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	691b      	ldr	r3, [r3, #16]
 80088ca:	4619      	mov	r1, r3
 80088cc:	4610      	mov	r0, r2
 80088ce:	f7ff fd3b 	bl	8008348 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	3330      	adds	r3, #48	; 0x30
 80088d6:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	68db      	ldr	r3, [r3, #12]
 80088de:	4619      	mov	r1, r3
 80088e0:	4610      	mov	r0, r2
 80088e2:	f7ff fd31 	bl	8008348 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	69db      	ldr	r3, [r3, #28]
 80088ea:	1c5a      	adds	r2, r3, #1
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	7858      	ldrb	r0, [r3, #1]
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088fe:	2301      	movs	r3, #1
 8008900:	f7ff fc8e 	bl	8008220 <disk_write>
			fs->fsi_flag = 0;
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	2200      	movs	r2, #0
 8008908:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	785b      	ldrb	r3, [r3, #1]
 800890e:	2200      	movs	r2, #0
 8008910:	2100      	movs	r1, #0
 8008912:	4618      	mov	r0, r3
 8008914:	f7ff fca4 	bl	8008260 <disk_ioctl>
 8008918:	4603      	mov	r3, r0
 800891a:	2b00      	cmp	r3, #0
 800891c:	d001      	beq.n	8008922 <sync_fs+0xca>
 800891e:	2301      	movs	r3, #1
 8008920:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8008922:	7bfb      	ldrb	r3, [r7, #15]
}
 8008924:	4618      	mov	r0, r3
 8008926:	3710      	adds	r7, #16
 8008928:	46bd      	mov	sp, r7
 800892a:	bd80      	pop	{r7, pc}
 800892c:	41615252 	.word	0x41615252
 8008930:	61417272 	.word	0x61417272

08008934 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8008934:	b480      	push	{r7}
 8008936:	b083      	sub	sp, #12
 8008938:	af00      	add	r7, sp, #0
 800893a:	6078      	str	r0, [r7, #4]
 800893c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800893e:	683b      	ldr	r3, [r7, #0]
 8008940:	3b02      	subs	r3, #2
 8008942:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	695b      	ldr	r3, [r3, #20]
 8008948:	3b02      	subs	r3, #2
 800894a:	683a      	ldr	r2, [r7, #0]
 800894c:	429a      	cmp	r2, r3
 800894e:	d301      	bcc.n	8008954 <clust2sect+0x20>
 8008950:	2300      	movs	r3, #0
 8008952:	e008      	b.n	8008966 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	895b      	ldrh	r3, [r3, #10]
 8008958:	461a      	mov	r2, r3
 800895a:	683b      	ldr	r3, [r7, #0]
 800895c:	fb03 f202 	mul.w	r2, r3, r2
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008964:	4413      	add	r3, r2
}
 8008966:	4618      	mov	r0, r3
 8008968:	370c      	adds	r7, #12
 800896a:	46bd      	mov	sp, r7
 800896c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008970:	4770      	bx	lr

08008972 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8008972:	b580      	push	{r7, lr}
 8008974:	b086      	sub	sp, #24
 8008976:	af00      	add	r7, sp, #0
 8008978:	6078      	str	r0, [r7, #4]
 800897a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8008982:	683b      	ldr	r3, [r7, #0]
 8008984:	2b01      	cmp	r3, #1
 8008986:	d904      	bls.n	8008992 <get_fat+0x20>
 8008988:	693b      	ldr	r3, [r7, #16]
 800898a:	695b      	ldr	r3, [r3, #20]
 800898c:	683a      	ldr	r2, [r7, #0]
 800898e:	429a      	cmp	r2, r3
 8008990:	d302      	bcc.n	8008998 <get_fat+0x26>
		val = 1;	/* Internal error */
 8008992:	2301      	movs	r3, #1
 8008994:	617b      	str	r3, [r7, #20]
 8008996:	e08c      	b.n	8008ab2 <get_fat+0x140>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8008998:	f04f 33ff 	mov.w	r3, #4294967295
 800899c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800899e:	693b      	ldr	r3, [r7, #16]
 80089a0:	781b      	ldrb	r3, [r3, #0]
 80089a2:	2b02      	cmp	r3, #2
 80089a4:	d045      	beq.n	8008a32 <get_fat+0xc0>
 80089a6:	2b03      	cmp	r3, #3
 80089a8:	d05d      	beq.n	8008a66 <get_fat+0xf4>
 80089aa:	2b01      	cmp	r3, #1
 80089ac:	d177      	bne.n	8008a9e <get_fat+0x12c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80089ae:	683b      	ldr	r3, [r7, #0]
 80089b0:	60fb      	str	r3, [r7, #12]
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	085b      	lsrs	r3, r3, #1
 80089b6:	68fa      	ldr	r2, [r7, #12]
 80089b8:	4413      	add	r3, r2
 80089ba:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80089bc:	693b      	ldr	r3, [r7, #16]
 80089be:	6a1a      	ldr	r2, [r3, #32]
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	0a5b      	lsrs	r3, r3, #9
 80089c4:	4413      	add	r3, r2
 80089c6:	4619      	mov	r1, r3
 80089c8:	6938      	ldr	r0, [r7, #16]
 80089ca:	f7ff ff17 	bl	80087fc <move_window>
 80089ce:	4603      	mov	r3, r0
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d167      	bne.n	8008aa4 <get_fat+0x132>
			wc = fs->win[bc++ % SS(fs)];
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	1c5a      	adds	r2, r3, #1
 80089d8:	60fa      	str	r2, [r7, #12]
 80089da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80089de:	693a      	ldr	r2, [r7, #16]
 80089e0:	4413      	add	r3, r2
 80089e2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80089e6:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80089e8:	693b      	ldr	r3, [r7, #16]
 80089ea:	6a1a      	ldr	r2, [r3, #32]
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	0a5b      	lsrs	r3, r3, #9
 80089f0:	4413      	add	r3, r2
 80089f2:	4619      	mov	r1, r3
 80089f4:	6938      	ldr	r0, [r7, #16]
 80089f6:	f7ff ff01 	bl	80087fc <move_window>
 80089fa:	4603      	mov	r3, r0
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d153      	bne.n	8008aa8 <get_fat+0x136>
			wc |= fs->win[bc % SS(fs)] << 8;
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a06:	693a      	ldr	r2, [r7, #16]
 8008a08:	4413      	add	r3, r2
 8008a0a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008a0e:	021b      	lsls	r3, r3, #8
 8008a10:	461a      	mov	r2, r3
 8008a12:	68bb      	ldr	r3, [r7, #8]
 8008a14:	4313      	orrs	r3, r2
 8008a16:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8008a18:	683b      	ldr	r3, [r7, #0]
 8008a1a:	f003 0301 	and.w	r3, r3, #1
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d002      	beq.n	8008a28 <get_fat+0xb6>
 8008a22:	68bb      	ldr	r3, [r7, #8]
 8008a24:	091b      	lsrs	r3, r3, #4
 8008a26:	e002      	b.n	8008a2e <get_fat+0xbc>
 8008a28:	68bb      	ldr	r3, [r7, #8]
 8008a2a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008a2e:	617b      	str	r3, [r7, #20]
			break;
 8008a30:	e03f      	b.n	8008ab2 <get_fat+0x140>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008a32:	693b      	ldr	r3, [r7, #16]
 8008a34:	6a1a      	ldr	r2, [r3, #32]
 8008a36:	683b      	ldr	r3, [r7, #0]
 8008a38:	0a1b      	lsrs	r3, r3, #8
 8008a3a:	4413      	add	r3, r2
 8008a3c:	4619      	mov	r1, r3
 8008a3e:	6938      	ldr	r0, [r7, #16]
 8008a40:	f7ff fedc 	bl	80087fc <move_window>
 8008a44:	4603      	mov	r3, r0
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d130      	bne.n	8008aac <get_fat+0x13a>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8008a4a:	693b      	ldr	r3, [r7, #16]
 8008a4c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008a50:	683b      	ldr	r3, [r7, #0]
 8008a52:	005b      	lsls	r3, r3, #1
 8008a54:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8008a58:	4413      	add	r3, r2
 8008a5a:	4618      	mov	r0, r3
 8008a5c:	f7ff fc1e 	bl	800829c <ld_word>
 8008a60:	4603      	mov	r3, r0
 8008a62:	617b      	str	r3, [r7, #20]
			break;
 8008a64:	e025      	b.n	8008ab2 <get_fat+0x140>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008a66:	693b      	ldr	r3, [r7, #16]
 8008a68:	6a1a      	ldr	r2, [r3, #32]
 8008a6a:	683b      	ldr	r3, [r7, #0]
 8008a6c:	09db      	lsrs	r3, r3, #7
 8008a6e:	4413      	add	r3, r2
 8008a70:	4619      	mov	r1, r3
 8008a72:	6938      	ldr	r0, [r7, #16]
 8008a74:	f7ff fec2 	bl	80087fc <move_window>
 8008a78:	4603      	mov	r3, r0
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d118      	bne.n	8008ab0 <get_fat+0x13e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8008a7e:	693b      	ldr	r3, [r7, #16]
 8008a80:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008a84:	683b      	ldr	r3, [r7, #0]
 8008a86:	009b      	lsls	r3, r3, #2
 8008a88:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8008a8c:	4413      	add	r3, r2
 8008a8e:	4618      	mov	r0, r3
 8008a90:	f7ff fc1c 	bl	80082cc <ld_dword>
 8008a94:	4603      	mov	r3, r0
 8008a96:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8008a9a:	617b      	str	r3, [r7, #20]
			break;
 8008a9c:	e009      	b.n	8008ab2 <get_fat+0x140>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8008a9e:	2301      	movs	r3, #1
 8008aa0:	617b      	str	r3, [r7, #20]
 8008aa2:	e006      	b.n	8008ab2 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008aa4:	bf00      	nop
 8008aa6:	e004      	b.n	8008ab2 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008aa8:	bf00      	nop
 8008aaa:	e002      	b.n	8008ab2 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008aac:	bf00      	nop
 8008aae:	e000      	b.n	8008ab2 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008ab0:	bf00      	nop
		}
	}

	return val;
 8008ab2:	697b      	ldr	r3, [r7, #20]
}
 8008ab4:	4618      	mov	r0, r3
 8008ab6:	3718      	adds	r7, #24
 8008ab8:	46bd      	mov	sp, r7
 8008aba:	bd80      	pop	{r7, pc}

08008abc <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8008abc:	b590      	push	{r4, r7, lr}
 8008abe:	b089      	sub	sp, #36	; 0x24
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	60f8      	str	r0, [r7, #12]
 8008ac4:	60b9      	str	r1, [r7, #8]
 8008ac6:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8008ac8:	2302      	movs	r3, #2
 8008aca:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8008acc:	68bb      	ldr	r3, [r7, #8]
 8008ace:	2b01      	cmp	r3, #1
 8008ad0:	f240 80d6 	bls.w	8008c80 <put_fat+0x1c4>
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	695b      	ldr	r3, [r3, #20]
 8008ad8:	68ba      	ldr	r2, [r7, #8]
 8008ada:	429a      	cmp	r2, r3
 8008adc:	f080 80d0 	bcs.w	8008c80 <put_fat+0x1c4>
		switch (fs->fs_type) {
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	781b      	ldrb	r3, [r3, #0]
 8008ae4:	2b02      	cmp	r3, #2
 8008ae6:	d073      	beq.n	8008bd0 <put_fat+0x114>
 8008ae8:	2b03      	cmp	r3, #3
 8008aea:	f000 8091 	beq.w	8008c10 <put_fat+0x154>
 8008aee:	2b01      	cmp	r3, #1
 8008af0:	f040 80c6 	bne.w	8008c80 <put_fat+0x1c4>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8008af4:	68bb      	ldr	r3, [r7, #8]
 8008af6:	61bb      	str	r3, [r7, #24]
 8008af8:	69bb      	ldr	r3, [r7, #24]
 8008afa:	085b      	lsrs	r3, r3, #1
 8008afc:	69ba      	ldr	r2, [r7, #24]
 8008afe:	4413      	add	r3, r2
 8008b00:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	6a1a      	ldr	r2, [r3, #32]
 8008b06:	69bb      	ldr	r3, [r7, #24]
 8008b08:	0a5b      	lsrs	r3, r3, #9
 8008b0a:	4413      	add	r3, r2
 8008b0c:	4619      	mov	r1, r3
 8008b0e:	68f8      	ldr	r0, [r7, #12]
 8008b10:	f7ff fe74 	bl	80087fc <move_window>
 8008b14:	4603      	mov	r3, r0
 8008b16:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008b18:	7ffb      	ldrb	r3, [r7, #31]
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	f040 80a9 	bne.w	8008c72 <put_fat+0x1b6>
			p = fs->win + bc++ % SS(fs);
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008b26:	69bb      	ldr	r3, [r7, #24]
 8008b28:	1c59      	adds	r1, r3, #1
 8008b2a:	61b9      	str	r1, [r7, #24]
 8008b2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b30:	4413      	add	r3, r2
 8008b32:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8008b34:	68bb      	ldr	r3, [r7, #8]
 8008b36:	f003 0301 	and.w	r3, r3, #1
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d00d      	beq.n	8008b5a <put_fat+0x9e>
 8008b3e:	697b      	ldr	r3, [r7, #20]
 8008b40:	781b      	ldrb	r3, [r3, #0]
 8008b42:	b25b      	sxtb	r3, r3
 8008b44:	f003 030f 	and.w	r3, r3, #15
 8008b48:	b25a      	sxtb	r2, r3
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	b2db      	uxtb	r3, r3
 8008b4e:	011b      	lsls	r3, r3, #4
 8008b50:	b25b      	sxtb	r3, r3
 8008b52:	4313      	orrs	r3, r2
 8008b54:	b25b      	sxtb	r3, r3
 8008b56:	b2db      	uxtb	r3, r3
 8008b58:	e001      	b.n	8008b5e <put_fat+0xa2>
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	b2db      	uxtb	r3, r3
 8008b5e:	697a      	ldr	r2, [r7, #20]
 8008b60:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	2201      	movs	r2, #1
 8008b66:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	6a1a      	ldr	r2, [r3, #32]
 8008b6c:	69bb      	ldr	r3, [r7, #24]
 8008b6e:	0a5b      	lsrs	r3, r3, #9
 8008b70:	4413      	add	r3, r2
 8008b72:	4619      	mov	r1, r3
 8008b74:	68f8      	ldr	r0, [r7, #12]
 8008b76:	f7ff fe41 	bl	80087fc <move_window>
 8008b7a:	4603      	mov	r3, r0
 8008b7c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008b7e:	7ffb      	ldrb	r3, [r7, #31]
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d178      	bne.n	8008c76 <put_fat+0x1ba>
			p = fs->win + bc % SS(fs);
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008b8a:	69bb      	ldr	r3, [r7, #24]
 8008b8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b90:	4413      	add	r3, r2
 8008b92:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8008b94:	68bb      	ldr	r3, [r7, #8]
 8008b96:	f003 0301 	and.w	r3, r3, #1
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d003      	beq.n	8008ba6 <put_fat+0xea>
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	091b      	lsrs	r3, r3, #4
 8008ba2:	b2db      	uxtb	r3, r3
 8008ba4:	e00e      	b.n	8008bc4 <put_fat+0x108>
 8008ba6:	697b      	ldr	r3, [r7, #20]
 8008ba8:	781b      	ldrb	r3, [r3, #0]
 8008baa:	b25b      	sxtb	r3, r3
 8008bac:	f023 030f 	bic.w	r3, r3, #15
 8008bb0:	b25a      	sxtb	r2, r3
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	0a1b      	lsrs	r3, r3, #8
 8008bb6:	b25b      	sxtb	r3, r3
 8008bb8:	f003 030f 	and.w	r3, r3, #15
 8008bbc:	b25b      	sxtb	r3, r3
 8008bbe:	4313      	orrs	r3, r2
 8008bc0:	b25b      	sxtb	r3, r3
 8008bc2:	b2db      	uxtb	r3, r3
 8008bc4:	697a      	ldr	r2, [r7, #20]
 8008bc6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	2201      	movs	r2, #1
 8008bcc:	70da      	strb	r2, [r3, #3]
			break;
 8008bce:	e057      	b.n	8008c80 <put_fat+0x1c4>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	6a1a      	ldr	r2, [r3, #32]
 8008bd4:	68bb      	ldr	r3, [r7, #8]
 8008bd6:	0a1b      	lsrs	r3, r3, #8
 8008bd8:	4413      	add	r3, r2
 8008bda:	4619      	mov	r1, r3
 8008bdc:	68f8      	ldr	r0, [r7, #12]
 8008bde:	f7ff fe0d 	bl	80087fc <move_window>
 8008be2:	4603      	mov	r3, r0
 8008be4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008be6:	7ffb      	ldrb	r3, [r7, #31]
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d146      	bne.n	8008c7a <put_fat+0x1be>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008bf2:	68bb      	ldr	r3, [r7, #8]
 8008bf4:	005b      	lsls	r3, r3, #1
 8008bf6:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8008bfa:	4413      	add	r3, r2
 8008bfc:	687a      	ldr	r2, [r7, #4]
 8008bfe:	b292      	uxth	r2, r2
 8008c00:	4611      	mov	r1, r2
 8008c02:	4618      	mov	r0, r3
 8008c04:	f7ff fb85 	bl	8008312 <st_word>
			fs->wflag = 1;
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	2201      	movs	r2, #1
 8008c0c:	70da      	strb	r2, [r3, #3]
			break;
 8008c0e:	e037      	b.n	8008c80 <put_fat+0x1c4>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	6a1a      	ldr	r2, [r3, #32]
 8008c14:	68bb      	ldr	r3, [r7, #8]
 8008c16:	09db      	lsrs	r3, r3, #7
 8008c18:	4413      	add	r3, r2
 8008c1a:	4619      	mov	r1, r3
 8008c1c:	68f8      	ldr	r0, [r7, #12]
 8008c1e:	f7ff fded 	bl	80087fc <move_window>
 8008c22:	4603      	mov	r3, r0
 8008c24:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008c26:	7ffb      	ldrb	r3, [r7, #31]
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d128      	bne.n	8008c7e <put_fat+0x1c2>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008c38:	68bb      	ldr	r3, [r7, #8]
 8008c3a:	009b      	lsls	r3, r3, #2
 8008c3c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8008c40:	4413      	add	r3, r2
 8008c42:	4618      	mov	r0, r3
 8008c44:	f7ff fb42 	bl	80082cc <ld_dword>
 8008c48:	4603      	mov	r3, r0
 8008c4a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8008c4e:	4323      	orrs	r3, r4
 8008c50:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008c58:	68bb      	ldr	r3, [r7, #8]
 8008c5a:	009b      	lsls	r3, r3, #2
 8008c5c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8008c60:	4413      	add	r3, r2
 8008c62:	6879      	ldr	r1, [r7, #4]
 8008c64:	4618      	mov	r0, r3
 8008c66:	f7ff fb6f 	bl	8008348 <st_dword>
			fs->wflag = 1;
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	2201      	movs	r2, #1
 8008c6e:	70da      	strb	r2, [r3, #3]
			break;
 8008c70:	e006      	b.n	8008c80 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8008c72:	bf00      	nop
 8008c74:	e004      	b.n	8008c80 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8008c76:	bf00      	nop
 8008c78:	e002      	b.n	8008c80 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8008c7a:	bf00      	nop
 8008c7c:	e000      	b.n	8008c80 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8008c7e:	bf00      	nop
		}
	}
	return res;
 8008c80:	7ffb      	ldrb	r3, [r7, #31]
}
 8008c82:	4618      	mov	r0, r3
 8008c84:	3724      	adds	r7, #36	; 0x24
 8008c86:	46bd      	mov	sp, r7
 8008c88:	bd90      	pop	{r4, r7, pc}

08008c8a <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8008c8a:	b580      	push	{r7, lr}
 8008c8c:	b088      	sub	sp, #32
 8008c8e:	af00      	add	r7, sp, #0
 8008c90:	60f8      	str	r0, [r7, #12]
 8008c92:	60b9      	str	r1, [r7, #8]
 8008c94:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8008c96:	2300      	movs	r3, #0
 8008c98:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8008ca0:	68bb      	ldr	r3, [r7, #8]
 8008ca2:	2b01      	cmp	r3, #1
 8008ca4:	d904      	bls.n	8008cb0 <remove_chain+0x26>
 8008ca6:	69bb      	ldr	r3, [r7, #24]
 8008ca8:	695b      	ldr	r3, [r3, #20]
 8008caa:	68ba      	ldr	r2, [r7, #8]
 8008cac:	429a      	cmp	r2, r3
 8008cae:	d301      	bcc.n	8008cb4 <remove_chain+0x2a>
 8008cb0:	2302      	movs	r3, #2
 8008cb2:	e04b      	b.n	8008d4c <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d00c      	beq.n	8008cd4 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8008cba:	f04f 32ff 	mov.w	r2, #4294967295
 8008cbe:	6879      	ldr	r1, [r7, #4]
 8008cc0:	69b8      	ldr	r0, [r7, #24]
 8008cc2:	f7ff fefb 	bl	8008abc <put_fat>
 8008cc6:	4603      	mov	r3, r0
 8008cc8:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8008cca:	7ffb      	ldrb	r3, [r7, #31]
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d001      	beq.n	8008cd4 <remove_chain+0x4a>
 8008cd0:	7ffb      	ldrb	r3, [r7, #31]
 8008cd2:	e03b      	b.n	8008d4c <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8008cd4:	68b9      	ldr	r1, [r7, #8]
 8008cd6:	68f8      	ldr	r0, [r7, #12]
 8008cd8:	f7ff fe4b 	bl	8008972 <get_fat>
 8008cdc:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8008cde:	697b      	ldr	r3, [r7, #20]
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d031      	beq.n	8008d48 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8008ce4:	697b      	ldr	r3, [r7, #20]
 8008ce6:	2b01      	cmp	r3, #1
 8008ce8:	d101      	bne.n	8008cee <remove_chain+0x64>
 8008cea:	2302      	movs	r3, #2
 8008cec:	e02e      	b.n	8008d4c <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8008cee:	697b      	ldr	r3, [r7, #20]
 8008cf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cf4:	d101      	bne.n	8008cfa <remove_chain+0x70>
 8008cf6:	2301      	movs	r3, #1
 8008cf8:	e028      	b.n	8008d4c <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8008cfa:	2200      	movs	r2, #0
 8008cfc:	68b9      	ldr	r1, [r7, #8]
 8008cfe:	69b8      	ldr	r0, [r7, #24]
 8008d00:	f7ff fedc 	bl	8008abc <put_fat>
 8008d04:	4603      	mov	r3, r0
 8008d06:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8008d08:	7ffb      	ldrb	r3, [r7, #31]
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d001      	beq.n	8008d12 <remove_chain+0x88>
 8008d0e:	7ffb      	ldrb	r3, [r7, #31]
 8008d10:	e01c      	b.n	8008d4c <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8008d12:	69bb      	ldr	r3, [r7, #24]
 8008d14:	691a      	ldr	r2, [r3, #16]
 8008d16:	69bb      	ldr	r3, [r7, #24]
 8008d18:	695b      	ldr	r3, [r3, #20]
 8008d1a:	3b02      	subs	r3, #2
 8008d1c:	429a      	cmp	r2, r3
 8008d1e:	d20b      	bcs.n	8008d38 <remove_chain+0xae>
			fs->free_clst++;
 8008d20:	69bb      	ldr	r3, [r7, #24]
 8008d22:	691b      	ldr	r3, [r3, #16]
 8008d24:	1c5a      	adds	r2, r3, #1
 8008d26:	69bb      	ldr	r3, [r7, #24]
 8008d28:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8008d2a:	69bb      	ldr	r3, [r7, #24]
 8008d2c:	791b      	ldrb	r3, [r3, #4]
 8008d2e:	f043 0301 	orr.w	r3, r3, #1
 8008d32:	b2da      	uxtb	r2, r3
 8008d34:	69bb      	ldr	r3, [r7, #24]
 8008d36:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8008d38:	697b      	ldr	r3, [r7, #20]
 8008d3a:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8008d3c:	69bb      	ldr	r3, [r7, #24]
 8008d3e:	695b      	ldr	r3, [r3, #20]
 8008d40:	68ba      	ldr	r2, [r7, #8]
 8008d42:	429a      	cmp	r2, r3
 8008d44:	d3c6      	bcc.n	8008cd4 <remove_chain+0x4a>
 8008d46:	e000      	b.n	8008d4a <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8008d48:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8008d4a:	2300      	movs	r3, #0
}
 8008d4c:	4618      	mov	r0, r3
 8008d4e:	3720      	adds	r7, #32
 8008d50:	46bd      	mov	sp, r7
 8008d52:	bd80      	pop	{r7, pc}

08008d54 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8008d54:	b580      	push	{r7, lr}
 8008d56:	b088      	sub	sp, #32
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	6078      	str	r0, [r7, #4]
 8008d5c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8008d64:	683b      	ldr	r3, [r7, #0]
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d10d      	bne.n	8008d86 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8008d6a:	693b      	ldr	r3, [r7, #16]
 8008d6c:	68db      	ldr	r3, [r3, #12]
 8008d6e:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8008d70:	69bb      	ldr	r3, [r7, #24]
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d004      	beq.n	8008d80 <create_chain+0x2c>
 8008d76:	693b      	ldr	r3, [r7, #16]
 8008d78:	695b      	ldr	r3, [r3, #20]
 8008d7a:	69ba      	ldr	r2, [r7, #24]
 8008d7c:	429a      	cmp	r2, r3
 8008d7e:	d31b      	bcc.n	8008db8 <create_chain+0x64>
 8008d80:	2301      	movs	r3, #1
 8008d82:	61bb      	str	r3, [r7, #24]
 8008d84:	e018      	b.n	8008db8 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8008d86:	6839      	ldr	r1, [r7, #0]
 8008d88:	6878      	ldr	r0, [r7, #4]
 8008d8a:	f7ff fdf2 	bl	8008972 <get_fat>
 8008d8e:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	2b01      	cmp	r3, #1
 8008d94:	d801      	bhi.n	8008d9a <create_chain+0x46>
 8008d96:	2301      	movs	r3, #1
 8008d98:	e070      	b.n	8008e7c <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008da0:	d101      	bne.n	8008da6 <create_chain+0x52>
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	e06a      	b.n	8008e7c <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8008da6:	693b      	ldr	r3, [r7, #16]
 8008da8:	695b      	ldr	r3, [r3, #20]
 8008daa:	68fa      	ldr	r2, [r7, #12]
 8008dac:	429a      	cmp	r2, r3
 8008dae:	d201      	bcs.n	8008db4 <create_chain+0x60>
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	e063      	b.n	8008e7c <create_chain+0x128>
		scl = clst;
 8008db4:	683b      	ldr	r3, [r7, #0]
 8008db6:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8008db8:	69bb      	ldr	r3, [r7, #24]
 8008dba:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8008dbc:	69fb      	ldr	r3, [r7, #28]
 8008dbe:	3301      	adds	r3, #1
 8008dc0:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8008dc2:	693b      	ldr	r3, [r7, #16]
 8008dc4:	695b      	ldr	r3, [r3, #20]
 8008dc6:	69fa      	ldr	r2, [r7, #28]
 8008dc8:	429a      	cmp	r2, r3
 8008dca:	d307      	bcc.n	8008ddc <create_chain+0x88>
				ncl = 2;
 8008dcc:	2302      	movs	r3, #2
 8008dce:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8008dd0:	69fa      	ldr	r2, [r7, #28]
 8008dd2:	69bb      	ldr	r3, [r7, #24]
 8008dd4:	429a      	cmp	r2, r3
 8008dd6:	d901      	bls.n	8008ddc <create_chain+0x88>
 8008dd8:	2300      	movs	r3, #0
 8008dda:	e04f      	b.n	8008e7c <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8008ddc:	69f9      	ldr	r1, [r7, #28]
 8008dde:	6878      	ldr	r0, [r7, #4]
 8008de0:	f7ff fdc7 	bl	8008972 <get_fat>
 8008de4:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d00e      	beq.n	8008e0a <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	2b01      	cmp	r3, #1
 8008df0:	d003      	beq.n	8008dfa <create_chain+0xa6>
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008df8:	d101      	bne.n	8008dfe <create_chain+0xaa>
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	e03e      	b.n	8008e7c <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8008dfe:	69fa      	ldr	r2, [r7, #28]
 8008e00:	69bb      	ldr	r3, [r7, #24]
 8008e02:	429a      	cmp	r2, r3
 8008e04:	d1da      	bne.n	8008dbc <create_chain+0x68>
 8008e06:	2300      	movs	r3, #0
 8008e08:	e038      	b.n	8008e7c <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8008e0a:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8008e0c:	f04f 32ff 	mov.w	r2, #4294967295
 8008e10:	69f9      	ldr	r1, [r7, #28]
 8008e12:	6938      	ldr	r0, [r7, #16]
 8008e14:	f7ff fe52 	bl	8008abc <put_fat>
 8008e18:	4603      	mov	r3, r0
 8008e1a:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8008e1c:	7dfb      	ldrb	r3, [r7, #23]
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d109      	bne.n	8008e36 <create_chain+0xe2>
 8008e22:	683b      	ldr	r3, [r7, #0]
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d006      	beq.n	8008e36 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8008e28:	69fa      	ldr	r2, [r7, #28]
 8008e2a:	6839      	ldr	r1, [r7, #0]
 8008e2c:	6938      	ldr	r0, [r7, #16]
 8008e2e:	f7ff fe45 	bl	8008abc <put_fat>
 8008e32:	4603      	mov	r3, r0
 8008e34:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8008e36:	7dfb      	ldrb	r3, [r7, #23]
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d116      	bne.n	8008e6a <create_chain+0x116>
		fs->last_clst = ncl;
 8008e3c:	693b      	ldr	r3, [r7, #16]
 8008e3e:	69fa      	ldr	r2, [r7, #28]
 8008e40:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8008e42:	693b      	ldr	r3, [r7, #16]
 8008e44:	691a      	ldr	r2, [r3, #16]
 8008e46:	693b      	ldr	r3, [r7, #16]
 8008e48:	695b      	ldr	r3, [r3, #20]
 8008e4a:	3b02      	subs	r3, #2
 8008e4c:	429a      	cmp	r2, r3
 8008e4e:	d804      	bhi.n	8008e5a <create_chain+0x106>
 8008e50:	693b      	ldr	r3, [r7, #16]
 8008e52:	691b      	ldr	r3, [r3, #16]
 8008e54:	1e5a      	subs	r2, r3, #1
 8008e56:	693b      	ldr	r3, [r7, #16]
 8008e58:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8008e5a:	693b      	ldr	r3, [r7, #16]
 8008e5c:	791b      	ldrb	r3, [r3, #4]
 8008e5e:	f043 0301 	orr.w	r3, r3, #1
 8008e62:	b2da      	uxtb	r2, r3
 8008e64:	693b      	ldr	r3, [r7, #16]
 8008e66:	711a      	strb	r2, [r3, #4]
 8008e68:	e007      	b.n	8008e7a <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8008e6a:	7dfb      	ldrb	r3, [r7, #23]
 8008e6c:	2b01      	cmp	r3, #1
 8008e6e:	d102      	bne.n	8008e76 <create_chain+0x122>
 8008e70:	f04f 33ff 	mov.w	r3, #4294967295
 8008e74:	e000      	b.n	8008e78 <create_chain+0x124>
 8008e76:	2301      	movs	r3, #1
 8008e78:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8008e7a:	69fb      	ldr	r3, [r7, #28]
}
 8008e7c:	4618      	mov	r0, r3
 8008e7e:	3720      	adds	r7, #32
 8008e80:	46bd      	mov	sp, r7
 8008e82:	bd80      	pop	{r7, pc}

08008e84 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8008e84:	b480      	push	{r7}
 8008e86:	b087      	sub	sp, #28
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	6078      	str	r0, [r7, #4]
 8008e8c:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e98:	3304      	adds	r3, #4
 8008e9a:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8008e9c:	683b      	ldr	r3, [r7, #0]
 8008e9e:	0a5b      	lsrs	r3, r3, #9
 8008ea0:	68fa      	ldr	r2, [r7, #12]
 8008ea2:	8952      	ldrh	r2, [r2, #10]
 8008ea4:	fbb3 f3f2 	udiv	r3, r3, r2
 8008ea8:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008eaa:	693b      	ldr	r3, [r7, #16]
 8008eac:	1d1a      	adds	r2, r3, #4
 8008eae:	613a      	str	r2, [r7, #16]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8008eb4:	68bb      	ldr	r3, [r7, #8]
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d101      	bne.n	8008ebe <clmt_clust+0x3a>
 8008eba:	2300      	movs	r3, #0
 8008ebc:	e010      	b.n	8008ee0 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8008ebe:	697a      	ldr	r2, [r7, #20]
 8008ec0:	68bb      	ldr	r3, [r7, #8]
 8008ec2:	429a      	cmp	r2, r3
 8008ec4:	d307      	bcc.n	8008ed6 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8008ec6:	697a      	ldr	r2, [r7, #20]
 8008ec8:	68bb      	ldr	r3, [r7, #8]
 8008eca:	1ad3      	subs	r3, r2, r3
 8008ecc:	617b      	str	r3, [r7, #20]
 8008ece:	693b      	ldr	r3, [r7, #16]
 8008ed0:	3304      	adds	r3, #4
 8008ed2:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008ed4:	e7e9      	b.n	8008eaa <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8008ed6:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8008ed8:	693b      	ldr	r3, [r7, #16]
 8008eda:	681a      	ldr	r2, [r3, #0]
 8008edc:	697b      	ldr	r3, [r7, #20]
 8008ede:	4413      	add	r3, r2
}
 8008ee0:	4618      	mov	r0, r3
 8008ee2:	371c      	adds	r7, #28
 8008ee4:	46bd      	mov	sp, r7
 8008ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eea:	4770      	bx	lr

08008eec <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8008eec:	b580      	push	{r7, lr}
 8008eee:	b086      	sub	sp, #24
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	6078      	str	r0, [r7, #4]
 8008ef4:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8008efc:	683b      	ldr	r3, [r7, #0]
 8008efe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008f02:	d204      	bcs.n	8008f0e <dir_sdi+0x22>
 8008f04:	683b      	ldr	r3, [r7, #0]
 8008f06:	f003 031f 	and.w	r3, r3, #31
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d001      	beq.n	8008f12 <dir_sdi+0x26>
		return FR_INT_ERR;
 8008f0e:	2302      	movs	r3, #2
 8008f10:	e063      	b.n	8008fda <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	683a      	ldr	r2, [r7, #0]
 8008f16:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	689b      	ldr	r3, [r3, #8]
 8008f1c:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8008f1e:	697b      	ldr	r3, [r7, #20]
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d106      	bne.n	8008f32 <dir_sdi+0x46>
 8008f24:	693b      	ldr	r3, [r7, #16]
 8008f26:	781b      	ldrb	r3, [r3, #0]
 8008f28:	2b02      	cmp	r3, #2
 8008f2a:	d902      	bls.n	8008f32 <dir_sdi+0x46>
		clst = fs->dirbase;
 8008f2c:	693b      	ldr	r3, [r7, #16]
 8008f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f30:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8008f32:	697b      	ldr	r3, [r7, #20]
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d10c      	bne.n	8008f52 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8008f38:	683b      	ldr	r3, [r7, #0]
 8008f3a:	095b      	lsrs	r3, r3, #5
 8008f3c:	693a      	ldr	r2, [r7, #16]
 8008f3e:	8912      	ldrh	r2, [r2, #8]
 8008f40:	4293      	cmp	r3, r2
 8008f42:	d301      	bcc.n	8008f48 <dir_sdi+0x5c>
 8008f44:	2302      	movs	r3, #2
 8008f46:	e048      	b.n	8008fda <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8008f48:	693b      	ldr	r3, [r7, #16]
 8008f4a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	61da      	str	r2, [r3, #28]
 8008f50:	e029      	b.n	8008fa6 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8008f52:	693b      	ldr	r3, [r7, #16]
 8008f54:	895b      	ldrh	r3, [r3, #10]
 8008f56:	025b      	lsls	r3, r3, #9
 8008f58:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8008f5a:	e019      	b.n	8008f90 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	6979      	ldr	r1, [r7, #20]
 8008f60:	4618      	mov	r0, r3
 8008f62:	f7ff fd06 	bl	8008972 <get_fat>
 8008f66:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008f68:	697b      	ldr	r3, [r7, #20]
 8008f6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f6e:	d101      	bne.n	8008f74 <dir_sdi+0x88>
 8008f70:	2301      	movs	r3, #1
 8008f72:	e032      	b.n	8008fda <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8008f74:	697b      	ldr	r3, [r7, #20]
 8008f76:	2b01      	cmp	r3, #1
 8008f78:	d904      	bls.n	8008f84 <dir_sdi+0x98>
 8008f7a:	693b      	ldr	r3, [r7, #16]
 8008f7c:	695b      	ldr	r3, [r3, #20]
 8008f7e:	697a      	ldr	r2, [r7, #20]
 8008f80:	429a      	cmp	r2, r3
 8008f82:	d301      	bcc.n	8008f88 <dir_sdi+0x9c>
 8008f84:	2302      	movs	r3, #2
 8008f86:	e028      	b.n	8008fda <dir_sdi+0xee>
			ofs -= csz;
 8008f88:	683a      	ldr	r2, [r7, #0]
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	1ad3      	subs	r3, r2, r3
 8008f8e:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8008f90:	683a      	ldr	r2, [r7, #0]
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	429a      	cmp	r2, r3
 8008f96:	d2e1      	bcs.n	8008f5c <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8008f98:	6979      	ldr	r1, [r7, #20]
 8008f9a:	6938      	ldr	r0, [r7, #16]
 8008f9c:	f7ff fcca 	bl	8008934 <clust2sect>
 8008fa0:	4602      	mov	r2, r0
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	697a      	ldr	r2, [r7, #20]
 8008faa:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	69db      	ldr	r3, [r3, #28]
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d101      	bne.n	8008fb8 <dir_sdi+0xcc>
 8008fb4:	2302      	movs	r3, #2
 8008fb6:	e010      	b.n	8008fda <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	69da      	ldr	r2, [r3, #28]
 8008fbc:	683b      	ldr	r3, [r7, #0]
 8008fbe:	0a5b      	lsrs	r3, r3, #9
 8008fc0:	441a      	add	r2, r3
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8008fc6:	693b      	ldr	r3, [r7, #16]
 8008fc8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008fcc:	683b      	ldr	r3, [r7, #0]
 8008fce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008fd2:	441a      	add	r2, r3
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8008fd8:	2300      	movs	r3, #0
}
 8008fda:	4618      	mov	r0, r3
 8008fdc:	3718      	adds	r7, #24
 8008fde:	46bd      	mov	sp, r7
 8008fe0:	bd80      	pop	{r7, pc}

08008fe2 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8008fe2:	b580      	push	{r7, lr}
 8008fe4:	b086      	sub	sp, #24
 8008fe6:	af00      	add	r7, sp, #0
 8008fe8:	6078      	str	r0, [r7, #4]
 8008fea:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	695b      	ldr	r3, [r3, #20]
 8008ff6:	3320      	adds	r3, #32
 8008ff8:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	69db      	ldr	r3, [r3, #28]
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d003      	beq.n	800900a <dir_next+0x28>
 8009002:	68bb      	ldr	r3, [r7, #8]
 8009004:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009008:	d301      	bcc.n	800900e <dir_next+0x2c>
 800900a:	2304      	movs	r3, #4
 800900c:	e0aa      	b.n	8009164 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800900e:	68bb      	ldr	r3, [r7, #8]
 8009010:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009014:	2b00      	cmp	r3, #0
 8009016:	f040 8098 	bne.w	800914a <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	69db      	ldr	r3, [r3, #28]
 800901e:	1c5a      	adds	r2, r3, #1
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	699b      	ldr	r3, [r3, #24]
 8009028:	2b00      	cmp	r3, #0
 800902a:	d10b      	bne.n	8009044 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800902c:	68bb      	ldr	r3, [r7, #8]
 800902e:	095b      	lsrs	r3, r3, #5
 8009030:	68fa      	ldr	r2, [r7, #12]
 8009032:	8912      	ldrh	r2, [r2, #8]
 8009034:	4293      	cmp	r3, r2
 8009036:	f0c0 8088 	bcc.w	800914a <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	2200      	movs	r2, #0
 800903e:	61da      	str	r2, [r3, #28]
 8009040:	2304      	movs	r3, #4
 8009042:	e08f      	b.n	8009164 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8009044:	68bb      	ldr	r3, [r7, #8]
 8009046:	0a5b      	lsrs	r3, r3, #9
 8009048:	68fa      	ldr	r2, [r7, #12]
 800904a:	8952      	ldrh	r2, [r2, #10]
 800904c:	3a01      	subs	r2, #1
 800904e:	4013      	ands	r3, r2
 8009050:	2b00      	cmp	r3, #0
 8009052:	d17a      	bne.n	800914a <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8009054:	687a      	ldr	r2, [r7, #4]
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	699b      	ldr	r3, [r3, #24]
 800905a:	4619      	mov	r1, r3
 800905c:	4610      	mov	r0, r2
 800905e:	f7ff fc88 	bl	8008972 <get_fat>
 8009062:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8009064:	697b      	ldr	r3, [r7, #20]
 8009066:	2b01      	cmp	r3, #1
 8009068:	d801      	bhi.n	800906e <dir_next+0x8c>
 800906a:	2302      	movs	r3, #2
 800906c:	e07a      	b.n	8009164 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800906e:	697b      	ldr	r3, [r7, #20]
 8009070:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009074:	d101      	bne.n	800907a <dir_next+0x98>
 8009076:	2301      	movs	r3, #1
 8009078:	e074      	b.n	8009164 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	695b      	ldr	r3, [r3, #20]
 800907e:	697a      	ldr	r2, [r7, #20]
 8009080:	429a      	cmp	r2, r3
 8009082:	d358      	bcc.n	8009136 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8009084:	683b      	ldr	r3, [r7, #0]
 8009086:	2b00      	cmp	r3, #0
 8009088:	d104      	bne.n	8009094 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	2200      	movs	r2, #0
 800908e:	61da      	str	r2, [r3, #28]
 8009090:	2304      	movs	r3, #4
 8009092:	e067      	b.n	8009164 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8009094:	687a      	ldr	r2, [r7, #4]
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	699b      	ldr	r3, [r3, #24]
 800909a:	4619      	mov	r1, r3
 800909c:	4610      	mov	r0, r2
 800909e:	f7ff fe59 	bl	8008d54 <create_chain>
 80090a2:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80090a4:	697b      	ldr	r3, [r7, #20]
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d101      	bne.n	80090ae <dir_next+0xcc>
 80090aa:	2307      	movs	r3, #7
 80090ac:	e05a      	b.n	8009164 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80090ae:	697b      	ldr	r3, [r7, #20]
 80090b0:	2b01      	cmp	r3, #1
 80090b2:	d101      	bne.n	80090b8 <dir_next+0xd6>
 80090b4:	2302      	movs	r3, #2
 80090b6:	e055      	b.n	8009164 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80090b8:	697b      	ldr	r3, [r7, #20]
 80090ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090be:	d101      	bne.n	80090c4 <dir_next+0xe2>
 80090c0:	2301      	movs	r3, #1
 80090c2:	e04f      	b.n	8009164 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80090c4:	68f8      	ldr	r0, [r7, #12]
 80090c6:	f7ff fb55 	bl	8008774 <sync_window>
 80090ca:	4603      	mov	r3, r0
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d001      	beq.n	80090d4 <dir_next+0xf2>
 80090d0:	2301      	movs	r3, #1
 80090d2:	e047      	b.n	8009164 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	3330      	adds	r3, #48	; 0x30
 80090d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80090dc:	2100      	movs	r1, #0
 80090de:	4618      	mov	r0, r3
 80090e0:	f7ff f97f 	bl	80083e2 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80090e4:	2300      	movs	r3, #0
 80090e6:	613b      	str	r3, [r7, #16]
 80090e8:	6979      	ldr	r1, [r7, #20]
 80090ea:	68f8      	ldr	r0, [r7, #12]
 80090ec:	f7ff fc22 	bl	8008934 <clust2sect>
 80090f0:	4602      	mov	r2, r0
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	62da      	str	r2, [r3, #44]	; 0x2c
 80090f6:	e012      	b.n	800911e <dir_next+0x13c>
						fs->wflag = 1;
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	2201      	movs	r2, #1
 80090fc:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80090fe:	68f8      	ldr	r0, [r7, #12]
 8009100:	f7ff fb38 	bl	8008774 <sync_window>
 8009104:	4603      	mov	r3, r0
 8009106:	2b00      	cmp	r3, #0
 8009108:	d001      	beq.n	800910e <dir_next+0x12c>
 800910a:	2301      	movs	r3, #1
 800910c:	e02a      	b.n	8009164 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800910e:	693b      	ldr	r3, [r7, #16]
 8009110:	3301      	adds	r3, #1
 8009112:	613b      	str	r3, [r7, #16]
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009118:	1c5a      	adds	r2, r3, #1
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	62da      	str	r2, [r3, #44]	; 0x2c
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	895b      	ldrh	r3, [r3, #10]
 8009122:	461a      	mov	r2, r3
 8009124:	693b      	ldr	r3, [r7, #16]
 8009126:	4293      	cmp	r3, r2
 8009128:	d3e6      	bcc.n	80090f8 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800912e:	693b      	ldr	r3, [r7, #16]
 8009130:	1ad2      	subs	r2, r2, r3
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	697a      	ldr	r2, [r7, #20]
 800913a:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800913c:	6979      	ldr	r1, [r7, #20]
 800913e:	68f8      	ldr	r0, [r7, #12]
 8009140:	f7ff fbf8 	bl	8008934 <clust2sect>
 8009144:	4602      	mov	r2, r0
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	68ba      	ldr	r2, [r7, #8]
 800914e:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009156:	68bb      	ldr	r3, [r7, #8]
 8009158:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800915c:	441a      	add	r2, r3
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8009162:	2300      	movs	r3, #0
}
 8009164:	4618      	mov	r0, r3
 8009166:	3718      	adds	r7, #24
 8009168:	46bd      	mov	sp, r7
 800916a:	bd80      	pop	{r7, pc}

0800916c <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800916c:	b580      	push	{r7, lr}
 800916e:	b086      	sub	sp, #24
 8009170:	af00      	add	r7, sp, #0
 8009172:	6078      	str	r0, [r7, #4]
 8009174:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800917c:	2100      	movs	r1, #0
 800917e:	6878      	ldr	r0, [r7, #4]
 8009180:	f7ff feb4 	bl	8008eec <dir_sdi>
 8009184:	4603      	mov	r3, r0
 8009186:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8009188:	7dfb      	ldrb	r3, [r7, #23]
 800918a:	2b00      	cmp	r3, #0
 800918c:	d12b      	bne.n	80091e6 <dir_alloc+0x7a>
		n = 0;
 800918e:	2300      	movs	r3, #0
 8009190:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	69db      	ldr	r3, [r3, #28]
 8009196:	4619      	mov	r1, r3
 8009198:	68f8      	ldr	r0, [r7, #12]
 800919a:	f7ff fb2f 	bl	80087fc <move_window>
 800919e:	4603      	mov	r3, r0
 80091a0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80091a2:	7dfb      	ldrb	r3, [r7, #23]
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d11d      	bne.n	80091e4 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	6a1b      	ldr	r3, [r3, #32]
 80091ac:	781b      	ldrb	r3, [r3, #0]
 80091ae:	2be5      	cmp	r3, #229	; 0xe5
 80091b0:	d004      	beq.n	80091bc <dir_alloc+0x50>
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	6a1b      	ldr	r3, [r3, #32]
 80091b6:	781b      	ldrb	r3, [r3, #0]
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d107      	bne.n	80091cc <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80091bc:	693b      	ldr	r3, [r7, #16]
 80091be:	3301      	adds	r3, #1
 80091c0:	613b      	str	r3, [r7, #16]
 80091c2:	693a      	ldr	r2, [r7, #16]
 80091c4:	683b      	ldr	r3, [r7, #0]
 80091c6:	429a      	cmp	r2, r3
 80091c8:	d102      	bne.n	80091d0 <dir_alloc+0x64>
 80091ca:	e00c      	b.n	80091e6 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80091cc:	2300      	movs	r3, #0
 80091ce:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80091d0:	2101      	movs	r1, #1
 80091d2:	6878      	ldr	r0, [r7, #4]
 80091d4:	f7ff ff05 	bl	8008fe2 <dir_next>
 80091d8:	4603      	mov	r3, r0
 80091da:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80091dc:	7dfb      	ldrb	r3, [r7, #23]
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d0d7      	beq.n	8009192 <dir_alloc+0x26>
 80091e2:	e000      	b.n	80091e6 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80091e4:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80091e6:	7dfb      	ldrb	r3, [r7, #23]
 80091e8:	2b04      	cmp	r3, #4
 80091ea:	d101      	bne.n	80091f0 <dir_alloc+0x84>
 80091ec:	2307      	movs	r3, #7
 80091ee:	75fb      	strb	r3, [r7, #23]
	return res;
 80091f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80091f2:	4618      	mov	r0, r3
 80091f4:	3718      	adds	r7, #24
 80091f6:	46bd      	mov	sp, r7
 80091f8:	bd80      	pop	{r7, pc}

080091fa <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80091fa:	b580      	push	{r7, lr}
 80091fc:	b084      	sub	sp, #16
 80091fe:	af00      	add	r7, sp, #0
 8009200:	6078      	str	r0, [r7, #4]
 8009202:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8009204:	683b      	ldr	r3, [r7, #0]
 8009206:	331a      	adds	r3, #26
 8009208:	4618      	mov	r0, r3
 800920a:	f7ff f847 	bl	800829c <ld_word>
 800920e:	4603      	mov	r3, r0
 8009210:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	781b      	ldrb	r3, [r3, #0]
 8009216:	2b03      	cmp	r3, #3
 8009218:	d109      	bne.n	800922e <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800921a:	683b      	ldr	r3, [r7, #0]
 800921c:	3314      	adds	r3, #20
 800921e:	4618      	mov	r0, r3
 8009220:	f7ff f83c 	bl	800829c <ld_word>
 8009224:	4603      	mov	r3, r0
 8009226:	041b      	lsls	r3, r3, #16
 8009228:	68fa      	ldr	r2, [r7, #12]
 800922a:	4313      	orrs	r3, r2
 800922c:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800922e:	68fb      	ldr	r3, [r7, #12]
}
 8009230:	4618      	mov	r0, r3
 8009232:	3710      	adds	r7, #16
 8009234:	46bd      	mov	sp, r7
 8009236:	bd80      	pop	{r7, pc}

08009238 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8009238:	b580      	push	{r7, lr}
 800923a:	b084      	sub	sp, #16
 800923c:	af00      	add	r7, sp, #0
 800923e:	60f8      	str	r0, [r7, #12]
 8009240:	60b9      	str	r1, [r7, #8]
 8009242:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8009244:	68bb      	ldr	r3, [r7, #8]
 8009246:	331a      	adds	r3, #26
 8009248:	687a      	ldr	r2, [r7, #4]
 800924a:	b292      	uxth	r2, r2
 800924c:	4611      	mov	r1, r2
 800924e:	4618      	mov	r0, r3
 8009250:	f7ff f85f 	bl	8008312 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	781b      	ldrb	r3, [r3, #0]
 8009258:	2b03      	cmp	r3, #3
 800925a:	d109      	bne.n	8009270 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800925c:	68bb      	ldr	r3, [r7, #8]
 800925e:	f103 0214 	add.w	r2, r3, #20
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	0c1b      	lsrs	r3, r3, #16
 8009266:	b29b      	uxth	r3, r3
 8009268:	4619      	mov	r1, r3
 800926a:	4610      	mov	r0, r2
 800926c:	f7ff f851 	bl	8008312 <st_word>
	}
}
 8009270:	bf00      	nop
 8009272:	3710      	adds	r7, #16
 8009274:	46bd      	mov	sp, r7
 8009276:	bd80      	pop	{r7, pc}

08009278 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8009278:	b580      	push	{r7, lr}
 800927a:	b086      	sub	sp, #24
 800927c:	af00      	add	r7, sp, #0
 800927e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8009286:	2100      	movs	r1, #0
 8009288:	6878      	ldr	r0, [r7, #4]
 800928a:	f7ff fe2f 	bl	8008eec <dir_sdi>
 800928e:	4603      	mov	r3, r0
 8009290:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8009292:	7dfb      	ldrb	r3, [r7, #23]
 8009294:	2b00      	cmp	r3, #0
 8009296:	d001      	beq.n	800929c <dir_find+0x24>
 8009298:	7dfb      	ldrb	r3, [r7, #23]
 800929a:	e03e      	b.n	800931a <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	69db      	ldr	r3, [r3, #28]
 80092a0:	4619      	mov	r1, r3
 80092a2:	6938      	ldr	r0, [r7, #16]
 80092a4:	f7ff faaa 	bl	80087fc <move_window>
 80092a8:	4603      	mov	r3, r0
 80092aa:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80092ac:	7dfb      	ldrb	r3, [r7, #23]
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d12f      	bne.n	8009312 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	6a1b      	ldr	r3, [r3, #32]
 80092b6:	781b      	ldrb	r3, [r3, #0]
 80092b8:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80092ba:	7bfb      	ldrb	r3, [r7, #15]
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d102      	bne.n	80092c6 <dir_find+0x4e>
 80092c0:	2304      	movs	r3, #4
 80092c2:	75fb      	strb	r3, [r7, #23]
 80092c4:	e028      	b.n	8009318 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	6a1b      	ldr	r3, [r3, #32]
 80092ca:	330b      	adds	r3, #11
 80092cc:	781b      	ldrb	r3, [r3, #0]
 80092ce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80092d2:	b2da      	uxtb	r2, r3
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	6a1b      	ldr	r3, [r3, #32]
 80092dc:	330b      	adds	r3, #11
 80092de:	781b      	ldrb	r3, [r3, #0]
 80092e0:	f003 0308 	and.w	r3, r3, #8
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d10a      	bne.n	80092fe <dir_find+0x86>
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	6a18      	ldr	r0, [r3, #32]
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	3324      	adds	r3, #36	; 0x24
 80092f0:	220b      	movs	r2, #11
 80092f2:	4619      	mov	r1, r3
 80092f4:	f7ff f88f 	bl	8008416 <mem_cmp>
 80092f8:	4603      	mov	r3, r0
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d00b      	beq.n	8009316 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80092fe:	2100      	movs	r1, #0
 8009300:	6878      	ldr	r0, [r7, #4]
 8009302:	f7ff fe6e 	bl	8008fe2 <dir_next>
 8009306:	4603      	mov	r3, r0
 8009308:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800930a:	7dfb      	ldrb	r3, [r7, #23]
 800930c:	2b00      	cmp	r3, #0
 800930e:	d0c5      	beq.n	800929c <dir_find+0x24>
 8009310:	e002      	b.n	8009318 <dir_find+0xa0>
		if (res != FR_OK) break;
 8009312:	bf00      	nop
 8009314:	e000      	b.n	8009318 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8009316:	bf00      	nop

	return res;
 8009318:	7dfb      	ldrb	r3, [r7, #23]
}
 800931a:	4618      	mov	r0, r3
 800931c:	3718      	adds	r7, #24
 800931e:	46bd      	mov	sp, r7
 8009320:	bd80      	pop	{r7, pc}

08009322 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8009322:	b580      	push	{r7, lr}
 8009324:	b084      	sub	sp, #16
 8009326:	af00      	add	r7, sp, #0
 8009328:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8009330:	2101      	movs	r1, #1
 8009332:	6878      	ldr	r0, [r7, #4]
 8009334:	f7ff ff1a 	bl	800916c <dir_alloc>
 8009338:	4603      	mov	r3, r0
 800933a:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800933c:	7bfb      	ldrb	r3, [r7, #15]
 800933e:	2b00      	cmp	r3, #0
 8009340:	d11c      	bne.n	800937c <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	69db      	ldr	r3, [r3, #28]
 8009346:	4619      	mov	r1, r3
 8009348:	68b8      	ldr	r0, [r7, #8]
 800934a:	f7ff fa57 	bl	80087fc <move_window>
 800934e:	4603      	mov	r3, r0
 8009350:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8009352:	7bfb      	ldrb	r3, [r7, #15]
 8009354:	2b00      	cmp	r3, #0
 8009356:	d111      	bne.n	800937c <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	6a1b      	ldr	r3, [r3, #32]
 800935c:	2220      	movs	r2, #32
 800935e:	2100      	movs	r1, #0
 8009360:	4618      	mov	r0, r3
 8009362:	f7ff f83e 	bl	80083e2 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	6a18      	ldr	r0, [r3, #32]
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	3324      	adds	r3, #36	; 0x24
 800936e:	220b      	movs	r2, #11
 8009370:	4619      	mov	r1, r3
 8009372:	f7ff f815 	bl	80083a0 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8009376:	68bb      	ldr	r3, [r7, #8]
 8009378:	2201      	movs	r2, #1
 800937a:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800937c:	7bfb      	ldrb	r3, [r7, #15]
}
 800937e:	4618      	mov	r0, r3
 8009380:	3710      	adds	r7, #16
 8009382:	46bd      	mov	sp, r7
 8009384:	bd80      	pop	{r7, pc}
	...

08009388 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8009388:	b580      	push	{r7, lr}
 800938a:	b088      	sub	sp, #32
 800938c:	af00      	add	r7, sp, #0
 800938e:	6078      	str	r0, [r7, #4]
 8009390:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8009392:	683b      	ldr	r3, [r7, #0]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	60fb      	str	r3, [r7, #12]
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	3324      	adds	r3, #36	; 0x24
 800939c:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800939e:	220b      	movs	r2, #11
 80093a0:	2120      	movs	r1, #32
 80093a2:	68b8      	ldr	r0, [r7, #8]
 80093a4:	f7ff f81d 	bl	80083e2 <mem_set>
	si = i = 0; ni = 8;
 80093a8:	2300      	movs	r3, #0
 80093aa:	613b      	str	r3, [r7, #16]
 80093ac:	693b      	ldr	r3, [r7, #16]
 80093ae:	617b      	str	r3, [r7, #20]
 80093b0:	2308      	movs	r3, #8
 80093b2:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 80093b4:	697b      	ldr	r3, [r7, #20]
 80093b6:	1c5a      	adds	r2, r3, #1
 80093b8:	617a      	str	r2, [r7, #20]
 80093ba:	68fa      	ldr	r2, [r7, #12]
 80093bc:	4413      	add	r3, r2
 80093be:	781b      	ldrb	r3, [r3, #0]
 80093c0:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 80093c2:	7ffb      	ldrb	r3, [r7, #31]
 80093c4:	2b20      	cmp	r3, #32
 80093c6:	d94e      	bls.n	8009466 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 80093c8:	7ffb      	ldrb	r3, [r7, #31]
 80093ca:	2b2f      	cmp	r3, #47	; 0x2f
 80093cc:	d006      	beq.n	80093dc <create_name+0x54>
 80093ce:	7ffb      	ldrb	r3, [r7, #31]
 80093d0:	2b5c      	cmp	r3, #92	; 0x5c
 80093d2:	d110      	bne.n	80093f6 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80093d4:	e002      	b.n	80093dc <create_name+0x54>
 80093d6:	697b      	ldr	r3, [r7, #20]
 80093d8:	3301      	adds	r3, #1
 80093da:	617b      	str	r3, [r7, #20]
 80093dc:	68fa      	ldr	r2, [r7, #12]
 80093de:	697b      	ldr	r3, [r7, #20]
 80093e0:	4413      	add	r3, r2
 80093e2:	781b      	ldrb	r3, [r3, #0]
 80093e4:	2b2f      	cmp	r3, #47	; 0x2f
 80093e6:	d0f6      	beq.n	80093d6 <create_name+0x4e>
 80093e8:	68fa      	ldr	r2, [r7, #12]
 80093ea:	697b      	ldr	r3, [r7, #20]
 80093ec:	4413      	add	r3, r2
 80093ee:	781b      	ldrb	r3, [r3, #0]
 80093f0:	2b5c      	cmp	r3, #92	; 0x5c
 80093f2:	d0f0      	beq.n	80093d6 <create_name+0x4e>
			break;
 80093f4:	e038      	b.n	8009468 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 80093f6:	7ffb      	ldrb	r3, [r7, #31]
 80093f8:	2b2e      	cmp	r3, #46	; 0x2e
 80093fa:	d003      	beq.n	8009404 <create_name+0x7c>
 80093fc:	693a      	ldr	r2, [r7, #16]
 80093fe:	69bb      	ldr	r3, [r7, #24]
 8009400:	429a      	cmp	r2, r3
 8009402:	d30c      	bcc.n	800941e <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8009404:	69bb      	ldr	r3, [r7, #24]
 8009406:	2b0b      	cmp	r3, #11
 8009408:	d002      	beq.n	8009410 <create_name+0x88>
 800940a:	7ffb      	ldrb	r3, [r7, #31]
 800940c:	2b2e      	cmp	r3, #46	; 0x2e
 800940e:	d001      	beq.n	8009414 <create_name+0x8c>
 8009410:	2306      	movs	r3, #6
 8009412:	e044      	b.n	800949e <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8009414:	2308      	movs	r3, #8
 8009416:	613b      	str	r3, [r7, #16]
 8009418:	230b      	movs	r3, #11
 800941a:	61bb      	str	r3, [r7, #24]
			continue;
 800941c:	e022      	b.n	8009464 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800941e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009422:	2b00      	cmp	r3, #0
 8009424:	da04      	bge.n	8009430 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8009426:	7ffb      	ldrb	r3, [r7, #31]
 8009428:	3b80      	subs	r3, #128	; 0x80
 800942a:	4a1f      	ldr	r2, [pc, #124]	; (80094a8 <create_name+0x120>)
 800942c:	5cd3      	ldrb	r3, [r2, r3]
 800942e:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8009430:	7ffb      	ldrb	r3, [r7, #31]
 8009432:	4619      	mov	r1, r3
 8009434:	481d      	ldr	r0, [pc, #116]	; (80094ac <create_name+0x124>)
 8009436:	f7ff f815 	bl	8008464 <chk_chr>
 800943a:	4603      	mov	r3, r0
 800943c:	2b00      	cmp	r3, #0
 800943e:	d001      	beq.n	8009444 <create_name+0xbc>
 8009440:	2306      	movs	r3, #6
 8009442:	e02c      	b.n	800949e <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8009444:	7ffb      	ldrb	r3, [r7, #31]
 8009446:	2b60      	cmp	r3, #96	; 0x60
 8009448:	d905      	bls.n	8009456 <create_name+0xce>
 800944a:	7ffb      	ldrb	r3, [r7, #31]
 800944c:	2b7a      	cmp	r3, #122	; 0x7a
 800944e:	d802      	bhi.n	8009456 <create_name+0xce>
 8009450:	7ffb      	ldrb	r3, [r7, #31]
 8009452:	3b20      	subs	r3, #32
 8009454:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 8009456:	693b      	ldr	r3, [r7, #16]
 8009458:	1c5a      	adds	r2, r3, #1
 800945a:	613a      	str	r2, [r7, #16]
 800945c:	68ba      	ldr	r2, [r7, #8]
 800945e:	4413      	add	r3, r2
 8009460:	7ffa      	ldrb	r2, [r7, #31]
 8009462:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8009464:	e7a6      	b.n	80093b4 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8009466:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8009468:	68fa      	ldr	r2, [r7, #12]
 800946a:	697b      	ldr	r3, [r7, #20]
 800946c:	441a      	add	r2, r3
 800946e:	683b      	ldr	r3, [r7, #0]
 8009470:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8009472:	693b      	ldr	r3, [r7, #16]
 8009474:	2b00      	cmp	r3, #0
 8009476:	d101      	bne.n	800947c <create_name+0xf4>
 8009478:	2306      	movs	r3, #6
 800947a:	e010      	b.n	800949e <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800947c:	68bb      	ldr	r3, [r7, #8]
 800947e:	781b      	ldrb	r3, [r3, #0]
 8009480:	2be5      	cmp	r3, #229	; 0xe5
 8009482:	d102      	bne.n	800948a <create_name+0x102>
 8009484:	68bb      	ldr	r3, [r7, #8]
 8009486:	2205      	movs	r2, #5
 8009488:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800948a:	7ffb      	ldrb	r3, [r7, #31]
 800948c:	2b20      	cmp	r3, #32
 800948e:	d801      	bhi.n	8009494 <create_name+0x10c>
 8009490:	2204      	movs	r2, #4
 8009492:	e000      	b.n	8009496 <create_name+0x10e>
 8009494:	2200      	movs	r2, #0
 8009496:	68bb      	ldr	r3, [r7, #8]
 8009498:	330b      	adds	r3, #11
 800949a:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800949c:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800949e:	4618      	mov	r0, r3
 80094a0:	3720      	adds	r7, #32
 80094a2:	46bd      	mov	sp, r7
 80094a4:	bd80      	pop	{r7, pc}
 80094a6:	bf00      	nop
 80094a8:	0800ae4c 	.word	0x0800ae4c
 80094ac:	0800addc 	.word	0x0800addc

080094b0 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80094b0:	b580      	push	{r7, lr}
 80094b2:	b086      	sub	sp, #24
 80094b4:	af00      	add	r7, sp, #0
 80094b6:	6078      	str	r0, [r7, #4]
 80094b8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80094be:	693b      	ldr	r3, [r7, #16]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80094c4:	e002      	b.n	80094cc <follow_path+0x1c>
 80094c6:	683b      	ldr	r3, [r7, #0]
 80094c8:	3301      	adds	r3, #1
 80094ca:	603b      	str	r3, [r7, #0]
 80094cc:	683b      	ldr	r3, [r7, #0]
 80094ce:	781b      	ldrb	r3, [r3, #0]
 80094d0:	2b2f      	cmp	r3, #47	; 0x2f
 80094d2:	d0f8      	beq.n	80094c6 <follow_path+0x16>
 80094d4:	683b      	ldr	r3, [r7, #0]
 80094d6:	781b      	ldrb	r3, [r3, #0]
 80094d8:	2b5c      	cmp	r3, #92	; 0x5c
 80094da:	d0f4      	beq.n	80094c6 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80094dc:	693b      	ldr	r3, [r7, #16]
 80094de:	2200      	movs	r2, #0
 80094e0:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80094e2:	683b      	ldr	r3, [r7, #0]
 80094e4:	781b      	ldrb	r3, [r3, #0]
 80094e6:	2b1f      	cmp	r3, #31
 80094e8:	d80a      	bhi.n	8009500 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	2280      	movs	r2, #128	; 0x80
 80094ee:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 80094f2:	2100      	movs	r1, #0
 80094f4:	6878      	ldr	r0, [r7, #4]
 80094f6:	f7ff fcf9 	bl	8008eec <dir_sdi>
 80094fa:	4603      	mov	r3, r0
 80094fc:	75fb      	strb	r3, [r7, #23]
 80094fe:	e043      	b.n	8009588 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8009500:	463b      	mov	r3, r7
 8009502:	4619      	mov	r1, r3
 8009504:	6878      	ldr	r0, [r7, #4]
 8009506:	f7ff ff3f 	bl	8009388 <create_name>
 800950a:	4603      	mov	r3, r0
 800950c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800950e:	7dfb      	ldrb	r3, [r7, #23]
 8009510:	2b00      	cmp	r3, #0
 8009512:	d134      	bne.n	800957e <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8009514:	6878      	ldr	r0, [r7, #4]
 8009516:	f7ff feaf 	bl	8009278 <dir_find>
 800951a:	4603      	mov	r3, r0
 800951c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8009524:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8009526:	7dfb      	ldrb	r3, [r7, #23]
 8009528:	2b00      	cmp	r3, #0
 800952a:	d00a      	beq.n	8009542 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800952c:	7dfb      	ldrb	r3, [r7, #23]
 800952e:	2b04      	cmp	r3, #4
 8009530:	d127      	bne.n	8009582 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8009532:	7afb      	ldrb	r3, [r7, #11]
 8009534:	f003 0304 	and.w	r3, r3, #4
 8009538:	2b00      	cmp	r3, #0
 800953a:	d122      	bne.n	8009582 <follow_path+0xd2>
 800953c:	2305      	movs	r3, #5
 800953e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8009540:	e01f      	b.n	8009582 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8009542:	7afb      	ldrb	r3, [r7, #11]
 8009544:	f003 0304 	and.w	r3, r3, #4
 8009548:	2b00      	cmp	r3, #0
 800954a:	d11c      	bne.n	8009586 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800954c:	693b      	ldr	r3, [r7, #16]
 800954e:	799b      	ldrb	r3, [r3, #6]
 8009550:	f003 0310 	and.w	r3, r3, #16
 8009554:	2b00      	cmp	r3, #0
 8009556:	d102      	bne.n	800955e <follow_path+0xae>
				res = FR_NO_PATH; break;
 8009558:	2305      	movs	r3, #5
 800955a:	75fb      	strb	r3, [r7, #23]
 800955c:	e014      	b.n	8009588 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	695b      	ldr	r3, [r3, #20]
 8009568:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800956c:	4413      	add	r3, r2
 800956e:	4619      	mov	r1, r3
 8009570:	68f8      	ldr	r0, [r7, #12]
 8009572:	f7ff fe42 	bl	80091fa <ld_clust>
 8009576:	4602      	mov	r2, r0
 8009578:	693b      	ldr	r3, [r7, #16]
 800957a:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800957c:	e7c0      	b.n	8009500 <follow_path+0x50>
			if (res != FR_OK) break;
 800957e:	bf00      	nop
 8009580:	e002      	b.n	8009588 <follow_path+0xd8>
				break;
 8009582:	bf00      	nop
 8009584:	e000      	b.n	8009588 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8009586:	bf00      	nop
			}
		}
	}

	return res;
 8009588:	7dfb      	ldrb	r3, [r7, #23]
}
 800958a:	4618      	mov	r0, r3
 800958c:	3718      	adds	r7, #24
 800958e:	46bd      	mov	sp, r7
 8009590:	bd80      	pop	{r7, pc}

08009592 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8009592:	b480      	push	{r7}
 8009594:	b087      	sub	sp, #28
 8009596:	af00      	add	r7, sp, #0
 8009598:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800959a:	f04f 33ff 	mov.w	r3, #4294967295
 800959e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d031      	beq.n	800960c <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	617b      	str	r3, [r7, #20]
 80095ae:	e002      	b.n	80095b6 <get_ldnumber+0x24>
 80095b0:	697b      	ldr	r3, [r7, #20]
 80095b2:	3301      	adds	r3, #1
 80095b4:	617b      	str	r3, [r7, #20]
 80095b6:	697b      	ldr	r3, [r7, #20]
 80095b8:	781b      	ldrb	r3, [r3, #0]
 80095ba:	2b20      	cmp	r3, #32
 80095bc:	d903      	bls.n	80095c6 <get_ldnumber+0x34>
 80095be:	697b      	ldr	r3, [r7, #20]
 80095c0:	781b      	ldrb	r3, [r3, #0]
 80095c2:	2b3a      	cmp	r3, #58	; 0x3a
 80095c4:	d1f4      	bne.n	80095b0 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80095c6:	697b      	ldr	r3, [r7, #20]
 80095c8:	781b      	ldrb	r3, [r3, #0]
 80095ca:	2b3a      	cmp	r3, #58	; 0x3a
 80095cc:	d11c      	bne.n	8009608 <get_ldnumber+0x76>
			tp = *path;
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	1c5a      	adds	r2, r3, #1
 80095d8:	60fa      	str	r2, [r7, #12]
 80095da:	781b      	ldrb	r3, [r3, #0]
 80095dc:	3b30      	subs	r3, #48	; 0x30
 80095de:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80095e0:	68bb      	ldr	r3, [r7, #8]
 80095e2:	2b09      	cmp	r3, #9
 80095e4:	d80e      	bhi.n	8009604 <get_ldnumber+0x72>
 80095e6:	68fa      	ldr	r2, [r7, #12]
 80095e8:	697b      	ldr	r3, [r7, #20]
 80095ea:	429a      	cmp	r2, r3
 80095ec:	d10a      	bne.n	8009604 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80095ee:	68bb      	ldr	r3, [r7, #8]
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d107      	bne.n	8009604 <get_ldnumber+0x72>
					vol = (int)i;
 80095f4:	68bb      	ldr	r3, [r7, #8]
 80095f6:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80095f8:	697b      	ldr	r3, [r7, #20]
 80095fa:	3301      	adds	r3, #1
 80095fc:	617b      	str	r3, [r7, #20]
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	697a      	ldr	r2, [r7, #20]
 8009602:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8009604:	693b      	ldr	r3, [r7, #16]
 8009606:	e002      	b.n	800960e <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8009608:	2300      	movs	r3, #0
 800960a:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800960c:	693b      	ldr	r3, [r7, #16]
}
 800960e:	4618      	mov	r0, r3
 8009610:	371c      	adds	r7, #28
 8009612:	46bd      	mov	sp, r7
 8009614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009618:	4770      	bx	lr
	...

0800961c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800961c:	b580      	push	{r7, lr}
 800961e:	b082      	sub	sp, #8
 8009620:	af00      	add	r7, sp, #0
 8009622:	6078      	str	r0, [r7, #4]
 8009624:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	2200      	movs	r2, #0
 800962a:	70da      	strb	r2, [r3, #3]
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	f04f 32ff 	mov.w	r2, #4294967295
 8009632:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8009634:	6839      	ldr	r1, [r7, #0]
 8009636:	6878      	ldr	r0, [r7, #4]
 8009638:	f7ff f8e0 	bl	80087fc <move_window>
 800963c:	4603      	mov	r3, r0
 800963e:	2b00      	cmp	r3, #0
 8009640:	d001      	beq.n	8009646 <check_fs+0x2a>
 8009642:	2304      	movs	r3, #4
 8009644:	e038      	b.n	80096b8 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	3330      	adds	r3, #48	; 0x30
 800964a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800964e:	4618      	mov	r0, r3
 8009650:	f7fe fe24 	bl	800829c <ld_word>
 8009654:	4603      	mov	r3, r0
 8009656:	461a      	mov	r2, r3
 8009658:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800965c:	429a      	cmp	r2, r3
 800965e:	d001      	beq.n	8009664 <check_fs+0x48>
 8009660:	2303      	movs	r3, #3
 8009662:	e029      	b.n	80096b8 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800966a:	2be9      	cmp	r3, #233	; 0xe9
 800966c:	d009      	beq.n	8009682 <check_fs+0x66>
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009674:	2beb      	cmp	r3, #235	; 0xeb
 8009676:	d11e      	bne.n	80096b6 <check_fs+0x9a>
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800967e:	2b90      	cmp	r3, #144	; 0x90
 8009680:	d119      	bne.n	80096b6 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	3330      	adds	r3, #48	; 0x30
 8009686:	3336      	adds	r3, #54	; 0x36
 8009688:	4618      	mov	r0, r3
 800968a:	f7fe fe1f 	bl	80082cc <ld_dword>
 800968e:	4603      	mov	r3, r0
 8009690:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8009694:	4a0a      	ldr	r2, [pc, #40]	; (80096c0 <check_fs+0xa4>)
 8009696:	4293      	cmp	r3, r2
 8009698:	d101      	bne.n	800969e <check_fs+0x82>
 800969a:	2300      	movs	r3, #0
 800969c:	e00c      	b.n	80096b8 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	3330      	adds	r3, #48	; 0x30
 80096a2:	3352      	adds	r3, #82	; 0x52
 80096a4:	4618      	mov	r0, r3
 80096a6:	f7fe fe11 	bl	80082cc <ld_dword>
 80096aa:	4602      	mov	r2, r0
 80096ac:	4b05      	ldr	r3, [pc, #20]	; (80096c4 <check_fs+0xa8>)
 80096ae:	429a      	cmp	r2, r3
 80096b0:	d101      	bne.n	80096b6 <check_fs+0x9a>
 80096b2:	2300      	movs	r3, #0
 80096b4:	e000      	b.n	80096b8 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80096b6:	2302      	movs	r3, #2
}
 80096b8:	4618      	mov	r0, r3
 80096ba:	3708      	adds	r7, #8
 80096bc:	46bd      	mov	sp, r7
 80096be:	bd80      	pop	{r7, pc}
 80096c0:	00544146 	.word	0x00544146
 80096c4:	33544146 	.word	0x33544146

080096c8 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80096c8:	b580      	push	{r7, lr}
 80096ca:	b096      	sub	sp, #88	; 0x58
 80096cc:	af00      	add	r7, sp, #0
 80096ce:	60f8      	str	r0, [r7, #12]
 80096d0:	60b9      	str	r1, [r7, #8]
 80096d2:	4613      	mov	r3, r2
 80096d4:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80096d6:	68bb      	ldr	r3, [r7, #8]
 80096d8:	2200      	movs	r2, #0
 80096da:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80096dc:	68f8      	ldr	r0, [r7, #12]
 80096de:	f7ff ff58 	bl	8009592 <get_ldnumber>
 80096e2:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80096e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	da01      	bge.n	80096ee <find_volume+0x26>
 80096ea:	230b      	movs	r3, #11
 80096ec:	e22e      	b.n	8009b4c <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80096ee:	4aa8      	ldr	r2, [pc, #672]	; (8009990 <find_volume+0x2c8>)
 80096f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80096f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80096f6:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80096f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d101      	bne.n	8009702 <find_volume+0x3a>
 80096fe:	230c      	movs	r3, #12
 8009700:	e224      	b.n	8009b4c <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8009702:	68bb      	ldr	r3, [r7, #8]
 8009704:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009706:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8009708:	79fb      	ldrb	r3, [r7, #7]
 800970a:	f023 0301 	bic.w	r3, r3, #1
 800970e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8009710:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009712:	781b      	ldrb	r3, [r3, #0]
 8009714:	2b00      	cmp	r3, #0
 8009716:	d01a      	beq.n	800974e <find_volume+0x86>
		stat = disk_status(fs->drv);
 8009718:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800971a:	785b      	ldrb	r3, [r3, #1]
 800971c:	4618      	mov	r0, r3
 800971e:	f7fe fd1f 	bl	8008160 <disk_status>
 8009722:	4603      	mov	r3, r0
 8009724:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8009728:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800972c:	f003 0301 	and.w	r3, r3, #1
 8009730:	2b00      	cmp	r3, #0
 8009732:	d10c      	bne.n	800974e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8009734:	79fb      	ldrb	r3, [r7, #7]
 8009736:	2b00      	cmp	r3, #0
 8009738:	d007      	beq.n	800974a <find_volume+0x82>
 800973a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800973e:	f003 0304 	and.w	r3, r3, #4
 8009742:	2b00      	cmp	r3, #0
 8009744:	d001      	beq.n	800974a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8009746:	230a      	movs	r3, #10
 8009748:	e200      	b.n	8009b4c <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 800974a:	2300      	movs	r3, #0
 800974c:	e1fe      	b.n	8009b4c <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800974e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009750:	2200      	movs	r2, #0
 8009752:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8009754:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009756:	b2da      	uxtb	r2, r3
 8009758:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800975a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800975c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800975e:	785b      	ldrb	r3, [r3, #1]
 8009760:	4618      	mov	r0, r3
 8009762:	f7fe fd17 	bl	8008194 <disk_initialize>
 8009766:	4603      	mov	r3, r0
 8009768:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800976c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009770:	f003 0301 	and.w	r3, r3, #1
 8009774:	2b00      	cmp	r3, #0
 8009776:	d001      	beq.n	800977c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8009778:	2303      	movs	r3, #3
 800977a:	e1e7      	b.n	8009b4c <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800977c:	79fb      	ldrb	r3, [r7, #7]
 800977e:	2b00      	cmp	r3, #0
 8009780:	d007      	beq.n	8009792 <find_volume+0xca>
 8009782:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009786:	f003 0304 	and.w	r3, r3, #4
 800978a:	2b00      	cmp	r3, #0
 800978c:	d001      	beq.n	8009792 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800978e:	230a      	movs	r3, #10
 8009790:	e1dc      	b.n	8009b4c <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8009792:	2300      	movs	r3, #0
 8009794:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8009796:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009798:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800979a:	f7ff ff3f 	bl	800961c <check_fs>
 800979e:	4603      	mov	r3, r0
 80097a0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80097a4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80097a8:	2b02      	cmp	r3, #2
 80097aa:	d14b      	bne.n	8009844 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80097ac:	2300      	movs	r3, #0
 80097ae:	643b      	str	r3, [r7, #64]	; 0x40
 80097b0:	e01f      	b.n	80097f2 <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80097b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097b4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80097b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80097ba:	011b      	lsls	r3, r3, #4
 80097bc:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80097c0:	4413      	add	r3, r2
 80097c2:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80097c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097c6:	3304      	adds	r3, #4
 80097c8:	781b      	ldrb	r3, [r3, #0]
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d006      	beq.n	80097dc <find_volume+0x114>
 80097ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097d0:	3308      	adds	r3, #8
 80097d2:	4618      	mov	r0, r3
 80097d4:	f7fe fd7a 	bl	80082cc <ld_dword>
 80097d8:	4602      	mov	r2, r0
 80097da:	e000      	b.n	80097de <find_volume+0x116>
 80097dc:	2200      	movs	r2, #0
 80097de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80097e0:	009b      	lsls	r3, r3, #2
 80097e2:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80097e6:	440b      	add	r3, r1
 80097e8:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80097ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80097ee:	3301      	adds	r3, #1
 80097f0:	643b      	str	r3, [r7, #64]	; 0x40
 80097f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80097f4:	2b03      	cmp	r3, #3
 80097f6:	d9dc      	bls.n	80097b2 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80097f8:	2300      	movs	r3, #0
 80097fa:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80097fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d002      	beq.n	8009808 <find_volume+0x140>
 8009802:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009804:	3b01      	subs	r3, #1
 8009806:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8009808:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800980a:	009b      	lsls	r3, r3, #2
 800980c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8009810:	4413      	add	r3, r2
 8009812:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8009816:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8009818:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800981a:	2b00      	cmp	r3, #0
 800981c:	d005      	beq.n	800982a <find_volume+0x162>
 800981e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009820:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009822:	f7ff fefb 	bl	800961c <check_fs>
 8009826:	4603      	mov	r3, r0
 8009828:	e000      	b.n	800982c <find_volume+0x164>
 800982a:	2303      	movs	r3, #3
 800982c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8009830:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009834:	2b01      	cmp	r3, #1
 8009836:	d905      	bls.n	8009844 <find_volume+0x17c>
 8009838:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800983a:	3301      	adds	r3, #1
 800983c:	643b      	str	r3, [r7, #64]	; 0x40
 800983e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009840:	2b03      	cmp	r3, #3
 8009842:	d9e1      	bls.n	8009808 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8009844:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009848:	2b04      	cmp	r3, #4
 800984a:	d101      	bne.n	8009850 <find_volume+0x188>
 800984c:	2301      	movs	r3, #1
 800984e:	e17d      	b.n	8009b4c <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8009850:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009854:	2b01      	cmp	r3, #1
 8009856:	d901      	bls.n	800985c <find_volume+0x194>
 8009858:	230d      	movs	r3, #13
 800985a:	e177      	b.n	8009b4c <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800985c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800985e:	3330      	adds	r3, #48	; 0x30
 8009860:	330b      	adds	r3, #11
 8009862:	4618      	mov	r0, r3
 8009864:	f7fe fd1a 	bl	800829c <ld_word>
 8009868:	4603      	mov	r3, r0
 800986a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800986e:	d001      	beq.n	8009874 <find_volume+0x1ac>
 8009870:	230d      	movs	r3, #13
 8009872:	e16b      	b.n	8009b4c <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8009874:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009876:	3330      	adds	r3, #48	; 0x30
 8009878:	3316      	adds	r3, #22
 800987a:	4618      	mov	r0, r3
 800987c:	f7fe fd0e 	bl	800829c <ld_word>
 8009880:	4603      	mov	r3, r0
 8009882:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8009884:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009886:	2b00      	cmp	r3, #0
 8009888:	d106      	bne.n	8009898 <find_volume+0x1d0>
 800988a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800988c:	3330      	adds	r3, #48	; 0x30
 800988e:	3324      	adds	r3, #36	; 0x24
 8009890:	4618      	mov	r0, r3
 8009892:	f7fe fd1b 	bl	80082cc <ld_dword>
 8009896:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8009898:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800989a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800989c:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800989e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098a0:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 80098a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098a6:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80098a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098aa:	789b      	ldrb	r3, [r3, #2]
 80098ac:	2b01      	cmp	r3, #1
 80098ae:	d005      	beq.n	80098bc <find_volume+0x1f4>
 80098b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098b2:	789b      	ldrb	r3, [r3, #2]
 80098b4:	2b02      	cmp	r3, #2
 80098b6:	d001      	beq.n	80098bc <find_volume+0x1f4>
 80098b8:	230d      	movs	r3, #13
 80098ba:	e147      	b.n	8009b4c <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80098bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098be:	789b      	ldrb	r3, [r3, #2]
 80098c0:	461a      	mov	r2, r3
 80098c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80098c4:	fb02 f303 	mul.w	r3, r2, r3
 80098c8:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80098ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80098d0:	b29a      	uxth	r2, r3
 80098d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098d4:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80098d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098d8:	895b      	ldrh	r3, [r3, #10]
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d008      	beq.n	80098f0 <find_volume+0x228>
 80098de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098e0:	895b      	ldrh	r3, [r3, #10]
 80098e2:	461a      	mov	r2, r3
 80098e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098e6:	895b      	ldrh	r3, [r3, #10]
 80098e8:	3b01      	subs	r3, #1
 80098ea:	4013      	ands	r3, r2
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d001      	beq.n	80098f4 <find_volume+0x22c>
 80098f0:	230d      	movs	r3, #13
 80098f2:	e12b      	b.n	8009b4c <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80098f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098f6:	3330      	adds	r3, #48	; 0x30
 80098f8:	3311      	adds	r3, #17
 80098fa:	4618      	mov	r0, r3
 80098fc:	f7fe fcce 	bl	800829c <ld_word>
 8009900:	4603      	mov	r3, r0
 8009902:	461a      	mov	r2, r3
 8009904:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009906:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8009908:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800990a:	891b      	ldrh	r3, [r3, #8]
 800990c:	f003 030f 	and.w	r3, r3, #15
 8009910:	b29b      	uxth	r3, r3
 8009912:	2b00      	cmp	r3, #0
 8009914:	d001      	beq.n	800991a <find_volume+0x252>
 8009916:	230d      	movs	r3, #13
 8009918:	e118      	b.n	8009b4c <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800991a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800991c:	3330      	adds	r3, #48	; 0x30
 800991e:	3313      	adds	r3, #19
 8009920:	4618      	mov	r0, r3
 8009922:	f7fe fcbb 	bl	800829c <ld_word>
 8009926:	4603      	mov	r3, r0
 8009928:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800992a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800992c:	2b00      	cmp	r3, #0
 800992e:	d106      	bne.n	800993e <find_volume+0x276>
 8009930:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009932:	3330      	adds	r3, #48	; 0x30
 8009934:	3320      	adds	r3, #32
 8009936:	4618      	mov	r0, r3
 8009938:	f7fe fcc8 	bl	80082cc <ld_dword>
 800993c:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800993e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009940:	3330      	adds	r3, #48	; 0x30
 8009942:	330e      	adds	r3, #14
 8009944:	4618      	mov	r0, r3
 8009946:	f7fe fca9 	bl	800829c <ld_word>
 800994a:	4603      	mov	r3, r0
 800994c:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800994e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009950:	2b00      	cmp	r3, #0
 8009952:	d101      	bne.n	8009958 <find_volume+0x290>
 8009954:	230d      	movs	r3, #13
 8009956:	e0f9      	b.n	8009b4c <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8009958:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800995a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800995c:	4413      	add	r3, r2
 800995e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009960:	8912      	ldrh	r2, [r2, #8]
 8009962:	0912      	lsrs	r2, r2, #4
 8009964:	b292      	uxth	r2, r2
 8009966:	4413      	add	r3, r2
 8009968:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800996a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800996c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800996e:	429a      	cmp	r2, r3
 8009970:	d201      	bcs.n	8009976 <find_volume+0x2ae>
 8009972:	230d      	movs	r3, #13
 8009974:	e0ea      	b.n	8009b4c <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8009976:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800997a:	1ad3      	subs	r3, r2, r3
 800997c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800997e:	8952      	ldrh	r2, [r2, #10]
 8009980:	fbb3 f3f2 	udiv	r3, r3, r2
 8009984:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8009986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009988:	2b00      	cmp	r3, #0
 800998a:	d103      	bne.n	8009994 <find_volume+0x2cc>
 800998c:	230d      	movs	r3, #13
 800998e:	e0dd      	b.n	8009b4c <find_volume+0x484>
 8009990:	200000b4 	.word	0x200000b4
		fmt = FS_FAT32;
 8009994:	2303      	movs	r3, #3
 8009996:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800999a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800999c:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80099a0:	4293      	cmp	r3, r2
 80099a2:	d802      	bhi.n	80099aa <find_volume+0x2e2>
 80099a4:	2302      	movs	r3, #2
 80099a6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80099aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099ac:	f640 72f5 	movw	r2, #4085	; 0xff5
 80099b0:	4293      	cmp	r3, r2
 80099b2:	d802      	bhi.n	80099ba <find_volume+0x2f2>
 80099b4:	2301      	movs	r3, #1
 80099b6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80099ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099bc:	1c9a      	adds	r2, r3, #2
 80099be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099c0:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 80099c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099c4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80099c6:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80099c8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80099ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80099cc:	441a      	add	r2, r3
 80099ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099d0:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 80099d2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80099d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099d6:	441a      	add	r2, r3
 80099d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099da:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 80099dc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80099e0:	2b03      	cmp	r3, #3
 80099e2:	d11e      	bne.n	8009a22 <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80099e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099e6:	3330      	adds	r3, #48	; 0x30
 80099e8:	332a      	adds	r3, #42	; 0x2a
 80099ea:	4618      	mov	r0, r3
 80099ec:	f7fe fc56 	bl	800829c <ld_word>
 80099f0:	4603      	mov	r3, r0
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d001      	beq.n	80099fa <find_volume+0x332>
 80099f6:	230d      	movs	r3, #13
 80099f8:	e0a8      	b.n	8009b4c <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80099fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099fc:	891b      	ldrh	r3, [r3, #8]
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d001      	beq.n	8009a06 <find_volume+0x33e>
 8009a02:	230d      	movs	r3, #13
 8009a04:	e0a2      	b.n	8009b4c <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8009a06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a08:	3330      	adds	r3, #48	; 0x30
 8009a0a:	332c      	adds	r3, #44	; 0x2c
 8009a0c:	4618      	mov	r0, r3
 8009a0e:	f7fe fc5d 	bl	80082cc <ld_dword>
 8009a12:	4602      	mov	r2, r0
 8009a14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a16:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8009a18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a1a:	695b      	ldr	r3, [r3, #20]
 8009a1c:	009b      	lsls	r3, r3, #2
 8009a1e:	647b      	str	r3, [r7, #68]	; 0x44
 8009a20:	e01f      	b.n	8009a62 <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8009a22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a24:	891b      	ldrh	r3, [r3, #8]
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d101      	bne.n	8009a2e <find_volume+0x366>
 8009a2a:	230d      	movs	r3, #13
 8009a2c:	e08e      	b.n	8009b4c <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8009a2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a30:	6a1a      	ldr	r2, [r3, #32]
 8009a32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009a34:	441a      	add	r2, r3
 8009a36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a38:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8009a3a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009a3e:	2b02      	cmp	r3, #2
 8009a40:	d103      	bne.n	8009a4a <find_volume+0x382>
 8009a42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a44:	695b      	ldr	r3, [r3, #20]
 8009a46:	005b      	lsls	r3, r3, #1
 8009a48:	e00a      	b.n	8009a60 <find_volume+0x398>
 8009a4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a4c:	695a      	ldr	r2, [r3, #20]
 8009a4e:	4613      	mov	r3, r2
 8009a50:	005b      	lsls	r3, r3, #1
 8009a52:	4413      	add	r3, r2
 8009a54:	085a      	lsrs	r2, r3, #1
 8009a56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a58:	695b      	ldr	r3, [r3, #20]
 8009a5a:	f003 0301 	and.w	r3, r3, #1
 8009a5e:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8009a60:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8009a62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a64:	699a      	ldr	r2, [r3, #24]
 8009a66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009a68:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8009a6c:	0a5b      	lsrs	r3, r3, #9
 8009a6e:	429a      	cmp	r2, r3
 8009a70:	d201      	bcs.n	8009a76 <find_volume+0x3ae>
 8009a72:	230d      	movs	r3, #13
 8009a74:	e06a      	b.n	8009b4c <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8009a76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a78:	f04f 32ff 	mov.w	r2, #4294967295
 8009a7c:	611a      	str	r2, [r3, #16]
 8009a7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a80:	691a      	ldr	r2, [r3, #16]
 8009a82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a84:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8009a86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a88:	2280      	movs	r2, #128	; 0x80
 8009a8a:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8009a8c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009a90:	2b03      	cmp	r3, #3
 8009a92:	d149      	bne.n	8009b28 <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8009a94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a96:	3330      	adds	r3, #48	; 0x30
 8009a98:	3330      	adds	r3, #48	; 0x30
 8009a9a:	4618      	mov	r0, r3
 8009a9c:	f7fe fbfe 	bl	800829c <ld_word>
 8009aa0:	4603      	mov	r3, r0
 8009aa2:	2b01      	cmp	r3, #1
 8009aa4:	d140      	bne.n	8009b28 <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 8009aa6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009aa8:	3301      	adds	r3, #1
 8009aaa:	4619      	mov	r1, r3
 8009aac:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009aae:	f7fe fea5 	bl	80087fc <move_window>
 8009ab2:	4603      	mov	r3, r0
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d137      	bne.n	8009b28 <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 8009ab8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009aba:	2200      	movs	r2, #0
 8009abc:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8009abe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ac0:	3330      	adds	r3, #48	; 0x30
 8009ac2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009ac6:	4618      	mov	r0, r3
 8009ac8:	f7fe fbe8 	bl	800829c <ld_word>
 8009acc:	4603      	mov	r3, r0
 8009ace:	461a      	mov	r2, r3
 8009ad0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8009ad4:	429a      	cmp	r2, r3
 8009ad6:	d127      	bne.n	8009b28 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8009ad8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ada:	3330      	adds	r3, #48	; 0x30
 8009adc:	4618      	mov	r0, r3
 8009ade:	f7fe fbf5 	bl	80082cc <ld_dword>
 8009ae2:	4602      	mov	r2, r0
 8009ae4:	4b1b      	ldr	r3, [pc, #108]	; (8009b54 <find_volume+0x48c>)
 8009ae6:	429a      	cmp	r2, r3
 8009ae8:	d11e      	bne.n	8009b28 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8009aea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009aec:	3330      	adds	r3, #48	; 0x30
 8009aee:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8009af2:	4618      	mov	r0, r3
 8009af4:	f7fe fbea 	bl	80082cc <ld_dword>
 8009af8:	4602      	mov	r2, r0
 8009afa:	4b17      	ldr	r3, [pc, #92]	; (8009b58 <find_volume+0x490>)
 8009afc:	429a      	cmp	r2, r3
 8009afe:	d113      	bne.n	8009b28 <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8009b00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b02:	3330      	adds	r3, #48	; 0x30
 8009b04:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8009b08:	4618      	mov	r0, r3
 8009b0a:	f7fe fbdf 	bl	80082cc <ld_dword>
 8009b0e:	4602      	mov	r2, r0
 8009b10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b12:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8009b14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b16:	3330      	adds	r3, #48	; 0x30
 8009b18:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8009b1c:	4618      	mov	r0, r3
 8009b1e:	f7fe fbd5 	bl	80082cc <ld_dword>
 8009b22:	4602      	mov	r2, r0
 8009b24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b26:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8009b28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b2a:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8009b2e:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8009b30:	4b0a      	ldr	r3, [pc, #40]	; (8009b5c <find_volume+0x494>)
 8009b32:	881b      	ldrh	r3, [r3, #0]
 8009b34:	3301      	adds	r3, #1
 8009b36:	b29a      	uxth	r2, r3
 8009b38:	4b08      	ldr	r3, [pc, #32]	; (8009b5c <find_volume+0x494>)
 8009b3a:	801a      	strh	r2, [r3, #0]
 8009b3c:	4b07      	ldr	r3, [pc, #28]	; (8009b5c <find_volume+0x494>)
 8009b3e:	881a      	ldrh	r2, [r3, #0]
 8009b40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b42:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8009b44:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009b46:	f7fe fdf1 	bl	800872c <clear_lock>
#endif
	return FR_OK;
 8009b4a:	2300      	movs	r3, #0
}
 8009b4c:	4618      	mov	r0, r3
 8009b4e:	3758      	adds	r7, #88	; 0x58
 8009b50:	46bd      	mov	sp, r7
 8009b52:	bd80      	pop	{r7, pc}
 8009b54:	41615252 	.word	0x41615252
 8009b58:	61417272 	.word	0x61417272
 8009b5c:	200000b8 	.word	0x200000b8

08009b60 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8009b60:	b580      	push	{r7, lr}
 8009b62:	b084      	sub	sp, #16
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	6078      	str	r0, [r7, #4]
 8009b68:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8009b6a:	2309      	movs	r3, #9
 8009b6c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d01c      	beq.n	8009bae <validate+0x4e>
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d018      	beq.n	8009bae <validate+0x4e>
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	781b      	ldrb	r3, [r3, #0]
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d013      	beq.n	8009bae <validate+0x4e>
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	889a      	ldrh	r2, [r3, #4]
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	88db      	ldrh	r3, [r3, #6]
 8009b90:	429a      	cmp	r2, r3
 8009b92:	d10c      	bne.n	8009bae <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	785b      	ldrb	r3, [r3, #1]
 8009b9a:	4618      	mov	r0, r3
 8009b9c:	f7fe fae0 	bl	8008160 <disk_status>
 8009ba0:	4603      	mov	r3, r0
 8009ba2:	f003 0301 	and.w	r3, r3, #1
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d101      	bne.n	8009bae <validate+0x4e>
			res = FR_OK;
 8009baa:	2300      	movs	r3, #0
 8009bac:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8009bae:	7bfb      	ldrb	r3, [r7, #15]
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d102      	bne.n	8009bba <validate+0x5a>
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	e000      	b.n	8009bbc <validate+0x5c>
 8009bba:	2300      	movs	r3, #0
 8009bbc:	683a      	ldr	r2, [r7, #0]
 8009bbe:	6013      	str	r3, [r2, #0]
	return res;
 8009bc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bc2:	4618      	mov	r0, r3
 8009bc4:	3710      	adds	r7, #16
 8009bc6:	46bd      	mov	sp, r7
 8009bc8:	bd80      	pop	{r7, pc}
	...

08009bcc <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8009bcc:	b580      	push	{r7, lr}
 8009bce:	b088      	sub	sp, #32
 8009bd0:	af00      	add	r7, sp, #0
 8009bd2:	60f8      	str	r0, [r7, #12]
 8009bd4:	60b9      	str	r1, [r7, #8]
 8009bd6:	4613      	mov	r3, r2
 8009bd8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8009bda:	68bb      	ldr	r3, [r7, #8]
 8009bdc:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8009bde:	f107 0310 	add.w	r3, r7, #16
 8009be2:	4618      	mov	r0, r3
 8009be4:	f7ff fcd5 	bl	8009592 <get_ldnumber>
 8009be8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8009bea:	69fb      	ldr	r3, [r7, #28]
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	da01      	bge.n	8009bf4 <f_mount+0x28>
 8009bf0:	230b      	movs	r3, #11
 8009bf2:	e02b      	b.n	8009c4c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8009bf4:	4a17      	ldr	r2, [pc, #92]	; (8009c54 <f_mount+0x88>)
 8009bf6:	69fb      	ldr	r3, [r7, #28]
 8009bf8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009bfc:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8009bfe:	69bb      	ldr	r3, [r7, #24]
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d005      	beq.n	8009c10 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8009c04:	69b8      	ldr	r0, [r7, #24]
 8009c06:	f7fe fd91 	bl	800872c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8009c0a:	69bb      	ldr	r3, [r7, #24]
 8009c0c:	2200      	movs	r2, #0
 8009c0e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d002      	beq.n	8009c1c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	2200      	movs	r2, #0
 8009c1a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8009c1c:	68fa      	ldr	r2, [r7, #12]
 8009c1e:	490d      	ldr	r1, [pc, #52]	; (8009c54 <f_mount+0x88>)
 8009c20:	69fb      	ldr	r3, [r7, #28]
 8009c22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d002      	beq.n	8009c32 <f_mount+0x66>
 8009c2c:	79fb      	ldrb	r3, [r7, #7]
 8009c2e:	2b01      	cmp	r3, #1
 8009c30:	d001      	beq.n	8009c36 <f_mount+0x6a>
 8009c32:	2300      	movs	r3, #0
 8009c34:	e00a      	b.n	8009c4c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8009c36:	f107 010c 	add.w	r1, r7, #12
 8009c3a:	f107 0308 	add.w	r3, r7, #8
 8009c3e:	2200      	movs	r2, #0
 8009c40:	4618      	mov	r0, r3
 8009c42:	f7ff fd41 	bl	80096c8 <find_volume>
 8009c46:	4603      	mov	r3, r0
 8009c48:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8009c4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c4c:	4618      	mov	r0, r3
 8009c4e:	3720      	adds	r7, #32
 8009c50:	46bd      	mov	sp, r7
 8009c52:	bd80      	pop	{r7, pc}
 8009c54:	200000b4 	.word	0x200000b4

08009c58 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8009c58:	b580      	push	{r7, lr}
 8009c5a:	b098      	sub	sp, #96	; 0x60
 8009c5c:	af00      	add	r7, sp, #0
 8009c5e:	60f8      	str	r0, [r7, #12]
 8009c60:	60b9      	str	r1, [r7, #8]
 8009c62:	4613      	mov	r3, r2
 8009c64:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d101      	bne.n	8009c70 <f_open+0x18>
 8009c6c:	2309      	movs	r3, #9
 8009c6e:	e1ad      	b.n	8009fcc <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8009c70:	79fb      	ldrb	r3, [r7, #7]
 8009c72:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009c76:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8009c78:	79fa      	ldrb	r2, [r7, #7]
 8009c7a:	f107 0110 	add.w	r1, r7, #16
 8009c7e:	f107 0308 	add.w	r3, r7, #8
 8009c82:	4618      	mov	r0, r3
 8009c84:	f7ff fd20 	bl	80096c8 <find_volume>
 8009c88:	4603      	mov	r3, r0
 8009c8a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8009c8e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	f040 8191 	bne.w	8009fba <f_open+0x362>
		dj.obj.fs = fs;
 8009c98:	693b      	ldr	r3, [r7, #16]
 8009c9a:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8009c9c:	68ba      	ldr	r2, [r7, #8]
 8009c9e:	f107 0314 	add.w	r3, r7, #20
 8009ca2:	4611      	mov	r1, r2
 8009ca4:	4618      	mov	r0, r3
 8009ca6:	f7ff fc03 	bl	80094b0 <follow_path>
 8009caa:	4603      	mov	r3, r0
 8009cac:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8009cb0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d11a      	bne.n	8009cee <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8009cb8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009cbc:	b25b      	sxtb	r3, r3
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	da03      	bge.n	8009cca <f_open+0x72>
				res = FR_INVALID_NAME;
 8009cc2:	2306      	movs	r3, #6
 8009cc4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8009cc8:	e011      	b.n	8009cee <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009cca:	79fb      	ldrb	r3, [r7, #7]
 8009ccc:	f023 0301 	bic.w	r3, r3, #1
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	bf14      	ite	ne
 8009cd4:	2301      	movne	r3, #1
 8009cd6:	2300      	moveq	r3, #0
 8009cd8:	b2db      	uxtb	r3, r3
 8009cda:	461a      	mov	r2, r3
 8009cdc:	f107 0314 	add.w	r3, r7, #20
 8009ce0:	4611      	mov	r1, r2
 8009ce2:	4618      	mov	r0, r3
 8009ce4:	f7fe fbda 	bl	800849c <chk_lock>
 8009ce8:	4603      	mov	r3, r0
 8009cea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8009cee:	79fb      	ldrb	r3, [r7, #7]
 8009cf0:	f003 031c 	and.w	r3, r3, #28
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d07f      	beq.n	8009df8 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8009cf8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d017      	beq.n	8009d30 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8009d00:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009d04:	2b04      	cmp	r3, #4
 8009d06:	d10e      	bne.n	8009d26 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8009d08:	f7fe fc24 	bl	8008554 <enq_lock>
 8009d0c:	4603      	mov	r3, r0
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d006      	beq.n	8009d20 <f_open+0xc8>
 8009d12:	f107 0314 	add.w	r3, r7, #20
 8009d16:	4618      	mov	r0, r3
 8009d18:	f7ff fb03 	bl	8009322 <dir_register>
 8009d1c:	4603      	mov	r3, r0
 8009d1e:	e000      	b.n	8009d22 <f_open+0xca>
 8009d20:	2312      	movs	r3, #18
 8009d22:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8009d26:	79fb      	ldrb	r3, [r7, #7]
 8009d28:	f043 0308 	orr.w	r3, r3, #8
 8009d2c:	71fb      	strb	r3, [r7, #7]
 8009d2e:	e010      	b.n	8009d52 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8009d30:	7ebb      	ldrb	r3, [r7, #26]
 8009d32:	f003 0311 	and.w	r3, r3, #17
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d003      	beq.n	8009d42 <f_open+0xea>
					res = FR_DENIED;
 8009d3a:	2307      	movs	r3, #7
 8009d3c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8009d40:	e007      	b.n	8009d52 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8009d42:	79fb      	ldrb	r3, [r7, #7]
 8009d44:	f003 0304 	and.w	r3, r3, #4
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d002      	beq.n	8009d52 <f_open+0xfa>
 8009d4c:	2308      	movs	r3, #8
 8009d4e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8009d52:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d168      	bne.n	8009e2c <f_open+0x1d4>
 8009d5a:	79fb      	ldrb	r3, [r7, #7]
 8009d5c:	f003 0308 	and.w	r3, r3, #8
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d063      	beq.n	8009e2c <f_open+0x1d4>
				dw = GET_FATTIME();
 8009d64:	f7fb fb02 	bl	800536c <get_fattime>
 8009d68:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8009d6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d6c:	330e      	adds	r3, #14
 8009d6e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009d70:	4618      	mov	r0, r3
 8009d72:	f7fe fae9 	bl	8008348 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8009d76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d78:	3316      	adds	r3, #22
 8009d7a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009d7c:	4618      	mov	r0, r3
 8009d7e:	f7fe fae3 	bl	8008348 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8009d82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d84:	330b      	adds	r3, #11
 8009d86:	2220      	movs	r2, #32
 8009d88:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8009d8a:	693b      	ldr	r3, [r7, #16]
 8009d8c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009d8e:	4611      	mov	r1, r2
 8009d90:	4618      	mov	r0, r3
 8009d92:	f7ff fa32 	bl	80091fa <ld_clust>
 8009d96:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8009d98:	693b      	ldr	r3, [r7, #16]
 8009d9a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009d9c:	2200      	movs	r2, #0
 8009d9e:	4618      	mov	r0, r3
 8009da0:	f7ff fa4a 	bl	8009238 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8009da4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009da6:	331c      	adds	r3, #28
 8009da8:	2100      	movs	r1, #0
 8009daa:	4618      	mov	r0, r3
 8009dac:	f7fe facc 	bl	8008348 <st_dword>
					fs->wflag = 1;
 8009db0:	693b      	ldr	r3, [r7, #16]
 8009db2:	2201      	movs	r2, #1
 8009db4:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8009db6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d037      	beq.n	8009e2c <f_open+0x1d4>
						dw = fs->winsect;
 8009dbc:	693b      	ldr	r3, [r7, #16]
 8009dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dc0:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8009dc2:	f107 0314 	add.w	r3, r7, #20
 8009dc6:	2200      	movs	r2, #0
 8009dc8:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8009dca:	4618      	mov	r0, r3
 8009dcc:	f7fe ff5d 	bl	8008c8a <remove_chain>
 8009dd0:	4603      	mov	r3, r0
 8009dd2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8009dd6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d126      	bne.n	8009e2c <f_open+0x1d4>
							res = move_window(fs, dw);
 8009dde:	693b      	ldr	r3, [r7, #16]
 8009de0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009de2:	4618      	mov	r0, r3
 8009de4:	f7fe fd0a 	bl	80087fc <move_window>
 8009de8:	4603      	mov	r3, r0
 8009dea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8009dee:	693b      	ldr	r3, [r7, #16]
 8009df0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009df2:	3a01      	subs	r2, #1
 8009df4:	60da      	str	r2, [r3, #12]
 8009df6:	e019      	b.n	8009e2c <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8009df8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d115      	bne.n	8009e2c <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8009e00:	7ebb      	ldrb	r3, [r7, #26]
 8009e02:	f003 0310 	and.w	r3, r3, #16
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d003      	beq.n	8009e12 <f_open+0x1ba>
					res = FR_NO_FILE;
 8009e0a:	2304      	movs	r3, #4
 8009e0c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8009e10:	e00c      	b.n	8009e2c <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8009e12:	79fb      	ldrb	r3, [r7, #7]
 8009e14:	f003 0302 	and.w	r3, r3, #2
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d007      	beq.n	8009e2c <f_open+0x1d4>
 8009e1c:	7ebb      	ldrb	r3, [r7, #26]
 8009e1e:	f003 0301 	and.w	r3, r3, #1
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d002      	beq.n	8009e2c <f_open+0x1d4>
						res = FR_DENIED;
 8009e26:	2307      	movs	r3, #7
 8009e28:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8009e2c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d128      	bne.n	8009e86 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8009e34:	79fb      	ldrb	r3, [r7, #7]
 8009e36:	f003 0308 	and.w	r3, r3, #8
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d003      	beq.n	8009e46 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8009e3e:	79fb      	ldrb	r3, [r7, #7]
 8009e40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009e44:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8009e46:	693b      	ldr	r3, [r7, #16]
 8009e48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8009e4e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009e54:	79fb      	ldrb	r3, [r7, #7]
 8009e56:	f023 0301 	bic.w	r3, r3, #1
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	bf14      	ite	ne
 8009e5e:	2301      	movne	r3, #1
 8009e60:	2300      	moveq	r3, #0
 8009e62:	b2db      	uxtb	r3, r3
 8009e64:	461a      	mov	r2, r3
 8009e66:	f107 0314 	add.w	r3, r7, #20
 8009e6a:	4611      	mov	r1, r2
 8009e6c:	4618      	mov	r0, r3
 8009e6e:	f7fe fb93 	bl	8008598 <inc_lock>
 8009e72:	4602      	mov	r2, r0
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	691b      	ldr	r3, [r3, #16]
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d102      	bne.n	8009e86 <f_open+0x22e>
 8009e80:	2302      	movs	r3, #2
 8009e82:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8009e86:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	f040 8095 	bne.w	8009fba <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8009e90:	693b      	ldr	r3, [r7, #16]
 8009e92:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009e94:	4611      	mov	r1, r2
 8009e96:	4618      	mov	r0, r3
 8009e98:	f7ff f9af 	bl	80091fa <ld_clust>
 8009e9c:	4602      	mov	r2, r0
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8009ea2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ea4:	331c      	adds	r3, #28
 8009ea6:	4618      	mov	r0, r3
 8009ea8:	f7fe fa10 	bl	80082cc <ld_dword>
 8009eac:	4602      	mov	r2, r0
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	2200      	movs	r2, #0
 8009eb6:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8009eb8:	693a      	ldr	r2, [r7, #16]
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8009ebe:	693b      	ldr	r3, [r7, #16]
 8009ec0:	88da      	ldrh	r2, [r3, #6]
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	79fa      	ldrb	r2, [r7, #7]
 8009eca:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	2200      	movs	r2, #0
 8009ed0:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	2200      	movs	r2, #0
 8009ed6:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	2200      	movs	r2, #0
 8009edc:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	3330      	adds	r3, #48	; 0x30
 8009ee2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009ee6:	2100      	movs	r1, #0
 8009ee8:	4618      	mov	r0, r3
 8009eea:	f7fe fa7a 	bl	80083e2 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8009eee:	79fb      	ldrb	r3, [r7, #7]
 8009ef0:	f003 0320 	and.w	r3, r3, #32
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d060      	beq.n	8009fba <f_open+0x362>
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	68db      	ldr	r3, [r3, #12]
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d05c      	beq.n	8009fba <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	68da      	ldr	r2, [r3, #12]
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8009f08:	693b      	ldr	r3, [r7, #16]
 8009f0a:	895b      	ldrh	r3, [r3, #10]
 8009f0c:	025b      	lsls	r3, r3, #9
 8009f0e:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	689b      	ldr	r3, [r3, #8]
 8009f14:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	68db      	ldr	r3, [r3, #12]
 8009f1a:	657b      	str	r3, [r7, #84]	; 0x54
 8009f1c:	e016      	b.n	8009f4c <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009f22:	4618      	mov	r0, r3
 8009f24:	f7fe fd25 	bl	8008972 <get_fat>
 8009f28:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8009f2a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009f2c:	2b01      	cmp	r3, #1
 8009f2e:	d802      	bhi.n	8009f36 <f_open+0x2de>
 8009f30:	2302      	movs	r3, #2
 8009f32:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8009f36:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009f38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f3c:	d102      	bne.n	8009f44 <f_open+0x2ec>
 8009f3e:	2301      	movs	r3, #1
 8009f40:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009f44:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009f46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009f48:	1ad3      	subs	r3, r2, r3
 8009f4a:	657b      	str	r3, [r7, #84]	; 0x54
 8009f4c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d103      	bne.n	8009f5c <f_open+0x304>
 8009f54:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009f56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009f58:	429a      	cmp	r2, r3
 8009f5a:	d8e0      	bhi.n	8009f1e <f_open+0x2c6>
				}
				fp->clust = clst;
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009f60:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8009f62:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d127      	bne.n	8009fba <f_open+0x362>
 8009f6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009f6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d022      	beq.n	8009fba <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8009f74:	693b      	ldr	r3, [r7, #16]
 8009f76:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009f78:	4618      	mov	r0, r3
 8009f7a:	f7fe fcdb 	bl	8008934 <clust2sect>
 8009f7e:	6478      	str	r0, [r7, #68]	; 0x44
 8009f80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d103      	bne.n	8009f8e <f_open+0x336>
						res = FR_INT_ERR;
 8009f86:	2302      	movs	r3, #2
 8009f88:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8009f8c:	e015      	b.n	8009fba <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8009f8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009f90:	0a5a      	lsrs	r2, r3, #9
 8009f92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009f94:	441a      	add	r2, r3
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8009f9a:	693b      	ldr	r3, [r7, #16]
 8009f9c:	7858      	ldrb	r0, [r3, #1]
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	6a1a      	ldr	r2, [r3, #32]
 8009fa8:	2301      	movs	r3, #1
 8009faa:	f7fe f919 	bl	80081e0 <disk_read>
 8009fae:	4603      	mov	r3, r0
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d002      	beq.n	8009fba <f_open+0x362>
 8009fb4:	2301      	movs	r3, #1
 8009fb6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8009fba:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d002      	beq.n	8009fc8 <f_open+0x370>
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	2200      	movs	r2, #0
 8009fc6:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8009fc8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8009fcc:	4618      	mov	r0, r3
 8009fce:	3760      	adds	r7, #96	; 0x60
 8009fd0:	46bd      	mov	sp, r7
 8009fd2:	bd80      	pop	{r7, pc}

08009fd4 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8009fd4:	b580      	push	{r7, lr}
 8009fd6:	b08c      	sub	sp, #48	; 0x30
 8009fd8:	af00      	add	r7, sp, #0
 8009fda:	60f8      	str	r0, [r7, #12]
 8009fdc:	60b9      	str	r1, [r7, #8]
 8009fde:	607a      	str	r2, [r7, #4]
 8009fe0:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8009fe2:	68bb      	ldr	r3, [r7, #8]
 8009fe4:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8009fe6:	683b      	ldr	r3, [r7, #0]
 8009fe8:	2200      	movs	r2, #0
 8009fea:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	f107 0210 	add.w	r2, r7, #16
 8009ff2:	4611      	mov	r1, r2
 8009ff4:	4618      	mov	r0, r3
 8009ff6:	f7ff fdb3 	bl	8009b60 <validate>
 8009ffa:	4603      	mov	r3, r0
 8009ffc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800a000:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a004:	2b00      	cmp	r3, #0
 800a006:	d107      	bne.n	800a018 <f_write+0x44>
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	7d5b      	ldrb	r3, [r3, #21]
 800a00c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800a010:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a014:	2b00      	cmp	r3, #0
 800a016:	d002      	beq.n	800a01e <f_write+0x4a>
 800a018:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a01c:	e14b      	b.n	800a2b6 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	7d1b      	ldrb	r3, [r3, #20]
 800a022:	f003 0302 	and.w	r3, r3, #2
 800a026:	2b00      	cmp	r3, #0
 800a028:	d101      	bne.n	800a02e <f_write+0x5a>
 800a02a:	2307      	movs	r3, #7
 800a02c:	e143      	b.n	800a2b6 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	699a      	ldr	r2, [r3, #24]
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	441a      	add	r2, r3
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	699b      	ldr	r3, [r3, #24]
 800a03a:	429a      	cmp	r2, r3
 800a03c:	f080 812d 	bcs.w	800a29a <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	699b      	ldr	r3, [r3, #24]
 800a044:	43db      	mvns	r3, r3
 800a046:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800a048:	e127      	b.n	800a29a <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	699b      	ldr	r3, [r3, #24]
 800a04e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a052:	2b00      	cmp	r3, #0
 800a054:	f040 80e3 	bne.w	800a21e <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	699b      	ldr	r3, [r3, #24]
 800a05c:	0a5b      	lsrs	r3, r3, #9
 800a05e:	693a      	ldr	r2, [r7, #16]
 800a060:	8952      	ldrh	r2, [r2, #10]
 800a062:	3a01      	subs	r2, #1
 800a064:	4013      	ands	r3, r2
 800a066:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800a068:	69bb      	ldr	r3, [r7, #24]
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d143      	bne.n	800a0f6 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	699b      	ldr	r3, [r3, #24]
 800a072:	2b00      	cmp	r3, #0
 800a074:	d10c      	bne.n	800a090 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	689b      	ldr	r3, [r3, #8]
 800a07a:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800a07c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d11a      	bne.n	800a0b8 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	2100      	movs	r1, #0
 800a086:	4618      	mov	r0, r3
 800a088:	f7fe fe64 	bl	8008d54 <create_chain>
 800a08c:	62b8      	str	r0, [r7, #40]	; 0x28
 800a08e:	e013      	b.n	800a0b8 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a094:	2b00      	cmp	r3, #0
 800a096:	d007      	beq.n	800a0a8 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	699b      	ldr	r3, [r3, #24]
 800a09c:	4619      	mov	r1, r3
 800a09e:	68f8      	ldr	r0, [r7, #12]
 800a0a0:	f7fe fef0 	bl	8008e84 <clmt_clust>
 800a0a4:	62b8      	str	r0, [r7, #40]	; 0x28
 800a0a6:	e007      	b.n	800a0b8 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800a0a8:	68fa      	ldr	r2, [r7, #12]
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	69db      	ldr	r3, [r3, #28]
 800a0ae:	4619      	mov	r1, r3
 800a0b0:	4610      	mov	r0, r2
 800a0b2:	f7fe fe4f 	bl	8008d54 <create_chain>
 800a0b6:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800a0b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	f000 80f2 	beq.w	800a2a4 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800a0c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0c2:	2b01      	cmp	r3, #1
 800a0c4:	d104      	bne.n	800a0d0 <f_write+0xfc>
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	2202      	movs	r2, #2
 800a0ca:	755a      	strb	r2, [r3, #21]
 800a0cc:	2302      	movs	r3, #2
 800a0ce:	e0f2      	b.n	800a2b6 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a0d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0d6:	d104      	bne.n	800a0e2 <f_write+0x10e>
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	2201      	movs	r2, #1
 800a0dc:	755a      	strb	r2, [r3, #21]
 800a0de:	2301      	movs	r3, #1
 800a0e0:	e0e9      	b.n	800a2b6 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a0e6:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	689b      	ldr	r3, [r3, #8]
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d102      	bne.n	800a0f6 <f_write+0x122>
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a0f4:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	7d1b      	ldrb	r3, [r3, #20]
 800a0fa:	b25b      	sxtb	r3, r3
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	da18      	bge.n	800a132 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a100:	693b      	ldr	r3, [r7, #16]
 800a102:	7858      	ldrb	r0, [r3, #1]
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	6a1a      	ldr	r2, [r3, #32]
 800a10e:	2301      	movs	r3, #1
 800a110:	f7fe f886 	bl	8008220 <disk_write>
 800a114:	4603      	mov	r3, r0
 800a116:	2b00      	cmp	r3, #0
 800a118:	d004      	beq.n	800a124 <f_write+0x150>
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	2201      	movs	r2, #1
 800a11e:	755a      	strb	r2, [r3, #21]
 800a120:	2301      	movs	r3, #1
 800a122:	e0c8      	b.n	800a2b6 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	7d1b      	ldrb	r3, [r3, #20]
 800a128:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a12c:	b2da      	uxtb	r2, r3
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800a132:	693a      	ldr	r2, [r7, #16]
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	69db      	ldr	r3, [r3, #28]
 800a138:	4619      	mov	r1, r3
 800a13a:	4610      	mov	r0, r2
 800a13c:	f7fe fbfa 	bl	8008934 <clust2sect>
 800a140:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800a142:	697b      	ldr	r3, [r7, #20]
 800a144:	2b00      	cmp	r3, #0
 800a146:	d104      	bne.n	800a152 <f_write+0x17e>
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	2202      	movs	r2, #2
 800a14c:	755a      	strb	r2, [r3, #21]
 800a14e:	2302      	movs	r3, #2
 800a150:	e0b1      	b.n	800a2b6 <f_write+0x2e2>
			sect += csect;
 800a152:	697a      	ldr	r2, [r7, #20]
 800a154:	69bb      	ldr	r3, [r7, #24]
 800a156:	4413      	add	r3, r2
 800a158:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	0a5b      	lsrs	r3, r3, #9
 800a15e:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800a160:	6a3b      	ldr	r3, [r7, #32]
 800a162:	2b00      	cmp	r3, #0
 800a164:	d03c      	beq.n	800a1e0 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800a166:	69ba      	ldr	r2, [r7, #24]
 800a168:	6a3b      	ldr	r3, [r7, #32]
 800a16a:	4413      	add	r3, r2
 800a16c:	693a      	ldr	r2, [r7, #16]
 800a16e:	8952      	ldrh	r2, [r2, #10]
 800a170:	4293      	cmp	r3, r2
 800a172:	d905      	bls.n	800a180 <f_write+0x1ac>
					cc = fs->csize - csect;
 800a174:	693b      	ldr	r3, [r7, #16]
 800a176:	895b      	ldrh	r3, [r3, #10]
 800a178:	461a      	mov	r2, r3
 800a17a:	69bb      	ldr	r3, [r7, #24]
 800a17c:	1ad3      	subs	r3, r2, r3
 800a17e:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a180:	693b      	ldr	r3, [r7, #16]
 800a182:	7858      	ldrb	r0, [r3, #1]
 800a184:	6a3b      	ldr	r3, [r7, #32]
 800a186:	697a      	ldr	r2, [r7, #20]
 800a188:	69f9      	ldr	r1, [r7, #28]
 800a18a:	f7fe f849 	bl	8008220 <disk_write>
 800a18e:	4603      	mov	r3, r0
 800a190:	2b00      	cmp	r3, #0
 800a192:	d004      	beq.n	800a19e <f_write+0x1ca>
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	2201      	movs	r2, #1
 800a198:	755a      	strb	r2, [r3, #21]
 800a19a:	2301      	movs	r3, #1
 800a19c:	e08b      	b.n	800a2b6 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	6a1a      	ldr	r2, [r3, #32]
 800a1a2:	697b      	ldr	r3, [r7, #20]
 800a1a4:	1ad3      	subs	r3, r2, r3
 800a1a6:	6a3a      	ldr	r2, [r7, #32]
 800a1a8:	429a      	cmp	r2, r3
 800a1aa:	d915      	bls.n	800a1d8 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	6a1a      	ldr	r2, [r3, #32]
 800a1b6:	697b      	ldr	r3, [r7, #20]
 800a1b8:	1ad3      	subs	r3, r2, r3
 800a1ba:	025b      	lsls	r3, r3, #9
 800a1bc:	69fa      	ldr	r2, [r7, #28]
 800a1be:	4413      	add	r3, r2
 800a1c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a1c4:	4619      	mov	r1, r3
 800a1c6:	f7fe f8eb 	bl	80083a0 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	7d1b      	ldrb	r3, [r3, #20]
 800a1ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a1d2:	b2da      	uxtb	r2, r3
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800a1d8:	6a3b      	ldr	r3, [r7, #32]
 800a1da:	025b      	lsls	r3, r3, #9
 800a1dc:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800a1de:	e03f      	b.n	800a260 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	6a1b      	ldr	r3, [r3, #32]
 800a1e4:	697a      	ldr	r2, [r7, #20]
 800a1e6:	429a      	cmp	r2, r3
 800a1e8:	d016      	beq.n	800a218 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	699a      	ldr	r2, [r3, #24]
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800a1f2:	429a      	cmp	r2, r3
 800a1f4:	d210      	bcs.n	800a218 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800a1f6:	693b      	ldr	r3, [r7, #16]
 800a1f8:	7858      	ldrb	r0, [r3, #1]
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a200:	2301      	movs	r3, #1
 800a202:	697a      	ldr	r2, [r7, #20]
 800a204:	f7fd ffec 	bl	80081e0 <disk_read>
 800a208:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d004      	beq.n	800a218 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	2201      	movs	r2, #1
 800a212:	755a      	strb	r2, [r3, #21]
 800a214:	2301      	movs	r3, #1
 800a216:	e04e      	b.n	800a2b6 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	697a      	ldr	r2, [r7, #20]
 800a21c:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	699b      	ldr	r3, [r3, #24]
 800a222:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a226:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800a22a:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800a22c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	429a      	cmp	r2, r3
 800a232:	d901      	bls.n	800a238 <f_write+0x264>
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	699b      	ldr	r3, [r3, #24]
 800a242:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a246:	4413      	add	r3, r2
 800a248:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a24a:	69f9      	ldr	r1, [r7, #28]
 800a24c:	4618      	mov	r0, r3
 800a24e:	f7fe f8a7 	bl	80083a0 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	7d1b      	ldrb	r3, [r3, #20]
 800a256:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a25a:	b2da      	uxtb	r2, r3
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800a260:	69fa      	ldr	r2, [r7, #28]
 800a262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a264:	4413      	add	r3, r2
 800a266:	61fb      	str	r3, [r7, #28]
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	699a      	ldr	r2, [r3, #24]
 800a26c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a26e:	441a      	add	r2, r3
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	619a      	str	r2, [r3, #24]
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	68da      	ldr	r2, [r3, #12]
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	699b      	ldr	r3, [r3, #24]
 800a27c:	429a      	cmp	r2, r3
 800a27e:	bf38      	it	cc
 800a280:	461a      	movcc	r2, r3
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	60da      	str	r2, [r3, #12]
 800a286:	683b      	ldr	r3, [r7, #0]
 800a288:	681a      	ldr	r2, [r3, #0]
 800a28a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a28c:	441a      	add	r2, r3
 800a28e:	683b      	ldr	r3, [r7, #0]
 800a290:	601a      	str	r2, [r3, #0]
 800a292:	687a      	ldr	r2, [r7, #4]
 800a294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a296:	1ad3      	subs	r3, r2, r3
 800a298:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	f47f aed4 	bne.w	800a04a <f_write+0x76>
 800a2a2:	e000      	b.n	800a2a6 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800a2a4:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	7d1b      	ldrb	r3, [r3, #20]
 800a2aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a2ae:	b2da      	uxtb	r2, r3
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800a2b4:	2300      	movs	r3, #0
}
 800a2b6:	4618      	mov	r0, r3
 800a2b8:	3730      	adds	r7, #48	; 0x30
 800a2ba:	46bd      	mov	sp, r7
 800a2bc:	bd80      	pop	{r7, pc}

0800a2be <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800a2be:	b580      	push	{r7, lr}
 800a2c0:	b086      	sub	sp, #24
 800a2c2:	af00      	add	r7, sp, #0
 800a2c4:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	f107 0208 	add.w	r2, r7, #8
 800a2cc:	4611      	mov	r1, r2
 800a2ce:	4618      	mov	r0, r3
 800a2d0:	f7ff fc46 	bl	8009b60 <validate>
 800a2d4:	4603      	mov	r3, r0
 800a2d6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800a2d8:	7dfb      	ldrb	r3, [r7, #23]
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d168      	bne.n	800a3b0 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	7d1b      	ldrb	r3, [r3, #20]
 800a2e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d062      	beq.n	800a3b0 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	7d1b      	ldrb	r3, [r3, #20]
 800a2ee:	b25b      	sxtb	r3, r3
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	da15      	bge.n	800a320 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800a2f4:	68bb      	ldr	r3, [r7, #8]
 800a2f6:	7858      	ldrb	r0, [r3, #1]
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	6a1a      	ldr	r2, [r3, #32]
 800a302:	2301      	movs	r3, #1
 800a304:	f7fd ff8c 	bl	8008220 <disk_write>
 800a308:	4603      	mov	r3, r0
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d001      	beq.n	800a312 <f_sync+0x54>
 800a30e:	2301      	movs	r3, #1
 800a310:	e04f      	b.n	800a3b2 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	7d1b      	ldrb	r3, [r3, #20]
 800a316:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a31a:	b2da      	uxtb	r2, r3
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800a320:	f7fb f824 	bl	800536c <get_fattime>
 800a324:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800a326:	68ba      	ldr	r2, [r7, #8]
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a32c:	4619      	mov	r1, r3
 800a32e:	4610      	mov	r0, r2
 800a330:	f7fe fa64 	bl	80087fc <move_window>
 800a334:	4603      	mov	r3, r0
 800a336:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800a338:	7dfb      	ldrb	r3, [r7, #23]
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d138      	bne.n	800a3b0 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a342:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	330b      	adds	r3, #11
 800a348:	781a      	ldrb	r2, [r3, #0]
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	330b      	adds	r3, #11
 800a34e:	f042 0220 	orr.w	r2, r2, #32
 800a352:	b2d2      	uxtb	r2, r2
 800a354:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	6818      	ldr	r0, [r3, #0]
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	689b      	ldr	r3, [r3, #8]
 800a35e:	461a      	mov	r2, r3
 800a360:	68f9      	ldr	r1, [r7, #12]
 800a362:	f7fe ff69 	bl	8009238 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	f103 021c 	add.w	r2, r3, #28
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	68db      	ldr	r3, [r3, #12]
 800a370:	4619      	mov	r1, r3
 800a372:	4610      	mov	r0, r2
 800a374:	f7fd ffe8 	bl	8008348 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	3316      	adds	r3, #22
 800a37c:	6939      	ldr	r1, [r7, #16]
 800a37e:	4618      	mov	r0, r3
 800a380:	f7fd ffe2 	bl	8008348 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	3312      	adds	r3, #18
 800a388:	2100      	movs	r1, #0
 800a38a:	4618      	mov	r0, r3
 800a38c:	f7fd ffc1 	bl	8008312 <st_word>
					fs->wflag = 1;
 800a390:	68bb      	ldr	r3, [r7, #8]
 800a392:	2201      	movs	r2, #1
 800a394:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800a396:	68bb      	ldr	r3, [r7, #8]
 800a398:	4618      	mov	r0, r3
 800a39a:	f7fe fa5d 	bl	8008858 <sync_fs>
 800a39e:	4603      	mov	r3, r0
 800a3a0:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	7d1b      	ldrb	r3, [r3, #20]
 800a3a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a3aa:	b2da      	uxtb	r2, r3
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800a3b0:	7dfb      	ldrb	r3, [r7, #23]
}
 800a3b2:	4618      	mov	r0, r3
 800a3b4:	3718      	adds	r7, #24
 800a3b6:	46bd      	mov	sp, r7
 800a3b8:	bd80      	pop	{r7, pc}

0800a3ba <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800a3ba:	b580      	push	{r7, lr}
 800a3bc:	b084      	sub	sp, #16
 800a3be:	af00      	add	r7, sp, #0
 800a3c0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800a3c2:	6878      	ldr	r0, [r7, #4]
 800a3c4:	f7ff ff7b 	bl	800a2be <f_sync>
 800a3c8:	4603      	mov	r3, r0
 800a3ca:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800a3cc:	7bfb      	ldrb	r3, [r7, #15]
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d118      	bne.n	800a404 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	f107 0208 	add.w	r2, r7, #8
 800a3d8:	4611      	mov	r1, r2
 800a3da:	4618      	mov	r0, r3
 800a3dc:	f7ff fbc0 	bl	8009b60 <validate>
 800a3e0:	4603      	mov	r3, r0
 800a3e2:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800a3e4:	7bfb      	ldrb	r3, [r7, #15]
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d10c      	bne.n	800a404 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	691b      	ldr	r3, [r3, #16]
 800a3ee:	4618      	mov	r0, r3
 800a3f0:	f7fe f960 	bl	80086b4 <dec_lock>
 800a3f4:	4603      	mov	r3, r0
 800a3f6:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800a3f8:	7bfb      	ldrb	r3, [r7, #15]
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d102      	bne.n	800a404 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	2200      	movs	r2, #0
 800a402:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800a404:	7bfb      	ldrb	r3, [r7, #15]
}
 800a406:	4618      	mov	r0, r3
 800a408:	3710      	adds	r7, #16
 800a40a:	46bd      	mov	sp, r7
 800a40c:	bd80      	pop	{r7, pc}
	...

0800a410 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800a410:	b480      	push	{r7}
 800a412:	b087      	sub	sp, #28
 800a414:	af00      	add	r7, sp, #0
 800a416:	60f8      	str	r0, [r7, #12]
 800a418:	60b9      	str	r1, [r7, #8]
 800a41a:	4613      	mov	r3, r2
 800a41c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800a41e:	2301      	movs	r3, #1
 800a420:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800a422:	2300      	movs	r3, #0
 800a424:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800a426:	4b1f      	ldr	r3, [pc, #124]	; (800a4a4 <FATFS_LinkDriverEx+0x94>)
 800a428:	7a5b      	ldrb	r3, [r3, #9]
 800a42a:	b2db      	uxtb	r3, r3
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d131      	bne.n	800a494 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800a430:	4b1c      	ldr	r3, [pc, #112]	; (800a4a4 <FATFS_LinkDriverEx+0x94>)
 800a432:	7a5b      	ldrb	r3, [r3, #9]
 800a434:	b2db      	uxtb	r3, r3
 800a436:	461a      	mov	r2, r3
 800a438:	4b1a      	ldr	r3, [pc, #104]	; (800a4a4 <FATFS_LinkDriverEx+0x94>)
 800a43a:	2100      	movs	r1, #0
 800a43c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800a43e:	4b19      	ldr	r3, [pc, #100]	; (800a4a4 <FATFS_LinkDriverEx+0x94>)
 800a440:	7a5b      	ldrb	r3, [r3, #9]
 800a442:	b2db      	uxtb	r3, r3
 800a444:	4a17      	ldr	r2, [pc, #92]	; (800a4a4 <FATFS_LinkDriverEx+0x94>)
 800a446:	009b      	lsls	r3, r3, #2
 800a448:	4413      	add	r3, r2
 800a44a:	68fa      	ldr	r2, [r7, #12]
 800a44c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800a44e:	4b15      	ldr	r3, [pc, #84]	; (800a4a4 <FATFS_LinkDriverEx+0x94>)
 800a450:	7a5b      	ldrb	r3, [r3, #9]
 800a452:	b2db      	uxtb	r3, r3
 800a454:	461a      	mov	r2, r3
 800a456:	4b13      	ldr	r3, [pc, #76]	; (800a4a4 <FATFS_LinkDriverEx+0x94>)
 800a458:	4413      	add	r3, r2
 800a45a:	79fa      	ldrb	r2, [r7, #7]
 800a45c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800a45e:	4b11      	ldr	r3, [pc, #68]	; (800a4a4 <FATFS_LinkDriverEx+0x94>)
 800a460:	7a5b      	ldrb	r3, [r3, #9]
 800a462:	b2db      	uxtb	r3, r3
 800a464:	1c5a      	adds	r2, r3, #1
 800a466:	b2d1      	uxtb	r1, r2
 800a468:	4a0e      	ldr	r2, [pc, #56]	; (800a4a4 <FATFS_LinkDriverEx+0x94>)
 800a46a:	7251      	strb	r1, [r2, #9]
 800a46c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800a46e:	7dbb      	ldrb	r3, [r7, #22]
 800a470:	3330      	adds	r3, #48	; 0x30
 800a472:	b2da      	uxtb	r2, r3
 800a474:	68bb      	ldr	r3, [r7, #8]
 800a476:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800a478:	68bb      	ldr	r3, [r7, #8]
 800a47a:	3301      	adds	r3, #1
 800a47c:	223a      	movs	r2, #58	; 0x3a
 800a47e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800a480:	68bb      	ldr	r3, [r7, #8]
 800a482:	3302      	adds	r3, #2
 800a484:	222f      	movs	r2, #47	; 0x2f
 800a486:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800a488:	68bb      	ldr	r3, [r7, #8]
 800a48a:	3303      	adds	r3, #3
 800a48c:	2200      	movs	r2, #0
 800a48e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800a490:	2300      	movs	r3, #0
 800a492:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800a494:	7dfb      	ldrb	r3, [r7, #23]
}
 800a496:	4618      	mov	r0, r3
 800a498:	371c      	adds	r7, #28
 800a49a:	46bd      	mov	sp, r7
 800a49c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4a0:	4770      	bx	lr
 800a4a2:	bf00      	nop
 800a4a4:	200000dc 	.word	0x200000dc

0800a4a8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800a4a8:	b580      	push	{r7, lr}
 800a4aa:	b082      	sub	sp, #8
 800a4ac:	af00      	add	r7, sp, #0
 800a4ae:	6078      	str	r0, [r7, #4]
 800a4b0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800a4b2:	2200      	movs	r2, #0
 800a4b4:	6839      	ldr	r1, [r7, #0]
 800a4b6:	6878      	ldr	r0, [r7, #4]
 800a4b8:	f7ff ffaa 	bl	800a410 <FATFS_LinkDriverEx>
 800a4bc:	4603      	mov	r3, r0
}
 800a4be:	4618      	mov	r0, r3
 800a4c0:	3708      	adds	r7, #8
 800a4c2:	46bd      	mov	sp, r7
 800a4c4:	bd80      	pop	{r7, pc}
	...

0800a4c8 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800a4c8:	b580      	push	{r7, lr}
 800a4ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */
  
  /* USER CODE END USB_HOST_Init_PreTreatment */
  
  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800a4cc:	2201      	movs	r2, #1
 800a4ce:	490e      	ldr	r1, [pc, #56]	; (800a508 <MX_USB_HOST_Init+0x40>)
 800a4d0:	480e      	ldr	r0, [pc, #56]	; (800a50c <MX_USB_HOST_Init+0x44>)
 800a4d2:	f7fc fc07 	bl	8006ce4 <USBH_Init>
 800a4d6:	4603      	mov	r3, r0
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d001      	beq.n	800a4e0 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800a4dc:	f7f6 fa32 	bl	8000944 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_MSC_CLASS) != USBH_OK)
 800a4e0:	490b      	ldr	r1, [pc, #44]	; (800a510 <MX_USB_HOST_Init+0x48>)
 800a4e2:	480a      	ldr	r0, [pc, #40]	; (800a50c <MX_USB_HOST_Init+0x44>)
 800a4e4:	f7fc fc71 	bl	8006dca <USBH_RegisterClass>
 800a4e8:	4603      	mov	r3, r0
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d001      	beq.n	800a4f2 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800a4ee:	f7f6 fa29 	bl	8000944 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800a4f2:	4806      	ldr	r0, [pc, #24]	; (800a50c <MX_USB_HOST_Init+0x44>)
 800a4f4:	f7fc fcf6 	bl	8006ee4 <USBH_Start>
 800a4f8:	4603      	mov	r3, r0
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d001      	beq.n	800a502 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800a4fe:	f7f6 fa21 	bl	8000944 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */
  
  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800a502:	bf00      	nop
 800a504:	bd80      	pop	{r7, pc}
 800a506:	bf00      	nop
 800a508:	0800a529 	.word	0x0800a529
 800a50c:	20000654 	.word	0x20000654
 800a510:	2000000c 	.word	0x2000000c

0800a514 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800a514:	b580      	push	{r7, lr}
 800a516:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800a518:	4802      	ldr	r0, [pc, #8]	; (800a524 <MX_USB_HOST_Process+0x10>)
 800a51a:	f7fc fcf3 	bl	8006f04 <USBH_Process>
}
 800a51e:	bf00      	nop
 800a520:	bd80      	pop	{r7, pc}
 800a522:	bf00      	nop
 800a524:	20000654 	.word	0x20000654

0800a528 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800a528:	b480      	push	{r7}
 800a52a:	b083      	sub	sp, #12
 800a52c:	af00      	add	r7, sp, #0
 800a52e:	6078      	str	r0, [r7, #4]
 800a530:	460b      	mov	r3, r1
 800a532:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800a534:	78fb      	ldrb	r3, [r7, #3]
 800a536:	3b01      	subs	r3, #1
 800a538:	2b04      	cmp	r3, #4
 800a53a:	d819      	bhi.n	800a570 <USBH_UserProcess+0x48>
 800a53c:	a201      	add	r2, pc, #4	; (adr r2, 800a544 <USBH_UserProcess+0x1c>)
 800a53e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a542:	bf00      	nop
 800a544:	0800a571 	.word	0x0800a571
 800a548:	0800a561 	.word	0x0800a561
 800a54c:	0800a571 	.word	0x0800a571
 800a550:	0800a569 	.word	0x0800a569
 800a554:	0800a559 	.word	0x0800a559
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800a558:	4b09      	ldr	r3, [pc, #36]	; (800a580 <USBH_UserProcess+0x58>)
 800a55a:	2203      	movs	r2, #3
 800a55c:	701a      	strb	r2, [r3, #0]
  break;
 800a55e:	e008      	b.n	800a572 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800a560:	4b07      	ldr	r3, [pc, #28]	; (800a580 <USBH_UserProcess+0x58>)
 800a562:	2202      	movs	r2, #2
 800a564:	701a      	strb	r2, [r3, #0]
  break;
 800a566:	e004      	b.n	800a572 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800a568:	4b05      	ldr	r3, [pc, #20]	; (800a580 <USBH_UserProcess+0x58>)
 800a56a:	2201      	movs	r2, #1
 800a56c:	701a      	strb	r2, [r3, #0]
  break;
 800a56e:	e000      	b.n	800a572 <USBH_UserProcess+0x4a>

  default:
  break;
 800a570:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800a572:	bf00      	nop
 800a574:	370c      	adds	r7, #12
 800a576:	46bd      	mov	sp, r7
 800a578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a57c:	4770      	bx	lr
 800a57e:	bf00      	nop
 800a580:	200000e8 	.word	0x200000e8

0800a584 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800a584:	b580      	push	{r7, lr}
 800a586:	b08a      	sub	sp, #40	; 0x28
 800a588:	af00      	add	r7, sp, #0
 800a58a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a58c:	f107 0314 	add.w	r3, r7, #20
 800a590:	2200      	movs	r2, #0
 800a592:	601a      	str	r2, [r3, #0]
 800a594:	605a      	str	r2, [r3, #4]
 800a596:	609a      	str	r2, [r3, #8]
 800a598:	60da      	str	r2, [r3, #12]
 800a59a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a5a4:	d147      	bne.n	800a636 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a5a6:	2300      	movs	r3, #0
 800a5a8:	613b      	str	r3, [r7, #16]
 800a5aa:	4b25      	ldr	r3, [pc, #148]	; (800a640 <HAL_HCD_MspInit+0xbc>)
 800a5ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5ae:	4a24      	ldr	r2, [pc, #144]	; (800a640 <HAL_HCD_MspInit+0xbc>)
 800a5b0:	f043 0301 	orr.w	r3, r3, #1
 800a5b4:	6313      	str	r3, [r2, #48]	; 0x30
 800a5b6:	4b22      	ldr	r3, [pc, #136]	; (800a640 <HAL_HCD_MspInit+0xbc>)
 800a5b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5ba:	f003 0301 	and.w	r3, r3, #1
 800a5be:	613b      	str	r3, [r7, #16]
 800a5c0:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800a5c2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a5c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a5c8:	2300      	movs	r3, #0
 800a5ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a5cc:	2300      	movs	r3, #0
 800a5ce:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800a5d0:	f107 0314 	add.w	r3, r7, #20
 800a5d4:	4619      	mov	r1, r3
 800a5d6:	481b      	ldr	r0, [pc, #108]	; (800a644 <HAL_HCD_MspInit+0xc0>)
 800a5d8:	f7f6 fd26 	bl	8001028 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800a5dc:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800a5e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a5e2:	2302      	movs	r3, #2
 800a5e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a5e6:	2300      	movs	r3, #0
 800a5e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a5ea:	2300      	movs	r3, #0
 800a5ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a5ee:	230a      	movs	r3, #10
 800a5f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a5f2:	f107 0314 	add.w	r3, r7, #20
 800a5f6:	4619      	mov	r1, r3
 800a5f8:	4812      	ldr	r0, [pc, #72]	; (800a644 <HAL_HCD_MspInit+0xc0>)
 800a5fa:	f7f6 fd15 	bl	8001028 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a5fe:	4b10      	ldr	r3, [pc, #64]	; (800a640 <HAL_HCD_MspInit+0xbc>)
 800a600:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a602:	4a0f      	ldr	r2, [pc, #60]	; (800a640 <HAL_HCD_MspInit+0xbc>)
 800a604:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a608:	6353      	str	r3, [r2, #52]	; 0x34
 800a60a:	2300      	movs	r3, #0
 800a60c:	60fb      	str	r3, [r7, #12]
 800a60e:	4b0c      	ldr	r3, [pc, #48]	; (800a640 <HAL_HCD_MspInit+0xbc>)
 800a610:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a612:	4a0b      	ldr	r2, [pc, #44]	; (800a640 <HAL_HCD_MspInit+0xbc>)
 800a614:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a618:	6453      	str	r3, [r2, #68]	; 0x44
 800a61a:	4b09      	ldr	r3, [pc, #36]	; (800a640 <HAL_HCD_MspInit+0xbc>)
 800a61c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a61e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a622:	60fb      	str	r3, [r7, #12]
 800a624:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800a626:	2200      	movs	r2, #0
 800a628:	2100      	movs	r1, #0
 800a62a:	2043      	movs	r0, #67	; 0x43
 800a62c:	f7f6 fcc5 	bl	8000fba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a630:	2043      	movs	r0, #67	; 0x43
 800a632:	f7f6 fcde 	bl	8000ff2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a636:	bf00      	nop
 800a638:	3728      	adds	r7, #40	; 0x28
 800a63a:	46bd      	mov	sp, r7
 800a63c:	bd80      	pop	{r7, pc}
 800a63e:	bf00      	nop
 800a640:	40023800 	.word	0x40023800
 800a644:	40020000 	.word	0x40020000

0800a648 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800a648:	b580      	push	{r7, lr}
 800a64a:	b082      	sub	sp, #8
 800a64c:	af00      	add	r7, sp, #0
 800a64e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a656:	4618      	mov	r0, r3
 800a658:	f7fc ff05 	bl	8007466 <USBH_LL_IncTimer>
}
 800a65c:	bf00      	nop
 800a65e:	3708      	adds	r7, #8
 800a660:	46bd      	mov	sp, r7
 800a662:	bd80      	pop	{r7, pc}

0800a664 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800a664:	b580      	push	{r7, lr}
 800a666:	b082      	sub	sp, #8
 800a668:	af00      	add	r7, sp, #0
 800a66a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a672:	4618      	mov	r0, r3
 800a674:	f7fc ff4a 	bl	800750c <USBH_LL_Connect>
}
 800a678:	bf00      	nop
 800a67a:	3708      	adds	r7, #8
 800a67c:	46bd      	mov	sp, r7
 800a67e:	bd80      	pop	{r7, pc}

0800a680 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800a680:	b580      	push	{r7, lr}
 800a682:	b082      	sub	sp, #8
 800a684:	af00      	add	r7, sp, #0
 800a686:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a68e:	4618      	mov	r0, r3
 800a690:	f7fc ff62 	bl	8007558 <USBH_LL_Disconnect>
}
 800a694:	bf00      	nop
 800a696:	3708      	adds	r7, #8
 800a698:	46bd      	mov	sp, r7
 800a69a:	bd80      	pop	{r7, pc}

0800a69c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800a69c:	b480      	push	{r7}
 800a69e:	b083      	sub	sp, #12
 800a6a0:	af00      	add	r7, sp, #0
 800a6a2:	6078      	str	r0, [r7, #4]
 800a6a4:	460b      	mov	r3, r1
 800a6a6:	70fb      	strb	r3, [r7, #3]
 800a6a8:	4613      	mov	r3, r2
 800a6aa:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800a6ac:	bf00      	nop
 800a6ae:	370c      	adds	r7, #12
 800a6b0:	46bd      	mov	sp, r7
 800a6b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6b6:	4770      	bx	lr

0800a6b8 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800a6b8:	b580      	push	{r7, lr}
 800a6ba:	b082      	sub	sp, #8
 800a6bc:	af00      	add	r7, sp, #0
 800a6be:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a6c6:	4618      	mov	r0, r3
 800a6c8:	f7fc fef7 	bl	80074ba <USBH_LL_PortEnabled>
} 
 800a6cc:	bf00      	nop
 800a6ce:	3708      	adds	r7, #8
 800a6d0:	46bd      	mov	sp, r7
 800a6d2:	bd80      	pop	{r7, pc}

0800a6d4 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800a6d4:	b580      	push	{r7, lr}
 800a6d6:	b082      	sub	sp, #8
 800a6d8:	af00      	add	r7, sp, #0
 800a6da:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a6e2:	4618      	mov	r0, r3
 800a6e4:	f7fc fef7 	bl	80074d6 <USBH_LL_PortDisabled>
} 
 800a6e8:	bf00      	nop
 800a6ea:	3708      	adds	r7, #8
 800a6ec:	46bd      	mov	sp, r7
 800a6ee:	bd80      	pop	{r7, pc}

0800a6f0 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800a6f0:	b580      	push	{r7, lr}
 800a6f2:	b082      	sub	sp, #8
 800a6f4:	af00      	add	r7, sp, #0
 800a6f6:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	f893 33c0 	ldrb.w	r3, [r3, #960]	; 0x3c0
 800a6fe:	2b01      	cmp	r3, #1
 800a700:	d12a      	bne.n	800a758 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800a702:	4a18      	ldr	r2, [pc, #96]	; (800a764 <USBH_LL_Init+0x74>)
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	4a15      	ldr	r2, [pc, #84]	; (800a764 <USBH_LL_Init+0x74>)
 800a70e:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a712:	4b14      	ldr	r3, [pc, #80]	; (800a764 <USBH_LL_Init+0x74>)
 800a714:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800a718:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800a71a:	4b12      	ldr	r3, [pc, #72]	; (800a764 <USBH_LL_Init+0x74>)
 800a71c:	2208      	movs	r2, #8
 800a71e:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800a720:	4b10      	ldr	r3, [pc, #64]	; (800a764 <USBH_LL_Init+0x74>)
 800a722:	2201      	movs	r2, #1
 800a724:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a726:	4b0f      	ldr	r3, [pc, #60]	; (800a764 <USBH_LL_Init+0x74>)
 800a728:	2200      	movs	r2, #0
 800a72a:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800a72c:	4b0d      	ldr	r3, [pc, #52]	; (800a764 <USBH_LL_Init+0x74>)
 800a72e:	2202      	movs	r2, #2
 800a730:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a732:	4b0c      	ldr	r3, [pc, #48]	; (800a764 <USBH_LL_Init+0x74>)
 800a734:	2200      	movs	r2, #0
 800a736:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800a738:	480a      	ldr	r0, [pc, #40]	; (800a764 <USBH_LL_Init+0x74>)
 800a73a:	f7f6 fe28 	bl	800138e <HAL_HCD_Init>
 800a73e:	4603      	mov	r3, r0
 800a740:	2b00      	cmp	r3, #0
 800a742:	d001      	beq.n	800a748 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800a744:	f7f6 f8fe 	bl	8000944 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800a748:	4806      	ldr	r0, [pc, #24]	; (800a764 <USBH_LL_Init+0x74>)
 800a74a:	f7f7 fa23 	bl	8001b94 <HAL_HCD_GetCurrentFrame>
 800a74e:	4603      	mov	r3, r0
 800a750:	4619      	mov	r1, r3
 800a752:	6878      	ldr	r0, [r7, #4]
 800a754:	f7fc fe78 	bl	8007448 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800a758:	2300      	movs	r3, #0
}
 800a75a:	4618      	mov	r0, r3
 800a75c:	3708      	adds	r7, #8
 800a75e:	46bd      	mov	sp, r7
 800a760:	bd80      	pop	{r7, pc}
 800a762:	bf00      	nop
 800a764:	20000a20 	.word	0x20000a20

0800a768 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800a768:	b580      	push	{r7, lr}
 800a76a:	b084      	sub	sp, #16
 800a76c:	af00      	add	r7, sp, #0
 800a76e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a770:	2300      	movs	r3, #0
 800a772:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a774:	2300      	movs	r3, #0
 800a776:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a77e:	4618      	mov	r0, r3
 800a780:	f7f7 f990 	bl	8001aa4 <HAL_HCD_Start>
 800a784:	4603      	mov	r3, r0
 800a786:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a788:	7bfb      	ldrb	r3, [r7, #15]
 800a78a:	4618      	mov	r0, r3
 800a78c:	f000 f990 	bl	800aab0 <USBH_Get_USB_Status>
 800a790:	4603      	mov	r3, r0
 800a792:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800a794:	7bbb      	ldrb	r3, [r7, #14]
}
 800a796:	4618      	mov	r0, r3
 800a798:	3710      	adds	r7, #16
 800a79a:	46bd      	mov	sp, r7
 800a79c:	bd80      	pop	{r7, pc}

0800a79e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800a79e:	b580      	push	{r7, lr}
 800a7a0:	b084      	sub	sp, #16
 800a7a2:	af00      	add	r7, sp, #0
 800a7a4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a7a6:	2300      	movs	r3, #0
 800a7a8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a7aa:	2300      	movs	r3, #0
 800a7ac:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a7b4:	4618      	mov	r0, r3
 800a7b6:	f7f7 f998 	bl	8001aea <HAL_HCD_Stop>
 800a7ba:	4603      	mov	r3, r0
 800a7bc:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a7be:	7bfb      	ldrb	r3, [r7, #15]
 800a7c0:	4618      	mov	r0, r3
 800a7c2:	f000 f975 	bl	800aab0 <USBH_Get_USB_Status>
 800a7c6:	4603      	mov	r3, r0
 800a7c8:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 800a7ca:	7bbb      	ldrb	r3, [r7, #14]
}
 800a7cc:	4618      	mov	r0, r3
 800a7ce:	3710      	adds	r7, #16
 800a7d0:	46bd      	mov	sp, r7
 800a7d2:	bd80      	pop	{r7, pc}

0800a7d4 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800a7d4:	b580      	push	{r7, lr}
 800a7d6:	b084      	sub	sp, #16
 800a7d8:	af00      	add	r7, sp, #0
 800a7da:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800a7dc:	2301      	movs	r3, #1
 800a7de:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a7e6:	4618      	mov	r0, r3
 800a7e8:	f7f7 f9e2 	bl	8001bb0 <HAL_HCD_GetCurrentSpeed>
 800a7ec:	4603      	mov	r3, r0
 800a7ee:	2b01      	cmp	r3, #1
 800a7f0:	d007      	beq.n	800a802 <USBH_LL_GetSpeed+0x2e>
 800a7f2:	2b01      	cmp	r3, #1
 800a7f4:	d302      	bcc.n	800a7fc <USBH_LL_GetSpeed+0x28>
 800a7f6:	2b02      	cmp	r3, #2
 800a7f8:	d006      	beq.n	800a808 <USBH_LL_GetSpeed+0x34>
 800a7fa:	e008      	b.n	800a80e <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800a7fc:	2300      	movs	r3, #0
 800a7fe:	73fb      	strb	r3, [r7, #15]
    break;
 800a800:	e008      	b.n	800a814 <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 800a802:	2301      	movs	r3, #1
 800a804:	73fb      	strb	r3, [r7, #15]
    break;
 800a806:	e005      	b.n	800a814 <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 800a808:	2302      	movs	r3, #2
 800a80a:	73fb      	strb	r3, [r7, #15]
    break;
 800a80c:	e002      	b.n	800a814 <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 800a80e:	2301      	movs	r3, #1
 800a810:	73fb      	strb	r3, [r7, #15]
    break;
 800a812:	bf00      	nop
  }
  return  speed;
 800a814:	7bfb      	ldrb	r3, [r7, #15]
}
 800a816:	4618      	mov	r0, r3
 800a818:	3710      	adds	r7, #16
 800a81a:	46bd      	mov	sp, r7
 800a81c:	bd80      	pop	{r7, pc}

0800a81e <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800a81e:	b580      	push	{r7, lr}
 800a820:	b084      	sub	sp, #16
 800a822:	af00      	add	r7, sp, #0
 800a824:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a826:	2300      	movs	r3, #0
 800a828:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a82a:	2300      	movs	r3, #0
 800a82c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a834:	4618      	mov	r0, r3
 800a836:	f7f7 f975 	bl	8001b24 <HAL_HCD_ResetPort>
 800a83a:	4603      	mov	r3, r0
 800a83c:	73fb      	strb	r3, [r7, #15]
  
  usb_status = USBH_Get_USB_Status(hal_status);
 800a83e:	7bfb      	ldrb	r3, [r7, #15]
 800a840:	4618      	mov	r0, r3
 800a842:	f000 f935 	bl	800aab0 <USBH_Get_USB_Status>
 800a846:	4603      	mov	r3, r0
 800a848:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800a84a:	7bbb      	ldrb	r3, [r7, #14]
}
 800a84c:	4618      	mov	r0, r3
 800a84e:	3710      	adds	r7, #16
 800a850:	46bd      	mov	sp, r7
 800a852:	bd80      	pop	{r7, pc}

0800a854 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a854:	b580      	push	{r7, lr}
 800a856:	b082      	sub	sp, #8
 800a858:	af00      	add	r7, sp, #0
 800a85a:	6078      	str	r0, [r7, #4]
 800a85c:	460b      	mov	r3, r1
 800a85e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a866:	78fa      	ldrb	r2, [r7, #3]
 800a868:	4611      	mov	r1, r2
 800a86a:	4618      	mov	r0, r3
 800a86c:	f7f7 f97d 	bl	8001b6a <HAL_HCD_HC_GetXferCount>
 800a870:	4603      	mov	r3, r0
}
 800a872:	4618      	mov	r0, r3
 800a874:	3708      	adds	r7, #8
 800a876:	46bd      	mov	sp, r7
 800a878:	bd80      	pop	{r7, pc}

0800a87a <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800a87a:	b590      	push	{r4, r7, lr}
 800a87c:	b089      	sub	sp, #36	; 0x24
 800a87e:	af04      	add	r7, sp, #16
 800a880:	6078      	str	r0, [r7, #4]
 800a882:	4608      	mov	r0, r1
 800a884:	4611      	mov	r1, r2
 800a886:	461a      	mov	r2, r3
 800a888:	4603      	mov	r3, r0
 800a88a:	70fb      	strb	r3, [r7, #3]
 800a88c:	460b      	mov	r3, r1
 800a88e:	70bb      	strb	r3, [r7, #2]
 800a890:	4613      	mov	r3, r2
 800a892:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a894:	2300      	movs	r3, #0
 800a896:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a898:	2300      	movs	r3, #0
 800a89a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	f8d3 03c4 	ldr.w	r0, [r3, #964]	; 0x3c4
 800a8a2:	787c      	ldrb	r4, [r7, #1]
 800a8a4:	78ba      	ldrb	r2, [r7, #2]
 800a8a6:	78f9      	ldrb	r1, [r7, #3]
 800a8a8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a8aa:	9302      	str	r3, [sp, #8]
 800a8ac:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800a8b0:	9301      	str	r3, [sp, #4]
 800a8b2:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a8b6:	9300      	str	r3, [sp, #0]
 800a8b8:	4623      	mov	r3, r4
 800a8ba:	f7f6 fdca 	bl	8001452 <HAL_HCD_HC_Init>
 800a8be:	4603      	mov	r3, r0
 800a8c0:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800a8c2:	7bfb      	ldrb	r3, [r7, #15]
 800a8c4:	4618      	mov	r0, r3
 800a8c6:	f000 f8f3 	bl	800aab0 <USBH_Get_USB_Status>
 800a8ca:	4603      	mov	r3, r0
 800a8cc:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800a8ce:	7bbb      	ldrb	r3, [r7, #14]
}
 800a8d0:	4618      	mov	r0, r3
 800a8d2:	3714      	adds	r7, #20
 800a8d4:	46bd      	mov	sp, r7
 800a8d6:	bd90      	pop	{r4, r7, pc}

0800a8d8 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a8d8:	b580      	push	{r7, lr}
 800a8da:	b084      	sub	sp, #16
 800a8dc:	af00      	add	r7, sp, #0
 800a8de:	6078      	str	r0, [r7, #4]
 800a8e0:	460b      	mov	r3, r1
 800a8e2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a8e4:	2300      	movs	r3, #0
 800a8e6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a8e8:	2300      	movs	r3, #0
 800a8ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a8f2:	78fa      	ldrb	r2, [r7, #3]
 800a8f4:	4611      	mov	r1, r2
 800a8f6:	4618      	mov	r0, r3
 800a8f8:	f7f6 fe43 	bl	8001582 <HAL_HCD_HC_Halt>
 800a8fc:	4603      	mov	r3, r0
 800a8fe:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a900:	7bfb      	ldrb	r3, [r7, #15]
 800a902:	4618      	mov	r0, r3
 800a904:	f000 f8d4 	bl	800aab0 <USBH_Get_USB_Status>
 800a908:	4603      	mov	r3, r0
 800a90a:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800a90c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a90e:	4618      	mov	r0, r3
 800a910:	3710      	adds	r7, #16
 800a912:	46bd      	mov	sp, r7
 800a914:	bd80      	pop	{r7, pc}

0800a916 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800a916:	b590      	push	{r4, r7, lr}
 800a918:	b089      	sub	sp, #36	; 0x24
 800a91a:	af04      	add	r7, sp, #16
 800a91c:	6078      	str	r0, [r7, #4]
 800a91e:	4608      	mov	r0, r1
 800a920:	4611      	mov	r1, r2
 800a922:	461a      	mov	r2, r3
 800a924:	4603      	mov	r3, r0
 800a926:	70fb      	strb	r3, [r7, #3]
 800a928:	460b      	mov	r3, r1
 800a92a:	70bb      	strb	r3, [r7, #2]
 800a92c:	4613      	mov	r3, r2
 800a92e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a930:	2300      	movs	r3, #0
 800a932:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a934:	2300      	movs	r3, #0
 800a936:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	f8d3 03c4 	ldr.w	r0, [r3, #964]	; 0x3c4
 800a93e:	787c      	ldrb	r4, [r7, #1]
 800a940:	78ba      	ldrb	r2, [r7, #2]
 800a942:	78f9      	ldrb	r1, [r7, #3]
 800a944:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800a948:	9303      	str	r3, [sp, #12]
 800a94a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a94c:	9302      	str	r3, [sp, #8]
 800a94e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a950:	9301      	str	r3, [sp, #4]
 800a952:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a956:	9300      	str	r3, [sp, #0]
 800a958:	4623      	mov	r3, r4
 800a95a:	f7f6 fe35 	bl	80015c8 <HAL_HCD_HC_SubmitRequest>
 800a95e:	4603      	mov	r3, r0
 800a960:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800a962:	7bfb      	ldrb	r3, [r7, #15]
 800a964:	4618      	mov	r0, r3
 800a966:	f000 f8a3 	bl	800aab0 <USBH_Get_USB_Status>
 800a96a:	4603      	mov	r3, r0
 800a96c:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800a96e:	7bbb      	ldrb	r3, [r7, #14]
}
 800a970:	4618      	mov	r0, r3
 800a972:	3714      	adds	r7, #20
 800a974:	46bd      	mov	sp, r7
 800a976:	bd90      	pop	{r4, r7, pc}

0800a978 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a978:	b580      	push	{r7, lr}
 800a97a:	b082      	sub	sp, #8
 800a97c:	af00      	add	r7, sp, #0
 800a97e:	6078      	str	r0, [r7, #4]
 800a980:	460b      	mov	r3, r1
 800a982:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a98a:	78fa      	ldrb	r2, [r7, #3]
 800a98c:	4611      	mov	r1, r2
 800a98e:	4618      	mov	r0, r3
 800a990:	f7f7 f8d6 	bl	8001b40 <HAL_HCD_HC_GetURBState>
 800a994:	4603      	mov	r3, r0
}
 800a996:	4618      	mov	r0, r3
 800a998:	3708      	adds	r7, #8
 800a99a:	46bd      	mov	sp, r7
 800a99c:	bd80      	pop	{r7, pc}

0800a99e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800a99e:	b580      	push	{r7, lr}
 800a9a0:	b082      	sub	sp, #8
 800a9a2:	af00      	add	r7, sp, #0
 800a9a4:	6078      	str	r0, [r7, #4]
 800a9a6:	460b      	mov	r3, r1
 800a9a8:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	f893 33c0 	ldrb.w	r3, [r3, #960]	; 0x3c0
 800a9b0:	2b01      	cmp	r3, #1
 800a9b2:	d103      	bne.n	800a9bc <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800a9b4:	78fb      	ldrb	r3, [r7, #3]
 800a9b6:	4618      	mov	r0, r3
 800a9b8:	f000 f8a6 	bl	800ab08 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800a9bc:	20c8      	movs	r0, #200	; 0xc8
 800a9be:	f7f6 f9ff 	bl	8000dc0 <HAL_Delay>
  return USBH_OK;
 800a9c2:	2300      	movs	r3, #0
}
 800a9c4:	4618      	mov	r0, r3
 800a9c6:	3708      	adds	r7, #8
 800a9c8:	46bd      	mov	sp, r7
 800a9ca:	bd80      	pop	{r7, pc}

0800a9cc <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800a9cc:	b480      	push	{r7}
 800a9ce:	b085      	sub	sp, #20
 800a9d0:	af00      	add	r7, sp, #0
 800a9d2:	6078      	str	r0, [r7, #4]
 800a9d4:	460b      	mov	r3, r1
 800a9d6:	70fb      	strb	r3, [r7, #3]
 800a9d8:	4613      	mov	r3, r2
 800a9da:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a9e2:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800a9e4:	78fa      	ldrb	r2, [r7, #3]
 800a9e6:	68f9      	ldr	r1, [r7, #12]
 800a9e8:	4613      	mov	r3, r2
 800a9ea:	009b      	lsls	r3, r3, #2
 800a9ec:	4413      	add	r3, r2
 800a9ee:	00db      	lsls	r3, r3, #3
 800a9f0:	440b      	add	r3, r1
 800a9f2:	333b      	adds	r3, #59	; 0x3b
 800a9f4:	781b      	ldrb	r3, [r3, #0]
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d00a      	beq.n	800aa10 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800a9fa:	78fa      	ldrb	r2, [r7, #3]
 800a9fc:	68f9      	ldr	r1, [r7, #12]
 800a9fe:	4613      	mov	r3, r2
 800aa00:	009b      	lsls	r3, r3, #2
 800aa02:	4413      	add	r3, r2
 800aa04:	00db      	lsls	r3, r3, #3
 800aa06:	440b      	add	r3, r1
 800aa08:	3350      	adds	r3, #80	; 0x50
 800aa0a:	78ba      	ldrb	r2, [r7, #2]
 800aa0c:	701a      	strb	r2, [r3, #0]
 800aa0e:	e009      	b.n	800aa24 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800aa10:	78fa      	ldrb	r2, [r7, #3]
 800aa12:	68f9      	ldr	r1, [r7, #12]
 800aa14:	4613      	mov	r3, r2
 800aa16:	009b      	lsls	r3, r3, #2
 800aa18:	4413      	add	r3, r2
 800aa1a:	00db      	lsls	r3, r3, #3
 800aa1c:	440b      	add	r3, r1
 800aa1e:	3351      	adds	r3, #81	; 0x51
 800aa20:	78ba      	ldrb	r2, [r7, #2]
 800aa22:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800aa24:	2300      	movs	r3, #0
}
 800aa26:	4618      	mov	r0, r3
 800aa28:	3714      	adds	r7, #20
 800aa2a:	46bd      	mov	sp, r7
 800aa2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa30:	4770      	bx	lr

0800aa32 <USBH_LL_GetToggle>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval toggle (0/1)
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800aa32:	b480      	push	{r7}
 800aa34:	b085      	sub	sp, #20
 800aa36:	af00      	add	r7, sp, #0
 800aa38:	6078      	str	r0, [r7, #4]
 800aa3a:	460b      	mov	r3, r1
 800aa3c:	70fb      	strb	r3, [r7, #3]
  uint8_t toggle = 0;
 800aa3e:	2300      	movs	r3, #0
 800aa40:	73fb      	strb	r3, [r7, #15]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800aa48:	60bb      	str	r3, [r7, #8]

  if(pHandle->hc[pipe].ep_is_in)
 800aa4a:	78fa      	ldrb	r2, [r7, #3]
 800aa4c:	68b9      	ldr	r1, [r7, #8]
 800aa4e:	4613      	mov	r3, r2
 800aa50:	009b      	lsls	r3, r3, #2
 800aa52:	4413      	add	r3, r2
 800aa54:	00db      	lsls	r3, r3, #3
 800aa56:	440b      	add	r3, r1
 800aa58:	333b      	adds	r3, #59	; 0x3b
 800aa5a:	781b      	ldrb	r3, [r3, #0]
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d00a      	beq.n	800aa76 <USBH_LL_GetToggle+0x44>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 800aa60:	78fa      	ldrb	r2, [r7, #3]
 800aa62:	68b9      	ldr	r1, [r7, #8]
 800aa64:	4613      	mov	r3, r2
 800aa66:	009b      	lsls	r3, r3, #2
 800aa68:	4413      	add	r3, r2
 800aa6a:	00db      	lsls	r3, r3, #3
 800aa6c:	440b      	add	r3, r1
 800aa6e:	3350      	adds	r3, #80	; 0x50
 800aa70:	781b      	ldrb	r3, [r3, #0]
 800aa72:	73fb      	strb	r3, [r7, #15]
 800aa74:	e009      	b.n	800aa8a <USBH_LL_GetToggle+0x58>
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 800aa76:	78fa      	ldrb	r2, [r7, #3]
 800aa78:	68b9      	ldr	r1, [r7, #8]
 800aa7a:	4613      	mov	r3, r2
 800aa7c:	009b      	lsls	r3, r3, #2
 800aa7e:	4413      	add	r3, r2
 800aa80:	00db      	lsls	r3, r3, #3
 800aa82:	440b      	add	r3, r1
 800aa84:	3351      	adds	r3, #81	; 0x51
 800aa86:	781b      	ldrb	r3, [r3, #0]
 800aa88:	73fb      	strb	r3, [r7, #15]
  }
  return toggle;
 800aa8a:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa8c:	4618      	mov	r0, r3
 800aa8e:	3714      	adds	r7, #20
 800aa90:	46bd      	mov	sp, r7
 800aa92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa96:	4770      	bx	lr

0800aa98 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800aa98:	b580      	push	{r7, lr}
 800aa9a:	b082      	sub	sp, #8
 800aa9c:	af00      	add	r7, sp, #0
 800aa9e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800aaa0:	6878      	ldr	r0, [r7, #4]
 800aaa2:	f7f6 f98d 	bl	8000dc0 <HAL_Delay>
}
 800aaa6:	bf00      	nop
 800aaa8:	3708      	adds	r7, #8
 800aaaa:	46bd      	mov	sp, r7
 800aaac:	bd80      	pop	{r7, pc}
	...

0800aab0 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800aab0:	b480      	push	{r7}
 800aab2:	b085      	sub	sp, #20
 800aab4:	af00      	add	r7, sp, #0
 800aab6:	4603      	mov	r3, r0
 800aab8:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800aaba:	2300      	movs	r3, #0
 800aabc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800aabe:	79fb      	ldrb	r3, [r7, #7]
 800aac0:	2b03      	cmp	r3, #3
 800aac2:	d817      	bhi.n	800aaf4 <USBH_Get_USB_Status+0x44>
 800aac4:	a201      	add	r2, pc, #4	; (adr r2, 800aacc <USBH_Get_USB_Status+0x1c>)
 800aac6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aaca:	bf00      	nop
 800aacc:	0800aadd 	.word	0x0800aadd
 800aad0:	0800aae3 	.word	0x0800aae3
 800aad4:	0800aae9 	.word	0x0800aae9
 800aad8:	0800aaef 	.word	0x0800aaef
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800aadc:	2300      	movs	r3, #0
 800aade:	73fb      	strb	r3, [r7, #15]
    break;
 800aae0:	e00b      	b.n	800aafa <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800aae2:	2302      	movs	r3, #2
 800aae4:	73fb      	strb	r3, [r7, #15]
    break;
 800aae6:	e008      	b.n	800aafa <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800aae8:	2301      	movs	r3, #1
 800aaea:	73fb      	strb	r3, [r7, #15]
    break;
 800aaec:	e005      	b.n	800aafa <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800aaee:	2302      	movs	r3, #2
 800aaf0:	73fb      	strb	r3, [r7, #15]
    break;
 800aaf2:	e002      	b.n	800aafa <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800aaf4:	2302      	movs	r3, #2
 800aaf6:	73fb      	strb	r3, [r7, #15]
    break;
 800aaf8:	bf00      	nop
  }
  return usb_status;
 800aafa:	7bfb      	ldrb	r3, [r7, #15]
}
 800aafc:	4618      	mov	r0, r3
 800aafe:	3714      	adds	r7, #20
 800ab00:	46bd      	mov	sp, r7
 800ab02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab06:	4770      	bx	lr

0800ab08 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 0 : VBUS Active
  *           - 1 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{ 
 800ab08:	b580      	push	{r7, lr}
 800ab0a:	b084      	sub	sp, #16
 800ab0c:	af00      	add	r7, sp, #0
 800ab0e:	4603      	mov	r3, r0
 800ab10:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state; 
 800ab12:	79fb      	ldrb	r3, [r7, #7]
 800ab14:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800ab16:	79fb      	ldrb	r3, [r7, #7]
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d102      	bne.n	800ab22 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */ 	     
    data = GPIO_PIN_SET;
 800ab1c:	2301      	movs	r3, #1
 800ab1e:	73fb      	strb	r3, [r7, #15]
 800ab20:	e001      	b.n	800ab26 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800ab22:	2300      	movs	r3, #0
 800ab24:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800ab26:	7bfb      	ldrb	r3, [r7, #15]
 800ab28:	461a      	mov	r2, r3
 800ab2a:	2101      	movs	r1, #1
 800ab2c:	4803      	ldr	r0, [pc, #12]	; (800ab3c <MX_DriverVbusFS+0x34>)
 800ab2e:	f7f6 fc15 	bl	800135c <HAL_GPIO_WritePin>
}
 800ab32:	bf00      	nop
 800ab34:	3710      	adds	r7, #16
 800ab36:	46bd      	mov	sp, r7
 800ab38:	bd80      	pop	{r7, pc}
 800ab3a:	bf00      	nop
 800ab3c:	40020800 	.word	0x40020800

0800ab40 <__errno>:
 800ab40:	4b01      	ldr	r3, [pc, #4]	; (800ab48 <__errno+0x8>)
 800ab42:	6818      	ldr	r0, [r3, #0]
 800ab44:	4770      	bx	lr
 800ab46:	bf00      	nop
 800ab48:	2000002c 	.word	0x2000002c

0800ab4c <__libc_init_array>:
 800ab4c:	b570      	push	{r4, r5, r6, lr}
 800ab4e:	4e0d      	ldr	r6, [pc, #52]	; (800ab84 <__libc_init_array+0x38>)
 800ab50:	4c0d      	ldr	r4, [pc, #52]	; (800ab88 <__libc_init_array+0x3c>)
 800ab52:	1ba4      	subs	r4, r4, r6
 800ab54:	10a4      	asrs	r4, r4, #2
 800ab56:	2500      	movs	r5, #0
 800ab58:	42a5      	cmp	r5, r4
 800ab5a:	d109      	bne.n	800ab70 <__libc_init_array+0x24>
 800ab5c:	4e0b      	ldr	r6, [pc, #44]	; (800ab8c <__libc_init_array+0x40>)
 800ab5e:	4c0c      	ldr	r4, [pc, #48]	; (800ab90 <__libc_init_array+0x44>)
 800ab60:	f000 f8f6 	bl	800ad50 <_init>
 800ab64:	1ba4      	subs	r4, r4, r6
 800ab66:	10a4      	asrs	r4, r4, #2
 800ab68:	2500      	movs	r5, #0
 800ab6a:	42a5      	cmp	r5, r4
 800ab6c:	d105      	bne.n	800ab7a <__libc_init_array+0x2e>
 800ab6e:	bd70      	pop	{r4, r5, r6, pc}
 800ab70:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ab74:	4798      	blx	r3
 800ab76:	3501      	adds	r5, #1
 800ab78:	e7ee      	b.n	800ab58 <__libc_init_array+0xc>
 800ab7a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ab7e:	4798      	blx	r3
 800ab80:	3501      	adds	r5, #1
 800ab82:	e7f2      	b.n	800ab6a <__libc_init_array+0x1e>
 800ab84:	0800aed4 	.word	0x0800aed4
 800ab88:	0800aed4 	.word	0x0800aed4
 800ab8c:	0800aed4 	.word	0x0800aed4
 800ab90:	0800aed8 	.word	0x0800aed8

0800ab94 <malloc>:
 800ab94:	4b02      	ldr	r3, [pc, #8]	; (800aba0 <malloc+0xc>)
 800ab96:	4601      	mov	r1, r0
 800ab98:	6818      	ldr	r0, [r3, #0]
 800ab9a:	f000 b86d 	b.w	800ac78 <_malloc_r>
 800ab9e:	bf00      	nop
 800aba0:	2000002c 	.word	0x2000002c

0800aba4 <free>:
 800aba4:	4b02      	ldr	r3, [pc, #8]	; (800abb0 <free+0xc>)
 800aba6:	4601      	mov	r1, r0
 800aba8:	6818      	ldr	r0, [r3, #0]
 800abaa:	f000 b817 	b.w	800abdc <_free_r>
 800abae:	bf00      	nop
 800abb0:	2000002c 	.word	0x2000002c

0800abb4 <memcpy>:
 800abb4:	b510      	push	{r4, lr}
 800abb6:	1e43      	subs	r3, r0, #1
 800abb8:	440a      	add	r2, r1
 800abba:	4291      	cmp	r1, r2
 800abbc:	d100      	bne.n	800abc0 <memcpy+0xc>
 800abbe:	bd10      	pop	{r4, pc}
 800abc0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800abc4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800abc8:	e7f7      	b.n	800abba <memcpy+0x6>

0800abca <memset>:
 800abca:	4402      	add	r2, r0
 800abcc:	4603      	mov	r3, r0
 800abce:	4293      	cmp	r3, r2
 800abd0:	d100      	bne.n	800abd4 <memset+0xa>
 800abd2:	4770      	bx	lr
 800abd4:	f803 1b01 	strb.w	r1, [r3], #1
 800abd8:	e7f9      	b.n	800abce <memset+0x4>
	...

0800abdc <_free_r>:
 800abdc:	b538      	push	{r3, r4, r5, lr}
 800abde:	4605      	mov	r5, r0
 800abe0:	2900      	cmp	r1, #0
 800abe2:	d045      	beq.n	800ac70 <_free_r+0x94>
 800abe4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800abe8:	1f0c      	subs	r4, r1, #4
 800abea:	2b00      	cmp	r3, #0
 800abec:	bfb8      	it	lt
 800abee:	18e4      	addlt	r4, r4, r3
 800abf0:	f000 f8ac 	bl	800ad4c <__malloc_lock>
 800abf4:	4a1f      	ldr	r2, [pc, #124]	; (800ac74 <_free_r+0x98>)
 800abf6:	6813      	ldr	r3, [r2, #0]
 800abf8:	4610      	mov	r0, r2
 800abfa:	b933      	cbnz	r3, 800ac0a <_free_r+0x2e>
 800abfc:	6063      	str	r3, [r4, #4]
 800abfe:	6014      	str	r4, [r2, #0]
 800ac00:	4628      	mov	r0, r5
 800ac02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ac06:	f000 b8a2 	b.w	800ad4e <__malloc_unlock>
 800ac0a:	42a3      	cmp	r3, r4
 800ac0c:	d90c      	bls.n	800ac28 <_free_r+0x4c>
 800ac0e:	6821      	ldr	r1, [r4, #0]
 800ac10:	1862      	adds	r2, r4, r1
 800ac12:	4293      	cmp	r3, r2
 800ac14:	bf04      	itt	eq
 800ac16:	681a      	ldreq	r2, [r3, #0]
 800ac18:	685b      	ldreq	r3, [r3, #4]
 800ac1a:	6063      	str	r3, [r4, #4]
 800ac1c:	bf04      	itt	eq
 800ac1e:	1852      	addeq	r2, r2, r1
 800ac20:	6022      	streq	r2, [r4, #0]
 800ac22:	6004      	str	r4, [r0, #0]
 800ac24:	e7ec      	b.n	800ac00 <_free_r+0x24>
 800ac26:	4613      	mov	r3, r2
 800ac28:	685a      	ldr	r2, [r3, #4]
 800ac2a:	b10a      	cbz	r2, 800ac30 <_free_r+0x54>
 800ac2c:	42a2      	cmp	r2, r4
 800ac2e:	d9fa      	bls.n	800ac26 <_free_r+0x4a>
 800ac30:	6819      	ldr	r1, [r3, #0]
 800ac32:	1858      	adds	r0, r3, r1
 800ac34:	42a0      	cmp	r0, r4
 800ac36:	d10b      	bne.n	800ac50 <_free_r+0x74>
 800ac38:	6820      	ldr	r0, [r4, #0]
 800ac3a:	4401      	add	r1, r0
 800ac3c:	1858      	adds	r0, r3, r1
 800ac3e:	4282      	cmp	r2, r0
 800ac40:	6019      	str	r1, [r3, #0]
 800ac42:	d1dd      	bne.n	800ac00 <_free_r+0x24>
 800ac44:	6810      	ldr	r0, [r2, #0]
 800ac46:	6852      	ldr	r2, [r2, #4]
 800ac48:	605a      	str	r2, [r3, #4]
 800ac4a:	4401      	add	r1, r0
 800ac4c:	6019      	str	r1, [r3, #0]
 800ac4e:	e7d7      	b.n	800ac00 <_free_r+0x24>
 800ac50:	d902      	bls.n	800ac58 <_free_r+0x7c>
 800ac52:	230c      	movs	r3, #12
 800ac54:	602b      	str	r3, [r5, #0]
 800ac56:	e7d3      	b.n	800ac00 <_free_r+0x24>
 800ac58:	6820      	ldr	r0, [r4, #0]
 800ac5a:	1821      	adds	r1, r4, r0
 800ac5c:	428a      	cmp	r2, r1
 800ac5e:	bf04      	itt	eq
 800ac60:	6811      	ldreq	r1, [r2, #0]
 800ac62:	6852      	ldreq	r2, [r2, #4]
 800ac64:	6062      	str	r2, [r4, #4]
 800ac66:	bf04      	itt	eq
 800ac68:	1809      	addeq	r1, r1, r0
 800ac6a:	6021      	streq	r1, [r4, #0]
 800ac6c:	605c      	str	r4, [r3, #4]
 800ac6e:	e7c7      	b.n	800ac00 <_free_r+0x24>
 800ac70:	bd38      	pop	{r3, r4, r5, pc}
 800ac72:	bf00      	nop
 800ac74:	200000ec 	.word	0x200000ec

0800ac78 <_malloc_r>:
 800ac78:	b570      	push	{r4, r5, r6, lr}
 800ac7a:	1ccd      	adds	r5, r1, #3
 800ac7c:	f025 0503 	bic.w	r5, r5, #3
 800ac80:	3508      	adds	r5, #8
 800ac82:	2d0c      	cmp	r5, #12
 800ac84:	bf38      	it	cc
 800ac86:	250c      	movcc	r5, #12
 800ac88:	2d00      	cmp	r5, #0
 800ac8a:	4606      	mov	r6, r0
 800ac8c:	db01      	blt.n	800ac92 <_malloc_r+0x1a>
 800ac8e:	42a9      	cmp	r1, r5
 800ac90:	d903      	bls.n	800ac9a <_malloc_r+0x22>
 800ac92:	230c      	movs	r3, #12
 800ac94:	6033      	str	r3, [r6, #0]
 800ac96:	2000      	movs	r0, #0
 800ac98:	bd70      	pop	{r4, r5, r6, pc}
 800ac9a:	f000 f857 	bl	800ad4c <__malloc_lock>
 800ac9e:	4a21      	ldr	r2, [pc, #132]	; (800ad24 <_malloc_r+0xac>)
 800aca0:	6814      	ldr	r4, [r2, #0]
 800aca2:	4621      	mov	r1, r4
 800aca4:	b991      	cbnz	r1, 800accc <_malloc_r+0x54>
 800aca6:	4c20      	ldr	r4, [pc, #128]	; (800ad28 <_malloc_r+0xb0>)
 800aca8:	6823      	ldr	r3, [r4, #0]
 800acaa:	b91b      	cbnz	r3, 800acb4 <_malloc_r+0x3c>
 800acac:	4630      	mov	r0, r6
 800acae:	f000 f83d 	bl	800ad2c <_sbrk_r>
 800acb2:	6020      	str	r0, [r4, #0]
 800acb4:	4629      	mov	r1, r5
 800acb6:	4630      	mov	r0, r6
 800acb8:	f000 f838 	bl	800ad2c <_sbrk_r>
 800acbc:	1c43      	adds	r3, r0, #1
 800acbe:	d124      	bne.n	800ad0a <_malloc_r+0x92>
 800acc0:	230c      	movs	r3, #12
 800acc2:	6033      	str	r3, [r6, #0]
 800acc4:	4630      	mov	r0, r6
 800acc6:	f000 f842 	bl	800ad4e <__malloc_unlock>
 800acca:	e7e4      	b.n	800ac96 <_malloc_r+0x1e>
 800accc:	680b      	ldr	r3, [r1, #0]
 800acce:	1b5b      	subs	r3, r3, r5
 800acd0:	d418      	bmi.n	800ad04 <_malloc_r+0x8c>
 800acd2:	2b0b      	cmp	r3, #11
 800acd4:	d90f      	bls.n	800acf6 <_malloc_r+0x7e>
 800acd6:	600b      	str	r3, [r1, #0]
 800acd8:	50cd      	str	r5, [r1, r3]
 800acda:	18cc      	adds	r4, r1, r3
 800acdc:	4630      	mov	r0, r6
 800acde:	f000 f836 	bl	800ad4e <__malloc_unlock>
 800ace2:	f104 000b 	add.w	r0, r4, #11
 800ace6:	1d23      	adds	r3, r4, #4
 800ace8:	f020 0007 	bic.w	r0, r0, #7
 800acec:	1ac3      	subs	r3, r0, r3
 800acee:	d0d3      	beq.n	800ac98 <_malloc_r+0x20>
 800acf0:	425a      	negs	r2, r3
 800acf2:	50e2      	str	r2, [r4, r3]
 800acf4:	e7d0      	b.n	800ac98 <_malloc_r+0x20>
 800acf6:	428c      	cmp	r4, r1
 800acf8:	684b      	ldr	r3, [r1, #4]
 800acfa:	bf16      	itet	ne
 800acfc:	6063      	strne	r3, [r4, #4]
 800acfe:	6013      	streq	r3, [r2, #0]
 800ad00:	460c      	movne	r4, r1
 800ad02:	e7eb      	b.n	800acdc <_malloc_r+0x64>
 800ad04:	460c      	mov	r4, r1
 800ad06:	6849      	ldr	r1, [r1, #4]
 800ad08:	e7cc      	b.n	800aca4 <_malloc_r+0x2c>
 800ad0a:	1cc4      	adds	r4, r0, #3
 800ad0c:	f024 0403 	bic.w	r4, r4, #3
 800ad10:	42a0      	cmp	r0, r4
 800ad12:	d005      	beq.n	800ad20 <_malloc_r+0xa8>
 800ad14:	1a21      	subs	r1, r4, r0
 800ad16:	4630      	mov	r0, r6
 800ad18:	f000 f808 	bl	800ad2c <_sbrk_r>
 800ad1c:	3001      	adds	r0, #1
 800ad1e:	d0cf      	beq.n	800acc0 <_malloc_r+0x48>
 800ad20:	6025      	str	r5, [r4, #0]
 800ad22:	e7db      	b.n	800acdc <_malloc_r+0x64>
 800ad24:	200000ec 	.word	0x200000ec
 800ad28:	200000f0 	.word	0x200000f0

0800ad2c <_sbrk_r>:
 800ad2c:	b538      	push	{r3, r4, r5, lr}
 800ad2e:	4c06      	ldr	r4, [pc, #24]	; (800ad48 <_sbrk_r+0x1c>)
 800ad30:	2300      	movs	r3, #0
 800ad32:	4605      	mov	r5, r0
 800ad34:	4608      	mov	r0, r1
 800ad36:	6023      	str	r3, [r4, #0]
 800ad38:	f7f5 ff64 	bl	8000c04 <_sbrk>
 800ad3c:	1c43      	adds	r3, r0, #1
 800ad3e:	d102      	bne.n	800ad46 <_sbrk_r+0x1a>
 800ad40:	6823      	ldr	r3, [r4, #0]
 800ad42:	b103      	cbz	r3, 800ad46 <_sbrk_r+0x1a>
 800ad44:	602b      	str	r3, [r5, #0]
 800ad46:	bd38      	pop	{r3, r4, r5, pc}
 800ad48:	20000ce4 	.word	0x20000ce4

0800ad4c <__malloc_lock>:
 800ad4c:	4770      	bx	lr

0800ad4e <__malloc_unlock>:
 800ad4e:	4770      	bx	lr

0800ad50 <_init>:
 800ad50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad52:	bf00      	nop
 800ad54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad56:	bc08      	pop	{r3}
 800ad58:	469e      	mov	lr, r3
 800ad5a:	4770      	bx	lr

0800ad5c <_fini>:
 800ad5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad5e:	bf00      	nop
 800ad60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad62:	bc08      	pop	{r3}
 800ad64:	469e      	mov	lr, r3
 800ad66:	4770      	bx	lr
